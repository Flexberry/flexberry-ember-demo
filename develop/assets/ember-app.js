"use strict";

/* jshint ignore:start */



/* jshint ignore:end */

define('ember-app/adapters/application-offline', ['exports', 'ember-flexberry-data', 'ember-app/config/environment'], function (exports, _emberFlexberryData, _emberAppConfigEnvironment) {
  exports['default'] = _emberFlexberryData.Adapter.Offline.extend({
    dbName: _emberAppConfigEnvironment['default'].APP.offline.dbName
  });
});
define('ember-app/adapters/application', ['exports', 'ember-flexberry-data', 'ember-app/config/environment'], function (exports, _emberFlexberryData, _emberAppConfigEnvironment) {
  exports['default'] = _emberFlexberryData.Adapter.Odata.extend(_emberFlexberryData.Projection.AdapterMixin, {
    host: _emberAppConfigEnvironment['default'].APP.backendUrls.api
  });
});
define('ember-app/adapters/new-platform-flexberry-services-lock', ['exports', 'ember-flexberry/adapters/new-platform-flexberry-services-lock', 'ember-app/config/environment'], function (exports, _emberFlexberryAdaptersNewPlatformFlexberryServicesLock, _emberAppConfigEnvironment) {
  exports['default'] = _emberFlexberryAdaptersNewPlatformFlexberryServicesLock['default'].extend({
    /**
      @property host
      @type String
    */
    host: _emberAppConfigEnvironment['default'].APP.backendUrls.api
  });
});
define('ember-app/adapters/odata', ['exports', 'ember-flexberry-data/adapters/odata'], function (exports, _emberFlexberryDataAdaptersOdata) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataAdaptersOdata['default'];
    }
  });
});
define('ember-app/adapters/offline', ['exports', 'ember-flexberry-data/adapters/offline'], function (exports, _emberFlexberryDataAdaptersOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataAdaptersOffline['default'];
    }
  });
});
define('ember-app/app', ['exports', 'ember', 'ember-app/resolver', 'ember-load-initializers', 'ember-app/config/environment', 'ember-app/models/custom-inflector-rules'], function (exports, _ember, _emberAppResolver, _emberLoadInitializers, _emberAppConfigEnvironment, _emberAppModelsCustomInflectorRules) {

  var App = undefined;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _emberAppConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _emberAppConfigEnvironment['default'].podModulePrefix,
    Resolver: _emberAppResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _emberAppConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define('ember-app/browserify', ['exports', 'npm:dexie', 'npm:node-uuid'], function (exports, _npmDexie, _npmNodeUuid) {});
// Requirement of ember-browserify.
// In order to use NPM pacakges inside the addon, we have to import
// them from somewhere in /app directory.
// See: https://github.com/ef4/ember-browserify#using-ember-browserify-in-addons
define('ember-app/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'ember-app/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _emberAppConfigEnvironment) {

  var name = _emberAppConfigEnvironment['default'].APP.name;
  var version = _emberAppConfigEnvironment['default'].APP.version;

  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({
    version: version,
    name: name
  });
});
define('ember-app/components/base-control', ['exports', 'ember-flexberry-gis/components/base-control'], function (exports, _emberFlexberryGisComponentsBaseControl) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsBaseControl['default'];
    }
  });
});
define('ember-app/components/base-layer', ['exports', 'ember-flexberry-gis/components/base-layer'], function (exports, _emberFlexberryGisComponentsBaseLayer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsBaseLayer['default'];
    }
  });
});
define('ember-app/components/block-slot', ['exports', 'ember-block-slots/components/block-slot'], function (exports, _emberBlockSlotsComponentsBlockSlot) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBlockSlotsComponentsBlockSlot['default'];
    }
  });
});
define('ember-app/components/colsconfig-dialog-content', ['exports', 'ember-flexberry/components/colsconfig-dialog-content'], function (exports, _emberFlexberryComponentsColsconfigDialogContent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsColsconfigDialogContent['default'];
    }
  });
});
define('ember-app/components/div-control', ['exports', 'ember-flexberry-gis/components/div-control'], function (exports, _emberFlexberryGisComponentsDivControl) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsDivControl['default'];
    }
  });
});
define('ember-app/components/feature-result-item', ['exports', 'ember-flexberry-gis/components/feature-result-item'], function (exports, _emberFlexberryGisComponentsFeatureResultItem) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFeatureResultItem['default'];
    }
  });
});
define('ember-app/components/flexberry-button', ['exports', 'ember-flexberry-gis/components/flexberry-button'], function (exports, _emberFlexberryGisComponentsFlexberryButton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryButton['default'];
    }
  });
});
define('ember-app/components/flexberry-checkbox', ['exports', 'ember-flexberry/components/flexberry-checkbox'], function (exports, _emberFlexberryComponentsFlexberryCheckbox) {
  exports['default'] = _emberFlexberryComponentsFlexberryCheckbox['default'];
});
define('ember-app/components/flexberry-colorpicker', ['exports', 'ember-flexberry-gis/components/flexberry-colorpicker'], function (exports, _emberFlexberryGisComponentsFlexberryColorpicker) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryColorpicker['default'];
    }
  });
});
define('ember-app/components/flexberry-csw', ['exports', 'ember-flexberry-gis/components/flexberry-csw'], function (exports, _emberFlexberryGisComponentsFlexberryCsw) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryCsw['default'];
    }
  });
});
define('ember-app/components/flexberry-datepicker', ['exports', 'ember-flexberry/components/flexberry-datepicker'], function (exports, _emberFlexberryComponentsFlexberryDatepicker) {
  exports['default'] = _emberFlexberryComponentsFlexberryDatepicker['default'];
});
define('ember-app/components/flexberry-ddau-checkbox', ['exports', 'ember-flexberry-gis/components/flexberry-ddau-checkbox'], function (exports, _emberFlexberryGisComponentsFlexberryDdauCheckbox) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryDdauCheckbox['default'];
    }
  });
});
define('ember-app/components/flexberry-ddau-slider', ['exports', 'ember-flexberry-gis/components/flexberry-ddau-slider'], function (exports, _emberFlexberryGisComponentsFlexberryDdauSlider) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryDdauSlider['default'];
    }
  });
});
define('ember-app/components/flexberry-dialog', ['exports', 'ember-flexberry-gis/components/flexberry-dialog'], function (exports, _emberFlexberryGisComponentsFlexberryDialog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryDialog['default'];
    }
  });
});
define('ember-app/components/flexberry-dropdown', ['exports', 'ember-flexberry/components/flexberry-dropdown'], function (exports, _emberFlexberryComponentsFlexberryDropdown) {
  exports['default'] = _emberFlexberryComponentsFlexberryDropdown['default'];
});
define('ember-app/components/flexberry-field', ['exports', 'ember-flexberry/components/flexberry-field'], function (exports, _emberFlexberryComponentsFlexberryField) {
  exports['default'] = _emberFlexberryComponentsFlexberryField['default'];
});
define('ember-app/components/flexberry-file', ['exports', 'ember-flexberry/components/flexberry-file'], function (exports, _emberFlexberryComponentsFlexberryFile) {
  exports['default'] = _emberFlexberryComponentsFlexberryFile['default'];
});
define('ember-app/components/flexberry-groupedit', ['exports', 'ember-flexberry/components/flexberry-groupedit'], function (exports, _emberFlexberryComponentsFlexberryGroupedit) {
  exports['default'] = _emberFlexberryComponentsFlexberryGroupedit['default'];
});
define('ember-app/components/flexberry-icon', ['exports', 'ember-flexberry-gis/components/flexberry-icon'], function (exports, _emberFlexberryGisComponentsFlexberryIcon) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryIcon['default'];
    }
  });
});
define('ember-app/components/flexberry-identify-panel', ['exports', 'ember-flexberry-gis/components/flexberry-identify-panel'], function (exports, _emberFlexberryGisComponentsFlexberryIdentifyPanel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryIdentifyPanel['default'];
    }
  });
});
define('ember-app/components/flexberry-jsonarea', ['exports', 'ember-flexberry-gis/components/flexberry-jsonarea'], function (exports, _emberFlexberryGisComponentsFlexberryJsonarea) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryJsonarea['default'];
    }
  });
});
define('ember-app/components/flexberry-layers-dropdown', ['exports', 'ember-flexberry-gis/components/flexberry-layers-dropdown'], function (exports, _emberFlexberryGisComponentsFlexberryLayersDropdown) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryLayersDropdown['default'];
    }
  });
});
define('ember-app/components/flexberry-layers', ['exports', 'ember-flexberry-gis/components/flexberry-layers'], function (exports, _emberFlexberryGisComponentsFlexberryLayers) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryLayers['default'];
    }
  });
});
define('ember-app/components/flexberry-layerslegends', ['exports', 'ember-flexberry-gis/components/flexberry-layerslegends'], function (exports, _emberFlexberryGisComponentsFlexberryLayerslegends) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryLayerslegends['default'];
    }
  });
});
define('ember-app/components/flexberry-lookup', ['exports', 'ember-flexberry/components/flexberry-lookup'], function (exports, _emberFlexberryComponentsFlexberryLookup) {
  exports['default'] = _emberFlexberryComponentsFlexberryLookup['default'];
});
define('ember-app/components/flexberry-map', ['exports', 'ember-flexberry-gis/components/flexberry-map'], function (exports, _emberFlexberryGisComponentsFlexberryMap) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryMap['default'];
    }
  });
});
define('ember-app/components/flexberry-maplayer', ['exports', 'ember-flexberry-gis/components/flexberry-maplayer'], function (exports, _emberFlexberryGisComponentsFlexberryMaplayer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryMaplayer['default'];
    }
  });
});
define('ember-app/components/flexberry-maplayers', ['exports', 'ember-flexberry-gis/components/flexberry-maplayers'], function (exports, _emberFlexberryGisComponentsFlexberryMaplayers) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryMaplayers['default'];
    }
  });
});
define('ember-app/components/flexberry-maptoolbar', ['exports', 'ember-flexberry-gis/components/flexberry-maptoolbar'], function (exports, _emberFlexberryGisComponentsFlexberryMaptoolbar) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryMaptoolbar['default'];
    }
  });
});
define('ember-app/components/flexberry-menu', ['exports', 'ember-flexberry/components/flexberry-menu'], function (exports, _emberFlexberryComponentsFlexberryMenu) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryMenu['default'];
    }
  });
});
define('ember-app/components/flexberry-menuitem', ['exports', 'ember-flexberry/components/flexberry-menuitem'], function (exports, _emberFlexberryComponentsFlexberryMenuitem) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryMenuitem['default'];
    }
  });
});
define('ember-app/components/flexberry-objectlistview', ['exports', 'ember-flexberry/components/flexberry-objectlistview'], function (exports, _emberFlexberryComponentsFlexberryObjectlistview) {
  exports['default'] = _emberFlexberryComponentsFlexberryObjectlistview['default'];
});
define('ember-app/components/flexberry-search-panel', ['exports', 'ember-flexberry-gis/components/flexberry-search-panel'], function (exports, _emberFlexberryGisComponentsFlexberrySearchPanel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberrySearchPanel['default'];
    }
  });
});
define('ember-app/components/flexberry-search', ['exports', 'ember-flexberry-gis/components/flexberry-search'], function (exports, _emberFlexberryGisComponentsFlexberrySearch) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberrySearch['default'];
    }
  });
});
define('ember-app/components/flexberry-simpledatetime', ['exports', 'ember-flexberry/components/flexberry-simpledatetime'], function (exports, _emberFlexberryComponentsFlexberrySimpledatetime) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberrySimpledatetime['default'];
    }
  });
});
define('ember-app/components/flexberry-simpleolv', ['exports', 'ember-flexberry/components/flexberry-simpleolv'], function (exports, _emberFlexberryComponentsFlexberrySimpleolv) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberrySimpleolv['default'];
    }
  });
});
define('ember-app/components/flexberry-tab-bar', ['exports', 'ember-flexberry-gis/components/flexberry-tab-bar'], function (exports, _emberFlexberryGisComponentsFlexberryTabBar) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryTabBar['default'];
    }
  });
});
define('ember-app/components/flexberry-textarea', ['exports', 'ember-flexberry/components/flexberry-textarea'], function (exports, _emberFlexberryComponentsFlexberryTextarea) {
  exports['default'] = _emberFlexberryComponentsFlexberryTextarea['default'];
});
define('ember-app/components/flexberry-textbox', ['exports', 'ember-flexberry/components/flexberry-textbox'], function (exports, _emberFlexberryComponentsFlexberryTextbox) {
  exports['default'] = _emberFlexberryComponentsFlexberryTextbox['default'];
});
define('ember-app/components/flexberry-toggler', ['exports', 'ember-flexberry/components/flexberry-toggler'], function (exports, _emberFlexberryComponentsFlexberryToggler) {
  exports['default'] = _emberFlexberryComponentsFlexberryToggler['default'];
});
define('ember-app/components/flexberry-tree', ['exports', 'ember-flexberry-gis/components/flexberry-tree'], function (exports, _emberFlexberryGisComponentsFlexberryTree) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryTree['default'];
    }
  });
});
define('ember-app/components/flexberry-treenode', ['exports', 'ember-flexberry-gis/components/flexberry-treenode'], function (exports, _emberFlexberryGisComponentsFlexberryTreenode) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsFlexberryTreenode['default'];
    }
  });
});
define('ember-app/components/flexberry-validationmessage', ['exports', 'ember-flexberry/components/flexberry-validationmessage'], function (exports, _emberFlexberryComponentsFlexberryValidationmessage) {
  exports['default'] = _emberFlexberryComponentsFlexberryValidationmessage['default'];
});
define('ember-app/components/flexberry-validationsummary', ['exports', 'ember-flexberry/components/flexberry-validationsummary'], function (exports, _emberFlexberryComponentsFlexberryValidationsummary) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFlexberryValidationsummary['default'];
    }
  });
});
define('ember-app/components/form-load-time-tracker', ['exports', 'ember-flexberry/components/form-load-time-tracker'], function (exports, _emberFlexberryComponentsFormLoadTimeTracker) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsFormLoadTimeTracker['default'];
    }
  });
});
define('ember-app/components/groupedit-toolbar', ['exports', 'ember-flexberry/components/groupedit-toolbar'], function (exports, _emberFlexberryComponentsGroupeditToolbar) {
  exports['default'] = _emberFlexberryComponentsGroupeditToolbar['default'];
});
define('ember-app/components/history-control', ['exports', 'ember-flexberry-gis/components/history-control'], function (exports, _emberFlexberryGisComponentsHistoryControl) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsHistoryControl['default'];
    }
  });
});
define('ember-app/components/layer-result-list', ['exports', 'ember-flexberry-gis/components/layer-result-list'], function (exports, _emberFlexberryGisComponentsLayerResultList) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayerResultList['default'];
    }
  });
});
define('ember-app/components/layers-dialogs/add', ['exports', 'ember-flexberry-gis/components/layers-dialogs/add'], function (exports, _emberFlexberryGisComponentsLayersDialogsAdd) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersDialogsAdd['default'];
    }
  });
});
define('ember-app/components/layers-dialogs/edit', ['exports', 'ember-flexberry-gis/components/layers-dialogs/edit'], function (exports, _emberFlexberryGisComponentsLayersDialogsEdit) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersDialogsEdit['default'];
    }
  });
});
define('ember-app/components/layers-dialogs/remove', ['exports', 'ember-flexberry-gis/components/layers-dialogs/remove'], function (exports, _emberFlexberryGisComponentsLayersDialogsRemove) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersDialogsRemove['default'];
    }
  });
});
define('ember-app/components/layers-dialogs/settings/geocoder-osm-overpass', ['exports', 'ember-flexberry-gis/components/layers-dialogs/settings/geocoder-osm-overpass'], function (exports, _emberFlexberryGisComponentsLayersDialogsSettingsGeocoderOsmOverpass) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersDialogsSettingsGeocoderOsmOverpass['default'];
    }
  });
});
define('ember-app/components/layers-dialogs/settings/geocoder-osm-ru', ['exports', 'ember-flexberry-gis/components/layers-dialogs/settings/geocoder-osm-ru'], function (exports, _emberFlexberryGisComponentsLayersDialogsSettingsGeocoderOsmRu) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersDialogsSettingsGeocoderOsmRu['default'];
    }
  });
});
define('ember-app/components/layers-dialogs/settings/group', ['exports', 'ember-flexberry-gis/components/layers-dialogs/settings/group'], function (exports, _emberFlexberryGisComponentsLayersDialogsSettingsGroup) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersDialogsSettingsGroup['default'];
    }
  });
});
define('ember-app/components/layers-dialogs/settings/tile', ['exports', 'ember-flexberry-gis/components/layers-dialogs/settings/tile'], function (exports, _emberFlexberryGisComponentsLayersDialogsSettingsTile) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersDialogsSettingsTile['default'];
    }
  });
});
define('ember-app/components/layers-dialogs/settings/wfs', ['exports', 'ember-flexberry-gis/components/layers-dialogs/settings/wfs'], function (exports, _emberFlexberryGisComponentsLayersDialogsSettingsWfs) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersDialogsSettingsWfs['default'];
    }
  });
});
define('ember-app/components/layers-dialogs/settings/wms-single-tile', ['exports', 'ember-flexberry-gis/components/layers-dialogs/settings/wms-single-tile'], function (exports, _emberFlexberryGisComponentsLayersDialogsSettingsWmsSingleTile) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersDialogsSettingsWmsSingleTile['default'];
    }
  });
});
define('ember-app/components/layers-dialogs/settings/wms-wfs', ['exports', 'ember-flexberry-gis/components/layers-dialogs/settings/wms-wfs'], function (exports, _emberFlexberryGisComponentsLayersDialogsSettingsWmsWfs) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersDialogsSettingsWmsWfs['default'];
    }
  });
});
define('ember-app/components/layers-dialogs/settings/wms', ['exports', 'ember-flexberry-gis/components/layers-dialogs/settings/wms'], function (exports, _emberFlexberryGisComponentsLayersDialogsSettingsWms) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersDialogsSettingsWms['default'];
    }
  });
});
define('ember-app/components/layers/geocoder-base-layer', ['exports', 'ember-flexberry-gis/components/layers/geocoder-base-layer'], function (exports, _emberFlexberryGisComponentsLayersGeocoderBaseLayer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersGeocoderBaseLayer['default'];
    }
  });
});
define('ember-app/components/layers/geocoder-osm-overpass-layer', ['exports', 'ember-flexberry-gis/components/layers/geocoder-osm-overpass-layer'], function (exports, _emberFlexberryGisComponentsLayersGeocoderOsmOverpassLayer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersGeocoderOsmOverpassLayer['default'];
    }
  });
});
define('ember-app/components/layers/geocoder-osm-ru-layer', ['exports', 'ember-flexberry-gis/components/layers/geocoder-osm-ru-layer'], function (exports, _emberFlexberryGisComponentsLayersGeocoderOsmRuLayer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersGeocoderOsmRuLayer['default'];
    }
  });
});
define('ember-app/components/layers/geojson-layer', ['exports', 'ember', 'ember-flexberry-gis/components/base-layer'], function (exports, _ember, _emberFlexberryGisComponentsBaseLayer) {

  /**
    WFS layer component for leaflet map.
  
    @class WfsLayerComponent
    @extend BaseLayerComponent
   */
  exports['default'] = _emberFlexberryGisComponentsBaseLayer['default'].extend({
    leafletOptions: ['pointToLayer', 'style', 'onEachFeature', 'filter', 'coordsToLatLng', 'geojson'],

    layerFunctions: ['pointToLayer', 'style', 'onEachFeature', 'filter', 'coordsToLatLng'],

    /**
      Sets leaflet layer's visibility.
       @method _setLayerOpacity
      @private
    */
    _setLayerOpacity: function _setLayerOpacity() {
      var leafletLayer = this.get('_leafletObject');
      var leafletLayerStyle = _ember['default'].get(leafletLayer, 'options.style');
      if (_ember['default'].isNone(leafletLayerStyle)) {
        leafletLayerStyle = {};
        _ember['default'].set(leafletLayer, 'options.style', leafletLayerStyle);
      }

      var opacity = this.get('opacity');
      _ember['default'].set(leafletLayerStyle, 'opacity', opacity);
      _ember['default'].set(leafletLayerStyle, 'fillOpacity', opacity);

      leafletLayer.setStyle(leafletLayerStyle);
    },

    /**
      Creates leaflet layer related to layer type.
       @method createLayer
      @returns <a href="http://leafletjs.com/reference-1.0.1.html#layer">L.Layer</a>|<a href="https://emberjs.com/api/classes/RSVP.Promise.html">Ember.RSVP.Promise</a>
      Leaflet layer or promise returning such layer.
    */
    createLayer: function createLayer(options) {
      options = _ember['default'].$.extend(true, {}, this.get('options'), options);
      var geojson = options.geojson || {};
      options = options || {};

      var featureCollection = {
        type: 'FeatureCollection',
        features: []
      };

      if (_ember['default'].isArray(geojson)) {
        _ember['default'].set(featureCollection, 'features', geojson);
      } else if (_ember['default'].get(geojson, 'type') === 'Feature') {
        _ember['default'].set(featureCollection, 'features', [geojson]);
      } else if (_ember['default'].get(geojson, 'type') === 'FeatureCollection') {
        featureCollection = geojson;
      }

      var features = _ember['default'].A(_ember['default'].get(featureCollection, 'features') || []);
      if (_ember['default'].get(features, 'length') === 0) {
        return L.geoJSON();
      }

      var layerFunctions = this.get('layerFunctions');
      var customFunction = undefined;
      for (var i = 0; i < layerFunctions.length; i++) {
        customFunction = _ember['default'].get(options, layerFunctions[i]);
        if (customFunction) {
          _ember['default'].set(options, layerFunctions[i], new Function('return ' + customFunction)());
        }
      }

      return L.geoJSON(featureCollection, options);
    },

    /**
      Handles 'flexberry-map:identify' event of leaflet map.
       @method identify
      @param {Object} e Event object.
      @param {<a href="http://leafletjs.com/reference.html#polygon">L.Polygon</a>} polygonLayer Polygon layer related to given area.
      @param {Object[]} layers Objects describing those layers which must be identified.
      @param {Object[]} results Objects describing identification results.
      Every result-object has the following structure: { layer: ..., features: [...] },
      where 'layer' is metadata of layer related to identification result, features is array
      containing (GeoJSON feature-objects)[http://geojson.org/geojson-spec.html#feature-objects]
      or a promise returning such array.
    */
    identify: function identify(e) {},

    /**
      Handles 'flexberry-map:search' event of leaflet map.
       @method search
      @param {Object} e Event object.
      @param {<a href="http://leafletjs.com/reference-1.0.0.html#latlng">L.LatLng</a>} e.latlng Center of the search area.
      @param {Object[]} layer Object describing layer that must be searched.
      @param {Object} searchOptions Search options related to layer type.
      @param {Object} results Hash containing search results.
      @param {Object[]} results.features Array containing (GeoJSON feature-objects)[http://geojson.org/geojson-spec.html#feature-objects]
      or a promise returning such array.
    */
    search: function search(e) {},

    /**
      Handles 'flexberry-map:query' event of leaflet map.
       @method _query
      @param {Object} e Event object.
      @param {Object} queryFilter Object with query filter paramteres
      @param {Object[]} results.features Array containing leaflet layers objects
      or a promise returning such array.
    */
    query: function query(e) {}
  });
});
/**
  @module ember-flexberry-gis
*/
define('ember-app/components/layers/group-layer', ['exports', 'ember-flexberry-gis/components/layers/group-layer'], function (exports, _emberFlexberryGisComponentsLayersGroupLayer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersGroupLayer['default'];
    }
  });
});
define('ember-app/components/layers/tile-layer', ['exports', 'ember-flexberry-gis/components/layers/tile-layer'], function (exports, _emberFlexberryGisComponentsLayersTileLayer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersTileLayer['default'];
    }
  });
});
define('ember-app/components/layers/wfs-layer', ['exports', 'ember-flexberry-gis/components/layers/wfs-layer'], function (exports, _emberFlexberryGisComponentsLayersWfsLayer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersWfsLayer['default'];
    }
  });
});
define('ember-app/components/layers/wms-layer', ['exports', 'ember-flexberry-gis/components/layers/wms-layer'], function (exports, _emberFlexberryGisComponentsLayersWmsLayer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersWmsLayer['default'];
    }
  });
});
define('ember-app/components/layers/wms-single-tile-layer', ['exports', 'ember-flexberry-gis/components/layers/wms-single-tile-layer'], function (exports, _emberFlexberryGisComponentsLayersWmsSingleTileLayer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersWmsSingleTileLayer['default'];
    }
  });
});
define('ember-app/components/layers/wms-wfs-layer', ['exports', 'ember-flexberry-gis/components/layers/wms-wfs-layer'], function (exports, _emberFlexberryGisComponentsLayersWmsWfsLayer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLayersWmsWfsLayer['default'];
    }
  });
});
define('ember-app/components/legend-control', ['exports', 'ember-flexberry-gis/components/legend-control'], function (exports, _emberFlexberryGisComponentsLegendControl) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLegendControl['default'];
    }
  });
});
define('ember-app/components/legends/geojson-legend', ['exports', 'ember', 'ember-flexberry-gis/components/legends/base-legend'], function (exports, _ember, _emberFlexberryGisComponentsLegendsBaseLegend) {

  /**
    Component representing map layer's legend for geojson-layers.
  
    @class GeojsonLegendComponent
    @extends BaseLegendComponent
  */
  exports['default'] = _emberFlexberryGisComponentsLegendsBaseLegend['default'].extend({
    /**
      Array of legend's for layer.
      Every legend is an object with following structure { src: ... },
      where 'src' is legend's image source (url or base64-string).
       @property _legends
      @type Object[]
      @private
      @readOnly
    */
    _legends: _ember['default'].computed(function () {
      // TODO: Implement client-side legends rendering for geojson-layers & extend.
      return _ember['default'].A();
    })
  });
});
define('ember-app/components/legends/wfs-legend', ['exports', 'ember-flexberry-gis/components/legends/wfs-legend'], function (exports, _emberFlexberryGisComponentsLegendsWfsLegend) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLegendsWfsLegend['default'];
    }
  });
});
define('ember-app/components/legends/wms-legend', ['exports', 'ember-flexberry-gis/components/legends/wms-legend'], function (exports, _emberFlexberryGisComponentsLegendsWmsLegend) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLegendsWmsLegend['default'];
    }
  });
});
define('ember-app/components/legends/wms-single-tile-legend', ['exports', 'ember-flexberry-gis/components/legends/wms-single-tile-legend'], function (exports, _emberFlexberryGisComponentsLegendsWmsSingleTileLegend) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLegendsWmsSingleTileLegend['default'];
    }
  });
});
define('ember-app/components/legends/wms-wfs-legend', ['exports', 'ember-flexberry-gis/components/legends/wms-wfs-legend'], function (exports, _emberFlexberryGisComponentsLegendsWmsWfsLegend) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsLegendsWmsWfsLegend['default'];
    }
  });
});
define('ember-app/components/map-commands-dialogs/export', ['exports', 'ember-flexberry-gis/components/map-commands-dialogs/export'], function (exports, _emberFlexberryGisComponentsMapCommandsDialogsExport) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapCommandsDialogsExport['default'];
    }
  });
});
define('ember-app/components/map-commands-dialogs/go-to', ['exports', 'ember-flexberry-gis/components/map-commands-dialogs/go-to'], function (exports, _emberFlexberryGisComponentsMapCommandsDialogsGoTo) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapCommandsDialogsGoTo['default'];
    }
  });
});
define('ember-app/components/map-commands-dialogs/search-settings/geocoder-osm-ru', ['exports', 'ember-flexberry-gis/components/map-commands-dialogs/search-settings/geocoder-osm-ru'], function (exports, _emberFlexberryGisComponentsMapCommandsDialogsSearchSettingsGeocoderOsmRu) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapCommandsDialogsSearchSettingsGeocoderOsmRu['default'];
    }
  });
});
define('ember-app/components/map-commands-dialogs/search-settings/wfs', ['exports', 'ember-flexberry-gis/components/map-commands-dialogs/search-settings/wfs'], function (exports, _emberFlexberryGisComponentsMapCommandsDialogsSearchSettingsWfs) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapCommandsDialogsSearchSettingsWfs['default'];
    }
  });
});
define('ember-app/components/map-commands-dialogs/search-settings/wms-wfs', ['exports', 'ember-flexberry-gis/components/map-commands-dialogs/search-settings/wms-wfs'], function (exports, _emberFlexberryGisComponentsMapCommandsDialogsSearchSettingsWmsWfs) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapCommandsDialogsSearchSettingsWmsWfs['default'];
    }
  });
});
define('ember-app/components/map-commands-dialogs/search', ['exports', 'ember-flexberry-gis/components/map-commands-dialogs/search'], function (exports, _emberFlexberryGisComponentsMapCommandsDialogsSearch) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapCommandsDialogsSearch['default'];
    }
  });
});
define('ember-app/components/map-commands/base', ['exports', 'ember-flexberry-gis/components/map-commands/base'], function (exports, _emberFlexberryGisComponentsMapCommandsBase) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapCommandsBase['default'];
    }
  });
});
define('ember-app/components/map-commands/export', ['exports', 'ember-flexberry-gis/components/map-commands/export'], function (exports, _emberFlexberryGisComponentsMapCommandsExport) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapCommandsExport['default'];
    }
  });
});
define('ember-app/components/map-commands/full-extent', ['exports', 'ember-flexberry-gis/components/map-commands/full-extent'], function (exports, _emberFlexberryGisComponentsMapCommandsFullExtent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapCommandsFullExtent['default'];
    }
  });
});
define('ember-app/components/map-commands/go-to', ['exports', 'ember-flexberry-gis/components/map-commands/go-to'], function (exports, _emberFlexberryGisComponentsMapCommandsGoTo) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapCommandsGoTo['default'];
    }
  });
});
define('ember-app/components/map-commands/search', ['exports', 'ember-flexberry-gis/components/map-commands/search'], function (exports, _emberFlexberryGisComponentsMapCommandsSearch) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapCommandsSearch['default'];
    }
  });
});
define('ember-app/components/map-tools/base', ['exports', 'ember-flexberry-gis/components/map-tools/base'], function (exports, _emberFlexberryGisComponentsMapToolsBase) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapToolsBase['default'];
    }
  });
});
define('ember-app/components/map-tools/drag', ['exports', 'ember-flexberry-gis/components/map-tools/drag'], function (exports, _emberFlexberryGisComponentsMapToolsDrag) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapToolsDrag['default'];
    }
  });
});
define('ember-app/components/map-tools/draw-suggestion', ['exports', 'ember', 'ember-app/templates/components/map-tools/draw-suggestion', 'ember-i18n'], function (exports, _ember, _emberAppTemplatesComponentsMapToolsDrawSuggestion, _emberI18n) {

  /**
    Component's CSS-classes names.
    JSON-object containing string constants with CSS-classes names related to component's .hbs markup elements.
  
    @property {Object} flexberryClassNames
    @property {String} flexberryClassNames.prefix Component's CSS-class names prefix ('flexberry-measure-map-tool').
    @property {String} flexberryClassNames.wrapper Component's wrapping <div> CSS-class name ('flexberry-measure-map-tool').
    @property {String} flexberryClassNames.drawMarker Component's measure-coordinates mode's CSS-class name ('flexberry-measure-coordinates-map-tool').
    @property {String} flexberryClassNames.drawPolyline Component's measure-radius mode's CSS-class name ('flexberry-measure-radius-map-tool').
    @property {String} flexberryClassNames.drawCircle Component's measure-distance mode's CSS-class name ('flexberry-measure-distance-map-tool').
    @property {String} flexberryClassNames.drawRectangle Component's measure-area mode's CSS-class name ('flexberry-measure-area-map-tool').
    @readonly
    @static
  
    @for DrawMapToolComponent
  */
  var flexberryClassNamesPrefix = 'flexberry-draw-map-tool';
  var flexberryClassNames = {
    prefix: flexberryClassNamesPrefix,
    wrapper: flexberryClassNamesPrefix,
    drawMarker: 'flexberry-draw-marker-map-tool',
    drawPolyline: 'flexberry-draw-polyline-map-tool',
    drawCircle: 'flexberry-draw-circle-map-tool',
    drawRectangle: 'flexberry-draw-rectangle-map-tool',
    drawPolygon: 'flexberry-draw-polygon-map-tool'
  };

  /**
    Flexberry draw map-tool component.
    Component must be used in combination with {{#crossLink "FlexberryMaptoolbarComponent"}}flexberry-maptoolbar component{{/crossLink}}
    as a wrapper.
  
    Usage:
    templates/my-map-form.hbs
    ```handlebars
    {{#flexberry-maptoolbar leafletMap=leafletMap as |maptoolbar|}}
      {{map-tools/draw activate=(action "onMapToolActivate" target=maptoolbar)}}
    {{/flexberry-maptoolbar}}
    ```
  
    @class DrawMapToolComponent
    @extends <a href="http://emberjs.com/api/classes/Ember.Component.html">Ember.Component</a>
    @uses <a href="https://github.com/ciena-blueplanet/ember-block-slots#usage">SlotsMixin</a>
  */
  var DrawSuggestionMapToolComponent = _ember['default'].Component.extend({
    /**
      Properties which will be passed to the map-tool when it will be instantiated.
       @property _drawToolProperties
      @type Object
      @default null
    */
    _drawToolProperties: null,

    /**
      Reference to component's template.
    */
    layout: _emberAppTemplatesComponentsMapToolsDrawSuggestion['default'],

    /**
      Reference to component's CSS-classes names.
      Must be also a component's instance property to be available from component's .hbs template.
    */
    flexberryClassNames: flexberryClassNames,

    /**
      Overridden ['tagName'](http://emberjs.com/api/classes/Ember.Component.html#property_tagName)
      to disable a component's wrapping element.
       @property tagName
      @type String
      @default ''
    */
    tagName: '',

    /**
      Map tool's additional CSS-class.
       @property class
      @type String
      @default null
    */
    'class': null,

    /**
      Map tool's caption.
       @property caption
      @type String
      @default t('components.map-tools.draw.caption')
    */
    caption: (0, _emberI18n.translationMacro)('components.map-tools.draw-suggestion.caption'),

    /**
      Map tool's tooltip text.
      Will be added as wrapper's element 'title' attribute.
       @property tooltip
      @default t('components.map-tools.draw.tooltip')
    */
    tooltip: (0, _emberI18n.translationMacro)('components.map-tools.draw.tooltip'),

    /**
      Map tool's icon CSS-class names.
       @property iconClass
      @type String
      @default 'write icon'
    */
    iconClass: 'write icon',

    /**
      Map tool's 'draw-marker' mode's additional CSS-class.
       @property drawMarker
      @type String
      @default null
    */
    drawMarkerClass: null,

    /**
      Map tool's 'draw-marker' mode's caption.
       @property drawMarkerCaption
      @type String
      @default t('components.map-tools.draw.draw-marker.caption')
    */
    drawMarkerCaption: (0, _emberI18n.translationMacro)('components.map-tools.draw.draw-marker.caption'),

    /**
      Map tool's 'draw-marker' mode's icon CSS-class names.
       @property drawMarkerIconClass
      @type String
      @default 'square outline icon'
    */
    drawMarkerIconClass: 'marker icon',

    /**
      Map tool's 'draw-polyline' mode's additional CSS-class.
       @property drawPolylineClass
      @type String
      @default null
    */
    drawPolylineClass: null,

    /**
      Map tool's 'draw-polyline' mode's caption.
       @property drawPolylineCaption
      @type String
      @default t('components.map-tools.draw.draw-polyline.caption')
    */
    drawPolylineCaption: (0, _emberI18n.translationMacro)('components.map-tools.draw.draw-polyline.caption'),

    /**
      Map tool's 'draw-polyline' mode's icon CSS-class names.
       @property drawPolylineIconClass
      @type String
      @default 'empty star icon'
    */
    drawPolylineIconClass: 'empty star icon',

    /**
      Map tool's 'draw-circle' mode's additional CSS-class.
       @property drawCircleClass
      @type String
      @default null
    */
    drawCircleClass: null,

    /**
      Map tool's 'draw-circle' mode's caption.
       @property drawCircleCaption
      @type String
      @default t('components.map-tools.draw.draw-circle.caption')
    */
    drawCircleCaption: (0, _emberI18n.translationMacro)('components.map-tools.draw.draw-circle.caption'),

    /**
      Map tool's 'draw-circle' mode's icon CSS-class names.
       @property drawCircleIconClass
      @type String
      @default 'circle icon'
    */
    drawCircleIconClass: 'circle icon',

    /**
      Map tool's 'draw-rectangle' mode's additional CSS-class.
       @property drawRectangleClass
      @type String
      @default null
    */
    drawRectangleClass: null,

    /**
      Map tool's 'draw-rectangle' mode's caption.
       @property drawRectangleCaption
      @type String
      @default t('components.map-tools.draw.draw-rectangle.caption')
    */
    drawRectangleCaption: (0, _emberI18n.translationMacro)('components.map-tools.draw.draw-rectangle.caption'),

    /**
      Map tool's 'draw-rectangle' mode's icon CSS-class names.
       @property drawRectangleIconClass
      @type String
      @default 'square icon'
    */
    drawRectangleIconClass: 'square icon',

    /**
      Map tool's 'draw-polygon' mode's additional CSS-class.
       @property drawPolygonClass
      @type String
      @default null
    */
    drawPolygonClass: null,

    /**
      Map tool's 'draw-polygon' mode's caption.
       @property drawPolygonCaption
      @type String
      @default t('components.map-tools.draw.draw-polygon.caption')
    */
    drawPolygonCaption: (0, _emberI18n.translationMacro)('components.map-tools.draw.draw-polygon.caption'),

    /**
      Map tool's 'draw-polygon' mode's icon CSS-class names.
       @property drawPolygonIconClass
      @type String
      @default 'star icon'
    */
    drawPolygonIconClass: 'star icon',

    /**
      Map tool's 'draw-clear' mode's additional CSS-class.
       @property drawClearClass
      @type String
      @default null
    */
    drawClearClass: null,

    /**
      Map tool's 'draw-clear' mode's caption.
       @property drawClearCaption
      @type String
      @default t('components.map-tools.draw.draw-clear.caption')
    */
    drawClearCaption: (0, _emberI18n.translationMacro)('components.map-tools.draw.draw-clear.caption'),

    /**
      Map tool's 'draw-clear' mode's icon CSS-class names.
       @property drawClearIconClass
      @type String
      @default 'trash icon'
    */
    drawClearIconClass: 'trash icon',

    /**
      Flag: is map tool 'draw-marker' enable
       @property drawMarker
      @default true
      @type Boolean
    */
    drawMarker: true,

    /**
      Flag: is map tool 'draw-polyline' enable
       @property drawPolyline
      @default true
      @type Boolean
    */
    drawPolyline: true,

    /**
      Flag: is map tool 'draw-circle' enable
       @property drawCircle
      @default true
      @type Boolean
    */
    drawCircle: true,

    /**
      Flag: is map tool 'draw-rectangle' enable
       @property drawRectangle
      @default true
      @type Boolean
    */
    drawRectangle: true,

    /**
      Flag: is map tool 'draw-polygon' enable
       @property drawPolygon
      @default true
      @type Boolean
    */
    drawPolygon: true,

    /**
      Flag: is map tool 'draw-clear' enable
       @property drawClear
      @default true
      @type Boolean
    */
    drawClear: true,

    actions: {
      /**
        Handles {{#crossLink "BaseMapToolComponent/sendingActions.activate:method"}}base map-tool's 'activate' action{{/crossLink}}.
        Invokes own {{#crossLink "DrawMapToolComponent/sendingActions.activate:method"}}'activate' action{{/crossLink}}.
         @method actions.onMapToolActivate
        @param {Object} e Base map-tool's 'activate' action event-object.
      */
      onMapToolActivate: function onMapToolActivate() {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        this.sendAction.apply(this, ['activate'].concat(args));
      }
    },

    /**
      Initializes component.
    */
    init: function init() {
      this._super.apply(this, arguments);

      this.set('_drawToolProperties', {
        editLayer: new L.LayerGroup(),
        featuresLayer: new L.LayerGroup()
      });
    }

    /**
      Component's action invoking when map-tool must be activated.
       @method sendingActions.activate
      @param {Object} e Action's event object from
      {{#crossLink "BaseMapToolComponent/sendingActions.activate:method"}}base map-tool's 'activate' action{{/crossLink}}.
    */
  });

  // Add component's CSS-class names as component's class static constants
  // to make them available outside of the component instance.
  DrawSuggestionMapToolComponent.reopenClass({
    flexberryClassNames: flexberryClassNames
  });

  exports['default'] = DrawSuggestionMapToolComponent;
});
/**
  @module ember-flexberry-gis
*/
define('ember-app/components/map-tools/draw', ['exports', 'ember-flexberry-gis/components/map-tools/draw'], function (exports, _emberFlexberryGisComponentsMapToolsDraw) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapToolsDraw['default'];
    }
  });
});
define('ember-app/components/map-tools/identify', ['exports', 'ember-flexberry-gis/components/map-tools/identify'], function (exports, _emberFlexberryGisComponentsMapToolsIdentify) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapToolsIdentify['default'];
    }
  });
});
define('ember-app/components/map-tools/measure', ['exports', 'ember-flexberry-gis/components/map-tools/measure'], function (exports, _emberFlexberryGisComponentsMapToolsMeasure) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapToolsMeasure['default'];
    }
  });
});
define('ember-app/components/map-tools/zoom-in', ['exports', 'ember-flexberry-gis/components/map-tools/zoom-in'], function (exports, _emberFlexberryGisComponentsMapToolsZoomIn) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapToolsZoomIn['default'];
    }
  });
});
define('ember-app/components/map-tools/zoom-out', ['exports', 'ember-flexberry-gis/components/map-tools/zoom-out'], function (exports, _emberFlexberryGisComponentsMapToolsZoomOut) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMapToolsZoomOut['default'];
    }
  });
});
define('ember-app/components/minimap-control', ['exports', 'ember-flexberry-gis/components/minimap-control'], function (exports, _emberFlexberryGisComponentsMinimapControl) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsMinimapControl['default'];
    }
  });
});
define('ember-app/components/mobile/flexberry-file', ['exports', 'ember-flexberry/components/mobile/flexberry-file'], function (exports, _emberFlexberryComponentsMobileFlexberryFile) {
  exports['default'] = _emberFlexberryComponentsMobileFlexberryFile['default'];
});
define('ember-app/components/mobile/flexberry-groupedit', ['exports', 'ember-flexberry/components/mobile/flexberry-groupedit'], function (exports, _emberFlexberryComponentsMobileFlexberryGroupedit) {
  exports['default'] = _emberFlexberryComponentsMobileFlexberryGroupedit['default'];
});
define('ember-app/components/mobile/flexberry-objectlistview', ['exports', 'ember-flexberry/components/mobile/flexberry-objectlistview'], function (exports, _emberFlexberryComponentsMobileFlexberryObjectlistview) {
  exports['default'] = _emberFlexberryComponentsMobileFlexberryObjectlistview['default'];
});
define('ember-app/components/mobile/object-list-view-row', ['exports', 'ember-flexberry/components/mobile/object-list-view-row'], function (exports, _emberFlexberryComponentsMobileObjectListViewRow) {
  exports['default'] = _emberFlexberryComponentsMobileObjectListViewRow['default'];
});
define('ember-app/components/modal-dialog', ['exports', 'ember-flexberry/components/modal-dialog'], function (exports, _emberFlexberryComponentsModalDialog) {
  exports['default'] = _emberFlexberryComponentsModalDialog['default'];
});
define('ember-app/components/object-list-view-cell', ['exports', 'ember-flexberry/components/object-list-view-cell'], function (exports, _emberFlexberryComponentsObjectListViewCell) {
  exports['default'] = _emberFlexberryComponentsObjectListViewCell['default'];
});
define('ember-app/components/object-list-view-row', ['exports', 'ember-flexberry/components/object-list-view-row'], function (exports, _emberFlexberryComponentsObjectListViewRow) {
  exports['default'] = _emberFlexberryComponentsObjectListViewRow['default'];
});
define('ember-app/components/object-list-view-single-column-cell', ['exports', 'ember-flexberry/components/object-list-view-single-column-cell'], function (exports, _emberFlexberryComponentsObjectListViewSingleColumnCell) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsObjectListViewSingleColumnCell['default'];
    }
  });
});
define('ember-app/components/object-list-view', ['exports', 'ember-flexberry/components/object-list-view'], function (exports, _emberFlexberryComponentsObjectListView) {
  exports['default'] = _emberFlexberryComponentsObjectListView['default'];
});
define('ember-app/components/olv-setconfigdialogbutton', ['exports', 'ember-flexberry/components/olv-setconfigdialogbutton'], function (exports, _emberFlexberryComponentsOlvSetconfigdialogbutton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryComponentsOlvSetconfigdialogbutton['default'];
    }
  });
});
define('ember-app/components/olv-toolbar', ['exports', 'ember-flexberry/components/olv-toolbar'], function (exports, _emberFlexberryComponentsOlvToolbar) {
  exports['default'] = _emberFlexberryComponentsOlvToolbar['default'];
});
define('ember-app/components/range-slider', ['exports', 'ui-slider/components/range-slider'], function (exports, _uiSliderComponentsRangeSlider) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _uiSliderComponentsRangeSlider['default'];
    }
  });
});
define('ember-app/components/scale-control', ['exports', 'ember-flexberry-gis/components/scale-control'], function (exports, _emberFlexberryGisComponentsScaleControl) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsScaleControl['default'];
    }
  });
});
define('ember-app/components/spatial-bookmark', ['exports', 'ember-flexberry-gis/components/spatial-bookmark'], function (exports, _emberFlexberryGisComponentsSpatialBookmark) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsSpatialBookmark['default'];
    }
  });
});
define('ember-app/components/switch-scale-control', ['exports', 'ember-flexberry-gis/components/switch-scale-control'], function (exports, _emberFlexberryGisComponentsSwitchScaleControl) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsSwitchScaleControl['default'];
    }
  });
});
define('ember-app/components/ui-accordion', ['exports', 'semantic-ui-ember/components/ui-accordion'], function (exports, _semanticUiEmberComponentsUiAccordion) {
  exports['default'] = _semanticUiEmberComponentsUiAccordion['default'];
});
define('ember-app/components/ui-checkbox', ['exports', 'semantic-ui-ember/components/ui-checkbox'], function (exports, _semanticUiEmberComponentsUiCheckbox) {
  exports['default'] = _semanticUiEmberComponentsUiCheckbox['default'];
});
define('ember-app/components/ui-dropdown-item', ['exports', 'semantic-ui-ember/components/ui-dropdown-item'], function (exports, _semanticUiEmberComponentsUiDropdownItem) {
  exports['default'] = _semanticUiEmberComponentsUiDropdownItem['default'];
});
define('ember-app/components/ui-dropdown', ['exports', 'semantic-ui-ember/components/ui-dropdown'], function (exports, _semanticUiEmberComponentsUiDropdown) {
  exports['default'] = _semanticUiEmberComponentsUiDropdown['default'];
});
define('ember-app/components/ui-embed', ['exports', 'semantic-ui-ember/components/ui-embed'], function (exports, _semanticUiEmberComponentsUiEmbed) {
  exports['default'] = _semanticUiEmberComponentsUiEmbed['default'];
});
define('ember-app/components/ui-message', ['exports', 'ember-flexberry/components/ui-message'], function (exports, _emberFlexberryComponentsUiMessage) {
  exports['default'] = _emberFlexberryComponentsUiMessage['default'];
});
define('ember-app/components/ui-modal', ['exports', 'semantic-ui-ember/components/ui-modal'], function (exports, _semanticUiEmberComponentsUiModal) {
  exports['default'] = _semanticUiEmberComponentsUiModal['default'];
});
define('ember-app/components/ui-nag', ['exports', 'semantic-ui-ember/components/ui-nag'], function (exports, _semanticUiEmberComponentsUiNag) {
  exports['default'] = _semanticUiEmberComponentsUiNag['default'];
});
define('ember-app/components/ui-popup', ['exports', 'semantic-ui-ember/components/ui-popup'], function (exports, _semanticUiEmberComponentsUiPopup) {
  exports['default'] = _semanticUiEmberComponentsUiPopup['default'];
});
define('ember-app/components/ui-progress', ['exports', 'semantic-ui-ember/components/ui-progress'], function (exports, _semanticUiEmberComponentsUiProgress) {
  exports['default'] = _semanticUiEmberComponentsUiProgress['default'];
});
define('ember-app/components/ui-radio', ['exports', 'semantic-ui-ember/components/ui-radio'], function (exports, _semanticUiEmberComponentsUiRadio) {
  exports['default'] = _semanticUiEmberComponentsUiRadio['default'];
});
define('ember-app/components/ui-rating', ['exports', 'semantic-ui-ember/components/ui-rating'], function (exports, _semanticUiEmberComponentsUiRating) {
  exports['default'] = _semanticUiEmberComponentsUiRating['default'];
});
define('ember-app/components/ui-search', ['exports', 'semantic-ui-ember/components/ui-search'], function (exports, _semanticUiEmberComponentsUiSearch) {
  exports['default'] = _semanticUiEmberComponentsUiSearch['default'];
});
define('ember-app/components/ui-shape', ['exports', 'semantic-ui-ember/components/ui-shape'], function (exports, _semanticUiEmberComponentsUiShape) {
  exports['default'] = _semanticUiEmberComponentsUiShape['default'];
});
define('ember-app/components/ui-sidebar', ['exports', 'semantic-ui-ember/components/ui-sidebar'], function (exports, _semanticUiEmberComponentsUiSidebar) {
  exports['default'] = _semanticUiEmberComponentsUiSidebar['default'];
});
define('ember-app/components/ui-slider', ['exports', 'ui-slider/components/ui-slider'], function (exports, _uiSliderComponentsUiSlider) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _uiSliderComponentsUiSlider['default'];
    }
  });
});
define('ember-app/components/ui-sticky', ['exports', 'semantic-ui-ember/components/ui-sticky'], function (exports, _semanticUiEmberComponentsUiSticky) {
  exports['default'] = _semanticUiEmberComponentsUiSticky['default'];
});
define('ember-app/components/yield-slot', ['exports', 'ember-block-slots/components/yield-slot'], function (exports, _emberBlockSlotsComponentsYieldSlot) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBlockSlotsComponentsYieldSlot['default'];
    }
  });
});
define('ember-app/components/zoomslider-control', ['exports', 'ember-flexberry-gis/components/zoomslider-control'], function (exports, _emberFlexberryGisComponentsZoomsliderControl) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisComponentsZoomsliderControl['default'];
    }
  });
});
define('ember-app/controllers/application', ['exports', 'ember', 'ember-app/config/environment'], function (exports, _ember, _emberAppConfigEnvironment) {
  exports['default'] = _ember['default'].Controller.extend({
    /**
    */
    login: '',

    offlineGlobals: _ember['default'].inject.service('offline-globals'),

    /**
    */
    onlineStatus: _ember['default'].computed('offlineGlobals.isOnline', {
      get: function get() {
        return this.get('offlineGlobals.isOnline');
      },
      set: function set(key, newValue, oldValue) {
        if (newValue !== oldValue) {
          this.get('offlineGlobals').setOnlineAvailable(newValue);
        }

        return newValue;
      }
    }),

    /**
    */
    synchronizes: false,

    /**
      Locales supported by application.
       @property locales
      @type String[]
      @default ['ru', 'en']
    */
    locales: ['ru', 'en'],

    /**
      Handles changes in userSettingsService.isUserSettingsServiceEnabled.
       @method _userSettingsServiceChanged
      @private
    */
    _userSettingsServiceChanged: _ember['default'].observer('userSettingsService.isUserSettingsServiceEnabled', function () {
      this.get('target.router').refresh();
    }),

    /**
      Initializes controller.
    */
    init: function init() {
      this._super.apply(this, arguments);

      this.set('onlineStatus', true);
      var i18n = this.get('i18n');
      if (_ember['default'].isNone(i18n)) {
        return;
      }

      // If i18n.locale is long value like 'ru-RU', 'en-GB', ... this code will return short variant 'ru', 'en', etc.
      var shortCurrentLocale = this.get('i18n.locale').split('-')[0];
      var availableLocales = _ember['default'].A(this.get('locales'));

      // Force current locale to be one of available,
      // if browser's current language is not supported by dummy application,
      // or if browser's current locale is long value like 'ru-RU', 'en-GB', etc.
      if (!availableLocales.contains(shortCurrentLocale)) {
        i18n.set('locale', 'en');
      } else {
        i18n.set('locale', shortCurrentLocale);
      }
    },

    sitemap: _ember['default'].computed('i18n.locale', function () {
      var i18n = this.get('i18n');

      return {
        nodes: [{
          link: 'index',
          caption: i18n.t('forms.application.sitemap.index.caption'),
          title: i18n.t('forms.application.sitemap.index.title'),
          children: null
        }, {
          link: null,
          caption: i18n.t('forms.application.sitemap.flexberry-ember-demo.caption'),
          title: i18n.t('forms.application.sitemap.flexberry-ember-demo.title'),
          children: [{
            link: 'flexberry-ember-demo-application-user-l',
            caption: i18n.t('forms.application.sitemap.flexberry-ember-demo.flexberry-ember-demo-application-user-l.caption'),
            title: i18n.t('forms.application.sitemap.flexberry-ember-demo.flexberry-ember-demo-application-user-l.title'),
            children: null
          }, {
            link: 'flexberry-ember-demo-localization-l',
            caption: i18n.t('forms.application.sitemap.flexberry-ember-demo.flexberry-ember-demo-localization-l.caption'),
            title: i18n.t('forms.application.sitemap.flexberry-ember-demo.flexberry-ember-demo-localization-l.title'),
            children: null
          }, {
            link: 'flexberry-ember-demo-suggestion-l',
            caption: i18n.t('forms.application.sitemap.flexberry-ember-demo.flexberry-ember-demo-suggestion-l.caption'),
            title: i18n.t('forms.application.sitemap.flexberry-ember-demo.flexberry-ember-demo-suggestion-l.title'),
            children: null
          }, {
            link: 'flexberry-ember-demo-suggestion-type-l',
            caption: i18n.t('forms.application.sitemap.flexberry-ember-demo.flexberry-ember-demo-suggestion-type-l.caption'),
            title: i18n.t('forms.application.sitemap.flexberry-ember-demo.flexberry-ember-demo-suggestion-type-l.title'),
            children: null
          }]
        }, {
          link: 'map',
          caption: i18n.t('forms.application.sitemap.map.caption'),
          title: i18n.t('forms.application.sitemap.map.title'),
          children: null
        }]
      };
    }),

    actions: {
      toggleSidebar: function toggleSidebar() {
        _ember['default'].$('.ui.sidebar.main.menu').sidebar({
          onHide: function onHide() {
            _ember['default'].$('.sidebar.icon.text-menu-1').removeClass('hidden-menu');
            _ember['default'].$('.sidebar.icon.text-menu-2').addClass('hidden-menu');
          }
        }).sidebar('toggle');
        if (_ember['default'].$('.inverted.vertical.menu').hasClass('visible')) {
          _ember['default'].$('.sidebar.icon.text-menu-1').removeClass('hidden-menu');
          _ember['default'].$('.sidebar.icon.text-menu-2').addClass('hidden-menu');
        } else {
          _ember['default'].$('.sidebar.icon.text-menu-1').addClass('hidden-menu');
          _ember['default'].$('.sidebar.icon.text-menu-2').removeClass('hidden-menu');
        }
      },

      syncUp: function syncUp() {
        var _this = this;
        _this.set('synchronizes', true);
        var syncer = _ember['default'].getOwner(this).lookup('service:syncer');
        syncer.syncUp().then(function () {
          _this.set('synchronizes', false);
        })['catch'](function (reason) {
          _ember['default'].Logger.debug(reason);
        });
      },

      /**
      */
      login: function login() {
        var _this = this;
        var i18n = this.get('i18n');
        var login = _this.get('loginInput');
        var password = _this.get('password');
        if (login && password) {
          (function () {
            _this._resetLoginErrors();
            _this.set('tryToLogin', true);
            var store = _ember['default'].getOwner(_this).lookup('service:store');
            if (_this.get('onlineStatus')) {
              _ember['default'].$.ajax({
                type: 'GET',
                url: _emberAppConfigEnvironment['default'].APP.backendUrls.api + '/Login(login=\'' + login + '\',password=\'' + password + '\')',
                success: function success(result) {
                  _this.set('tryToLogin', false);
                  if (result.value === true) {
                    _this._resetLoginData(login);
                    store.queryRecord('flexberry-ember-demo-offline-user', { login: login }).then(function (record) {
                      if (record) {
                        if (record.get('password') !== password) {
                          record.set('password', password);
                          record.save();
                        }
                      } else {
                        store.createRecord('flexberry-ember-demo-offline-user', { login: login, password: password }).save();
                      }

                      _this.transitionToRoute('index');
                    });
                  } else {
                    _this.set('errorMessage', i18n.t('forms.login.errors.incorrect-auth-data'));
                  }
                },
                error: function error() {
                  _this.set('tryToLogin', false);
                  _this.set('errorMessage', i18n.t('forms.login.errors.server-error'));
                }
              });
            } else {
              store.queryRecord('flexberry-ember-demo-offline-user', { login: login, password: password }).then(function (record) {
                _this.set('tryToLogin', false);
                if (record) {
                  _this._resetLoginData(login);
                  _this.transitionToRoute('index');
                } else {
                  _this.set('errorMessage', i18n.t('forms.login.errors.incorrect-auth-data'));
                }
              });
            }
          })();
        } else {
          if (!login) {
            _this.set('emptyLogin', i18n.t('forms.login.errors.empty-login'));
          }

          if (!password) {
            _this.set('emptyPassword', i18n.t('forms.login.errors.empty-password'));
          }
        }
      },

      /**
      */
      logout: function logout() {
        var _this = this;
        var i18n = this.get('i18n');
        if (_this.get('onlineStatus')) {
          _ember['default'].$.ajax({
            type: 'GET',
            url: _emberAppConfigEnvironment['default'].APP.backendUrls.api + '/Logout()',
            success: function success(result) {
              if (result.value === true) {
                _this.set('login', '');
              } else {
                _this.set('errorMessage', i18n.t('forms.login.errors.unknown-error'));
              }

              _this.transitionToRoute('index');
            },
            error: function error() {
              _this.set('errorMessage', i18n.t('forms.login.errors.server-error'));
              _this.transitionToRoute('index');
            }
          });
        } else {
          _this.set('login', '');
          _this.transitionToRoute('index');
        }
      },

      /**
      */
      goToLoginForm: function goToLoginForm() {
        this.transitionToRoute('login');
      },

      /**
      */
      closeLoginForm: function closeLoginForm() {
        this._resetLoginErrors();
        this.transitionToRoute('index');
      }
    },

    /**
    */
    _resetLoginErrors: function _resetLoginErrors() {
      this.setProperties({
        errorMessage: null,
        emptyLogin: null,
        emptyPassword: null
      });
    },

    /**
    */
    _resetLoginData: function _resetLoginData(login) {
      this.setProperties({
        login: login,
        loginInput: null,
        password: null
      });
    }
  });
});
define('ember-app/controllers/colsconfig-dialog', ['exports', 'ember-flexberry/controllers/colsconfig-dialog'], function (exports, _emberFlexberryControllersColsconfigDialog) {
  exports['default'] = _emberFlexberryControllersColsconfigDialog['default'];
});
define('ember-app/controllers/detail-edit-form', ['exports', 'ember-flexberry/controllers/detail-edit-form'], function (exports, _emberFlexberryControllersDetailEditForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersDetailEditForm['default'];
    }
  });
});
define('ember-app/controllers/edit-form', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersEditForm['default'];
    }
  });
});
define('ember-app/controllers/flexberry-ember-demo-application-user-e', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    parentRoute: 'flexberry-ember-demo-application-user-l'
  });
});
define('ember-app/controllers/flexberry-ember-demo-application-user-e/new', ['exports', 'ember-app/controllers/flexberry-ember-demo-application-user-e'], function (exports, _emberAppControllersFlexberryEmberDemoApplicationUserE) {

  var FlexberryEmberDemoApplicationUserENewController = _emberAppControllersFlexberryEmberDemoApplicationUserE['default'];
  exports['default'] = FlexberryEmberDemoApplicationUserENewController;
});
define('ember-app/controllers/flexberry-ember-demo-application-user-l', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'flexberry-ember-demo-application-user-e'
     */
    editFormRoute: 'flexberry-ember-demo-application-user-e'
  });
});
define('ember-app/controllers/flexberry-ember-demo-localization-e', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    parentRoute: 'flexberry-ember-demo-localization-l'
  });
});
define('ember-app/controllers/flexberry-ember-demo-localization-e/new', ['exports', 'ember-app/controllers/flexberry-ember-demo-localization-e'], function (exports, _emberAppControllersFlexberryEmberDemoLocalizationE) {

  var FlexberryEmberDemoLocalizationENewController = _emberAppControllersFlexberryEmberDemoLocalizationE['default'];
  exports['default'] = FlexberryEmberDemoLocalizationENewController;
});
define('ember-app/controllers/flexberry-ember-demo-localization-l', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'flexberry-ember-demo-localization-e'
     */
    editFormRoute: 'flexberry-ember-demo-localization-e'
  });
});
define('ember-app/controllers/flexberry-ember-demo-suggestion-e', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    parentRoute: 'flexberry-ember-demo-suggestion-l',

    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);
      if (attr.kind === 'belongsTo') {
        switch (model.modelName + '+' + bindingPath) {
          case 'flexberry-ember-demo-comment+author':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              chooseText: '...',
              remove: 'removeLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'author',
              projection: 'ApplicationUserL',
              autocomplete: true
            };
            break;

          case 'flexberry-ember-demo-vote+applicationUser':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              chooseText: '...',
              remove: 'removeLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'applicationUser',
              projection: 'ApplicationUserL',
              autocomplete: true
            };
            break;

        }
      }

      return cellComponent;
    }
  });
});
define('ember-app/controllers/flexberry-ember-demo-suggestion-e/new', ['exports', 'ember-app/controllers/flexberry-ember-demo-suggestion-e'], function (exports, _emberAppControllersFlexberryEmberDemoSuggestionE) {

  var FlexberryEmberDemoSuggestionENewController = _emberAppControllersFlexberryEmberDemoSuggestionE['default'];
  exports['default'] = FlexberryEmberDemoSuggestionENewController.extend({
    queryParams: ['geojson'],
    geojson: null
  });
});
define('ember-app/controllers/flexberry-ember-demo-suggestion-l', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'flexberry-ember-demo-suggestion-e'
     */
    editFormRoute: 'flexberry-ember-demo-suggestion-e'
  });
});
define('ember-app/controllers/flexberry-ember-demo-suggestion-type-e', ['exports', 'ember-flexberry/controllers/edit-form'], function (exports, _emberFlexberryControllersEditForm) {
  exports['default'] = _emberFlexberryControllersEditForm['default'].extend({
    parentRoute: 'flexberry-ember-demo-suggestion-type-l',

    getCellComponent: function getCellComponent(attr, bindingPath, model) {
      var cellComponent = this._super.apply(this, arguments);
      if (attr.kind === 'belongsTo') {
        switch (model.modelName + '+' + bindingPath) {
          case 'flexberry-ember-demo-localized-suggestion-type+localization':
            cellComponent.componentProperties = {
              choose: 'showLookupDialog',
              chooseText: '...',
              remove: 'removeLookupValue',
              displayAttributeName: 'name',
              required: true,
              relationName: 'localization',
              projection: 'LocalizationL',
              autocomplete: true
            };
            break;

        }
      }

      return cellComponent;
    }
  });
});
define('ember-app/controllers/flexberry-ember-demo-suggestion-type-e/new', ['exports', 'ember-app/controllers/flexberry-ember-demo-suggestion-type-e'], function (exports, _emberAppControllersFlexberryEmberDemoSuggestionTypeE) {

  var FlexberryEmberDemoSuggestionTypeENewController = _emberAppControllersFlexberryEmberDemoSuggestionTypeE['default'];
  exports['default'] = FlexberryEmberDemoSuggestionTypeENewController;
});
define('ember-app/controllers/flexberry-ember-demo-suggestion-type-l', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  exports['default'] = _emberFlexberryControllersListForm['default'].extend({
    /**
      Name of related edit form route.
       @property editFormRoute
      @type String
      @default 'flexberry-ember-demo-suggestion-type-e'
     */
    editFormRoute: 'flexberry-ember-demo-suggestion-type-e'
  });
});
define('ember-app/controllers/flexberry-file-view-dialog', ['exports', 'ember-flexberry/controllers/flexberry-file-view-dialog'], function (exports, _emberFlexberryControllersFlexberryFileViewDialog) {
  exports['default'] = _emberFlexberryControllersFlexberryFileViewDialog['default'];
});
define('ember-app/controllers/i-i-s-caseberry-logging-objects-application-log-e', ['exports', 'ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-e'], function (exports, _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogE['default'];
    }
  });
});
define('ember-app/controllers/i-i-s-caseberry-logging-objects-application-log-l', ['exports', 'ember-flexberry/controllers/i-i-s-caseberry-logging-objects-application-log-l'], function (exports, _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogL) {
  /**
   * @module ember-flexberry
   */
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersIISCaseberryLoggingObjectsApplicationLogL['default'];
    }
  });
});
define('ember-app/controllers/list-form', ['exports', 'ember-flexberry/controllers/list-form'], function (exports, _emberFlexberryControllersListForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersListForm['default'];
    }
  });
});
define('ember-app/controllers/lookup-dialog', ['exports', 'ember-flexberry/controllers/lookup-dialog'], function (exports, _emberFlexberryControllersLookupDialog) {
  exports['default'] = _emberFlexberryControllersLookupDialog['default'];
});
define('ember-app/controllers/map', ['exports', 'ember', 'ember-flexberry-gis/controllers/edit-map'], function (exports, _ember, _emberFlexberryGisControllersEditMap) {

  /**
    Map controller.
  
    @class MapController
    @extends EditMapController
    @uses EditFormControllerOperationsIndicationMixin
  */
  exports['default'] = _emberFlexberryGisControllersEditMap['default'].extend({
    /**
      Parameter contains current map identification layer option (all, visible, top etc.)
      @property identifyLayersOption
      @type String
      @default ''
     */
    identifyLayersOption: '',

    /**
      Parameter contains current map identification tool option (arrow, square, polygon etc.)
      @property identifyToolOption
      @type String
      @default ''
     */
    identifyToolOption: '',

    /**
      Parameter contains default map identification layer option (all, visible, top etc.)
      @property _defaultIdentifyLayersOption
      @type String
      @default 'visible'
     */
    _defaultIdentifyLayersOption: 'visible',

    /**
      Parameter contains default map identification tool option (arrow, square, polygon etc.)
      @property _defaultIdentifyToolOption
      @type String
      @default 'rectangle'
     */
    _defaultIdentifyToolOption: 'rectangle',

    serviceLayer: null,

    /**
      Parent route.
       @property parentRoute
      @type String
      @default 'maps'
    */
    parentRoute: 'maps',

    sidebar: _ember['default'].A([{
      selector: 'treeview',
      captionPath: 'forms.map.treeviewbuttontooltip',
      iconClass: 'list icon'
    }, {
      selector: 'search',
      captionPath: 'forms.map.searchbuttontooltip',
      iconClass: 'search icon'
    }, {
      selector: 'identify',
      captionPath: 'forms.map.identifybuttontooltip',
      iconClass: 'info icon',
      'class': 'identify'
    }, {
      selector: 'bookmarks',
      captionPath: 'forms.map.bookmarksbuttontooltip',
      iconClass: 'bookmark icon'
    }]),

    /**
     * items
     */
    sidebarItems: _ember['default'].computed('sidebar.[]', 'sidebar.@each.active', 'i18n.locale', function () {
      var i18n = this.get('i18n');
      var sidebar = this.get('sidebar');

      var result = _ember['default'].A(sidebar);
      result.forEach(function (item) {
        var caption = _ember['default'].get(item, 'caption');
        var captionPath = _ember['default'].get(item, 'captionPath');

        if (!caption && captionPath) {
          _ember['default'].set(item, 'caption', i18n.t(captionPath));
        }
      });

      return result;
    }),

    availableCRS: _ember['default'].computed('i18n.locale', function () {
      var availableModes = _ember['default'].A();
      var i18n = this.get('i18n');
      availableModes.push({
        crs: this.get('model.crs'),
        name: i18n.t('forms.crs.current.name').toString(),
        xCaption: i18n.t('forms.crs.current.xCaption').toString(),
        yCaption: i18n.t('forms.crs.current.yCaption').toString(),
        latlng: false
      });
      availableModes.push({
        crs: L.CRS.EPSG4326,
        name: i18n.t('forms.crs.latlng.name').toString(),
        xCaption: i18n.t('forms.crs.latlng.xCaption').toString(),
        yCaption: i18n.t('forms.crs.latlng.yCaption').toString(),
        isLatlng: true
      });

      return availableModes;
    }),

    actions: {
      toggleSidebar: function toggleSidebar(sidebar, context, e) {
        if (!e.changed) {
          _ember['default'].$(sidebar).sidebar({
            context: _ember['default'].$(context),
            dimPage: false,
            closable: false
          }).sidebar('setting', 'transition', 'overlay').sidebar('toggle');

          if (e.tabName === 'identify') {
            if (_ember['default'].isBlank(this.get('identifyLayersOption'))) {
              this.set('identifyLayersOption', this.get('_defaultIdentifyLayersOption'));
            }

            if (_ember['default'].isBlank(this.get('identifyToolOption'))) {
              this.set('identifyToolOption', this.get('_defaultIdentifyToolOption'));
            }
          }
        }
      },

      querySearch: function querySearch(queryString) {
        var leafletMap = this.get('leafletMap');
        var e = {
          latlng: leafletMap.getCenter(),
          searchOptions: {
            queryString: queryString,
            maxResultsCount: 10
          },
          filter: function filter(layerModel) {
            return layerModel.get('canBeSearched') && layerModel.get('visibility');
          },
          results: _ember['default'].A()
        };

        leafletMap.fire('flexberry-map:search', e);

        this.set('searchResults', e.results);
      },

      clearSearch: function clearSearch() {
        this.set('searchResults', null);
      },

      clearIdentification: function clearIdentification() {
        this.set('identifyResults', null);
      },

      /**
          Handles 'flexberry-maptoolbar:identificationFinished' event of leaflet map.
           @method identificationFinished
          @param {Object} e Event object.
          @param {Object} results Hash containing search results.
          @param {Object[]} results.features Array containing (GeoJSON feature-objects)[http://geojson.org/geojson-spec.html#feature-objects]
          or a promise returning such array.
      */
      onIdentificationFinished: function onIdentificationFinished(e) {
        var serviceLayer = this.get('serviceLayer');
        if (!serviceLayer) {
          var leafletMap = this.get('leafletMap');
          this.set('serviceLayer', L.featureGroup().addTo(leafletMap));
        } else {
          serviceLayer.clearLayers();
        }

        this.set('identifyResults', e.results);

        // below is kind of madness, but if you want sidebar to move on identification finish - do that
        if (this.get('sidebar.2.active') !== true) {
          this.set('sidebar.2.active', true);
        }

        if (!_ember['default'].$('.right.sidebar').hasClass('visible')) {
          this.send('toggleSidebar', '.right.sidebar', '.mappanel', {
            changed: false
          });
        }
      }
    }
  });
});
/**
  @module ember-flexberry-demo
*/
define('ember-app/controllers/new-platform-flexberry-services-lock-list', ['exports', 'ember-flexberry/controllers/new-platform-flexberry-services-lock-list'], function (exports, _emberFlexberryControllersNewPlatformFlexberryServicesLockList) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryControllersNewPlatformFlexberryServicesLockList['default'];
    }
  });
});
define('ember-app/controllers/sitemap-node', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    actions: {
      hideSidebar: function hideSidebar() {
        _ember['default'].$('.ui.sidebar.main.menu').sidebar('hide');
      },

      /**
        Expand menu items by click.
         @method actions.subMenuEl
      */
      subMenuEl: function subMenuEl(event) {
        var $this = _ember['default'].$(event.currentTarget).parent().find('.subMenu:first');
        if ($this.hasClass('hidden-menu')) {
          $this.removeClass('hidden-menu');
          _ember['default'].$(event.target).parent().find('.item-minus:first').removeClass('hidden-menu');
          _ember['default'].$(event.target).parent().find('.item-plus:first').addClass('hidden-menu');
        } else {
          $this.addClass('hidden-menu');
          _ember['default'].$(event.target).parent().find('.item-minus:first').addClass('hidden-menu');
          _ember['default'].$(event.target).parent().find('.item-plus:first').removeClass('hidden-menu');
        }
      }
    }
  });
});
define('ember-app/coordinate-reference-systems/earth', ['exports', 'ember-flexberry-gis/coordinate-reference-systems/earth'], function (exports, _emberFlexberryGisCoordinateReferenceSystemsEarth) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisCoordinateReferenceSystemsEarth['default'];
    }
  });
});
define('ember-app/coordinate-reference-systems/epsg-3395', ['exports', 'ember-flexberry-gis/coordinate-reference-systems/epsg-3395'], function (exports, _emberFlexberryGisCoordinateReferenceSystemsEpsg3395) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisCoordinateReferenceSystemsEpsg3395['default'];
    }
  });
});
define('ember-app/coordinate-reference-systems/epsg-3857', ['exports', 'ember-flexberry-gis/coordinate-reference-systems/epsg-3857'], function (exports, _emberFlexberryGisCoordinateReferenceSystemsEpsg3857) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisCoordinateReferenceSystemsEpsg3857['default'];
    }
  });
});
define('ember-app/coordinate-reference-systems/epsg-4326', ['exports', 'ember-flexberry-gis/coordinate-reference-systems/epsg-4326'], function (exports, _emberFlexberryGisCoordinateReferenceSystemsEpsg4326) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisCoordinateReferenceSystemsEpsg4326['default'];
    }
  });
});
define('ember-app/coordinate-reference-systems/proj4', ['exports', 'ember-flexberry-gis/coordinate-reference-systems/proj4'], function (exports, _emberFlexberryGisCoordinateReferenceSystemsProj4) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisCoordinateReferenceSystemsProj4['default'];
    }
  });
});
define('ember-app/coordinate-reference-systems/simple', ['exports', 'ember-flexberry-gis/coordinate-reference-systems/simple'], function (exports, _emberFlexberryGisCoordinateReferenceSystemsSimple) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisCoordinateReferenceSystemsSimple['default'];
    }
  });
});
define('ember-app/enums/flexberry-ember-demo-gender', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Male: 'Мужчина',
    Female: 'Женщина',
    Unknown: 'Неизвестно'
  });
});
define('ember-app/enums/flexberry-ember-demo-vote-type', ['exports', 'ember-flexberry-data/utils/enum-functions'], function (exports, _emberFlexberryDataUtilsEnumFunctions) {
  exports['default'] = (0, _emberFlexberryDataUtilsEnumFunctions.createEnum)({
    Like: 'Лайк',
    Dislike: 'Дизлайк'
  });
});
define('ember-app/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant', ['exports', 'ember-flexberry-data/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant'], function (exports, _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant['default'];
    }
  });
});
define('ember-app/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation', ['exports', 'ember-flexberry-data/enums/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation'], function (exports, _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataEnumsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation['default'];
    }
  });
});
define('ember-app/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, _ember, _emberTruthHelpersHelpersAnd) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersAnd.andHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersAnd.andHelper);
  }

  exports['default'] = forExport;
});
define('ember-app/helpers/array-contains', ['exports', 'ember-flexberry-gis/helpers/array-contains'], function (exports, _emberFlexberryGisHelpersArrayContains) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisHelpersArrayContains['default'];
    }
  });
});
define('ember-app/helpers/array', ['exports', 'ember-flexberry-gis/helpers/array'], function (exports, _emberFlexberryGisHelpersArray) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisHelpersArray['default'];
    }
  });
});
define('ember-app/helpers/block-params', ['exports', 'ember-block-slots/helpers/block-params'], function (exports, _emberBlockSlotsHelpersBlockParams) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBlockSlotsHelpersBlockParams['default'];
    }
  });
  Object.defineProperty(exports, 'blockParams', {
    enumerable: true,
    get: function get() {
      return _emberBlockSlotsHelpersBlockParams.blockParams;
    }
  });
});
define('ember-app/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, _ember, _emberTruthHelpersHelpersEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersEqual.equalHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersEqual.equalHelper);
  }

  exports['default'] = forExport;
});
define('ember-app/helpers/flexberry-enum', ['exports', 'ember-flexberry/helpers/flexberry-enum'], function (exports, _emberFlexberryHelpersFlexberryEnum) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersFlexberryEnum['default'];
    }
  });
});
define('ember-app/helpers/flexberry-search-properties-osm-ru', ['exports', 'ember-flexberry-gis/helpers/flexberry-search-properties-osm-ru'], function (exports, _emberFlexberryGisHelpersFlexberrySearchPropertiesOsmRu) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisHelpersFlexberrySearchPropertiesOsmRu['default'];
    }
  });
  Object.defineProperty(exports, 'flexberrySearchPropertiesOsmRu', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisHelpersFlexberrySearchPropertiesOsmRu.flexberrySearchPropertiesOsmRu;
    }
  });
});
define('ember-app/helpers/get-formatted', ['exports', 'ember'], function (exports, _ember) {

  /**
    Helper for get formatted value.
  
    @class EnumCaptionHelper
    @extends <a href="http://emberjs.com/api/classes/Ember.Helper.html">Ember.Helper</a>
    @public
  */
  exports['default'] = _ember['default'].Helper.extend({
    compute: function compute(args, hash) {
      var argFirst = args[0];
      var argSecond = args[1];

      var value = _ember['default'].get(argFirst, argSecond);
      var valueType = _ember['default'].typeOf(value);

      switch (valueType) {
        case 'date':

          // Convert date to string.
          // Locale is current 'locale' from i18n, format is current 'moment.defaultFormat' from config/environment).
          var moment = _ember['default'].get(hash, 'moment');
          var momentValue = moment.moment(value);
          var dateFormat = _ember['default'].get(hash, 'dateFormat');
          return dateFormat ? momentValue.format(dateFormat) : momentValue.format();
        case 'boolean':
          return value ? this.get('i18n').t('components.object-list-view-cell.boolean-true-caption') : this.get('i18n').t('components.object-list-view-cell.boolean-false-caption');
        default:
          return value;
      }
    }
  });
});
/**
  @module ember-flexberry
*/
define('ember-app/helpers/get-with-dynamic-actions', ['exports', 'ember-flexberry-gis/helpers/get-with-dynamic-actions'], function (exports, _emberFlexberryGisHelpersGetWithDynamicActions) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisHelpersGetWithDynamicActions['default'];
    }
  });
});
define('ember-app/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, _ember, _emberTruthHelpersHelpersGt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGt.gtHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGt.gtHelper);
  }

  exports['default'] = forExport;
});
define('ember-app/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, _ember, _emberTruthHelpersHelpersGte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGte.gteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGte.gteHelper);
  }

  exports['default'] = forExport;
});
define('ember-app/helpers/instance-of', ['exports', 'ember-flexberry-gis/helpers/instance-of'], function (exports, _emberFlexberryGisHelpersInstanceOf) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisHelpersInstanceOf['default'];
    }
  });
  Object.defineProperty(exports, 'instanceOf', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisHelpersInstanceOf.instanceOf;
    }
  });
});
define('ember-app/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, _ember, _emberTruthHelpersHelpersIsArray) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  }

  exports['default'] = forExport;
});
define('ember-app/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, _ember, _emberTruthHelpersHelpersLt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLt.ltHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLt.ltHelper);
  }

  exports['default'] = forExport;
});
define('ember-app/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersHelpersLte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLte.lteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = forExport;
});
define('ember-app/helpers/moment-calendar', ['exports', 'ember-moment/helpers/moment-calendar'], function (exports, _emberMomentHelpersMomentCalendar) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentCalendar['default'];
    }
  });
  Object.defineProperty(exports, 'momentCalendar', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentCalendar.momentCalendar;
    }
  });
});
define('ember-app/helpers/moment-duration', ['exports', 'ember-moment/helpers/moment-duration'], function (exports, _emberMomentHelpersMomentDuration) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberMomentHelpersMomentDuration['default'];
    }
  });
});
define('ember-app/helpers/moment-format', ['exports', 'ember', 'ember-app/config/environment', 'ember-moment/helpers/moment-format'], function (exports, _ember, _emberAppConfigEnvironment, _emberMomentHelpersMomentFormat) {
  exports['default'] = _emberMomentHelpersMomentFormat['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_emberAppConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('ember-app/helpers/moment-from-now', ['exports', 'ember', 'ember-app/config/environment', 'ember-moment/helpers/moment-from-now'], function (exports, _ember, _emberAppConfigEnvironment, _emberMomentHelpersMomentFromNow) {
  exports['default'] = _emberMomentHelpersMomentFromNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_emberAppConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('ember-app/helpers/moment-to-now', ['exports', 'ember', 'ember-app/config/environment', 'ember-moment/helpers/moment-to-now'], function (exports, _ember, _emberAppConfigEnvironment, _emberMomentHelpersMomentToNow) {
  exports['default'] = _emberMomentHelpersMomentToNow['default'].extend({
    globalAllowEmpty: !!_ember['default'].get(_emberAppConfigEnvironment['default'], 'moment.allowEmpty')
  });
});
define('ember-app/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, _ember, _emberTruthHelpersHelpersNotEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  }

  exports['default'] = forExport;
});
define('ember-app/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, _ember, _emberTruthHelpersHelpersNot) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNot.notHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNot.notHelper);
  }

  exports['default'] = forExport;
});
define('ember-app/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, _ember, _emberTruthHelpersHelpersOr) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersOr.orHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersOr.orHelper);
  }

  exports['default'] = forExport;
});
define('ember-app/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('ember-app/helpers/readonly-cell', ['exports', 'ember-flexberry/helpers/readonly-cell'], function (exports, _emberFlexberryHelpersReadonlyCell) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersReadonlyCell['default'];
    }
  });
  Object.defineProperty(exports, 'readonlyCell', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryHelpersReadonlyCell.readonlyCell;
    }
  });
});
define('ember-app/helpers/regex-test', ['exports', 'ember-flexberry-gis/helpers/regex-test'], function (exports, _emberFlexberryGisHelpersRegexTest) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisHelpersRegexTest['default'];
    }
  });
});
define('ember-app/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('ember-app/helpers/t', ['exports', 'ember-i18n/helper'], function (exports, _emberI18nHelper) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nHelper['default'];
    }
  });
});
define('ember-app/helpers/xor', ['exports', 'ember', 'ember-truth-helpers/helpers/xor'], function (exports, _ember, _emberTruthHelpersHelpersXor) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersXor.xorHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersXor.xorHelper);
  }

  exports['default'] = forExport;
});
define('ember-app/initializers/allow-link-action', ['exports', 'ember-link-action/initializers/allow-link-action'], function (exports, _emberLinkActionInitializersAllowLinkAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLinkActionInitializersAllowLinkAction['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberLinkActionInitializersAllowLinkAction.initialize;
    }
  });
});
define('ember-app/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'ember-app/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _emberAppConfigEnvironment) {
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_emberAppConfigEnvironment['default'].APP.name, _emberAppConfigEnvironment['default'].APP.version)
  };
});
define('ember-app/initializers/component-prop-types', ['exports', 'ember-prop-types/initializers/component-prop-types'], function (exports, _emberPropTypesInitializersComponentPropTypes) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPropTypesInitializersComponentPropTypes['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberPropTypesInitializersComponentPropTypes.initialize;
    }
  });
});
define('ember-app/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('ember-app/initializers/coordinate-reference-systems', ['exports', 'ember-flexberry-gis/initializers/coordinate-reference-systems'], function (exports, _emberFlexberryGisInitializersCoordinateReferenceSystems) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInitializersCoordinateReferenceSystems['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInitializersCoordinateReferenceSystems.initialize;
    }
  });
});
define('ember-app/initializers/data-adapter', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `data-adapter` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'data-adapter',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('ember-app/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data/index'], function (exports, _emberDataSetupContainer, _emberDataIndex) {

  /*
  
    This code initializes Ember-Data onto an Ember application.
  
    If an Ember.js developer defines a subclass of DS.Store on their application,
    as `App.StoreService` (or via a module system that resolves to `service:store`)
    this code will automatically instantiate it and make it available on the
    router.
  
    Additionally, after an application's controllers have been injected, they will
    each have the store made available to them.
  
    For example, imagine an Ember.js application with the following classes:
  
    App.StoreService = DS.Store.extend({
      adapter: 'custom'
    });
  
    App.PostsController = Ember.Controller.extend({
      // ...
    });
  
    When the application is initialized, `App.ApplicationStore` will automatically be
    instantiated, and the instance of `App.PostsController` will have its `store`
    property set to that instance.
  
    Note that this code will only be run if the `ember-application` package is
    loaded. If Ember Data is being used in an environment other than a
    typical application (e.g., node.js where only `ember-runtime` is available),
    this code will be ignored.
  */

  exports['default'] = {
    name: 'ember-data',
    initialize: _emberDataSetupContainer['default']
  };
});
define("ember-app/initializers/ember-i18n", ["exports", "ember-app/instance-initializers/ember-i18n"], function (exports, _emberAppInstanceInitializersEmberI18n) {
  exports["default"] = {
    name: _emberAppInstanceInitializersEmberI18n["default"].name,

    initialize: function initialize() {
      var application = arguments[1] || arguments[0]; // depending on Ember version
      if (application.instanceInitializer) {
        return;
      }

      _emberAppInstanceInitializersEmberI18n["default"].initialize(application);
    }
  };
});
define('ember-app/initializers/ember-run-after', ['exports', 'ember-flexberry/initializers/ember-run-after'], function (exports, _emberFlexberryInitializersEmberRunAfter) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersEmberRunAfter['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersEmberRunAfter.initialize;
    }
  });
});
define('ember-app/initializers/export-application-global', ['exports', 'ember', 'ember-app/config/environment'], function (exports, _ember, _emberAppConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_emberAppConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var theGlobal;
      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _emberAppConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_emberAppConfigEnvironment['default'].modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('ember-app/initializers/flexberry-enum', ['exports', 'ember-flexberry-data/initializers/flexberry-enum'], function (exports, _emberFlexberryDataInitializersFlexberryEnum) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersFlexberryEnum['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersFlexberryEnum.initialize;
    }
  });
});
define('ember-app/initializers/i18n', ['exports', 'ember-flexberry/initializers/i18n'], function (exports, _emberFlexberryInitializersI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersI18n['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersI18n.initialize;
    }
  });
});
define('ember-app/initializers/injectStore', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `injectStore` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'injectStore',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('ember-app/initializers/leaflet-editable-measures', ['exports', 'ember-app/config/environment', 'ember-flexberry-gis/initializers/leaflet-editable-measures'], function (exports, _emberAppConfigEnvironment, _emberFlexberryGisInitializersLeafletEditableMeasures) {

  // Override initializer to pass into it baseUrl from config/environment.js.
  var originalInitialize = _emberFlexberryGisInitializersLeafletEditableMeasures['default'].initialize;
  _emberFlexberryGisInitializersLeafletEditableMeasures['default'].initialize = function (application) {
    originalInitialize.call(this, application, Ember.get(_emberAppConfigEnvironment['default'], 'baseURL'));
  };

  exports['default'] = _emberFlexberryGisInitializersLeafletEditableMeasures['default'];
});
define('ember-app/initializers/leaflet', ['exports', 'ember-app/config/environment', 'ember-flexberry-gis/initializers/leaflet'], function (exports, _emberAppConfigEnvironment, _emberFlexberryGisInitializersLeaflet) {

  // Override initializer to pass into it baseUrl from config/environment.js.
  var originalInitialize = _emberFlexberryGisInitializersLeaflet['default'].initialize;
  _emberFlexberryGisInitializersLeaflet['default'].initialize = function (application) {
    originalInitialize.call(this, application, Ember.get(_emberAppConfigEnvironment['default'], 'baseURL'));
  };

  exports['default'] = _emberFlexberryGisInitializersLeaflet['default'];
});
define('ember-app/initializers/local-store', ['exports', 'ember-flexberry-data/initializers/local-store'], function (exports, _emberFlexberryDataInitializersLocalStore) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersLocalStore['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersLocalStore.initialize;
    }
  });
});
define('ember-app/initializers/log', ['exports', 'ember-flexberry/initializers/log'], function (exports, _emberFlexberryInitializersLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersLog['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersLog.initialize;
    }
  });
});
define('ember-app/initializers/map-commands', ['exports', 'ember-flexberry-gis/initializers/map-commands'], function (exports, _emberFlexberryGisInitializersMapCommands) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInitializersMapCommands['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInitializersMapCommands.initialize;
    }
  });
});
define('ember-app/initializers/map-tools', ['exports', 'ember-flexberry-gis/initializers/map-tools'], function (exports, _emberFlexberryGisInitializersMapTools) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInitializersMapTools['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInitializersMapTools.initialize;
    }
  });
});
define('ember-app/initializers/moment', ['exports', 'ember-flexberry/initializers/moment'], function (exports, _emberFlexberryInitializersMoment) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersMoment['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersMoment.initialize;
    }
  });
});
define('ember-app/initializers/offline-globals', ['exports', 'ember-flexberry-data/initializers/offline-globals'], function (exports, _emberFlexberryDataInitializersOfflineGlobals) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersOfflineGlobals['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInitializersOfflineGlobals.initialize;
    }
  });
});
define('ember-app/initializers/perf', ['exports', 'ember-flexberry/initializers/perf'], function (exports, _emberFlexberryInitializersPerf) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersPerf['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersPerf.initialize;
    }
  });
});
define('ember-app/initializers/render-perf-logger', ['exports', 'ember-flexberry/initializers/render-perf-logger'], function (exports, _emberFlexberryInitializersRenderPerfLogger) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersRenderPerfLogger['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersRenderPerfLogger.initialize;
    }
  });
});
define('ember-app/initializers/spatial-bookmark-storage', ['exports', 'ember-flexberry-gis/initializers/spatial-bookmark-storage'], function (exports, _emberFlexberryGisInitializersSpatialBookmarkStorage) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInitializersSpatialBookmarkStorage['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInitializersSpatialBookmarkStorage.initialize;
    }
  });
});
define('ember-app/initializers/store', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `store` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'store',
    after: 'ember-data',
    initialize: function initialize() {}
  };
});
define('ember-app/initializers/transforms', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `transforms` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'transforms',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('ember-app/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersUtilsRegisterHelper, _emberTruthHelpersHelpersAnd, _emberTruthHelpersHelpersOr, _emberTruthHelpersHelpersEqual, _emberTruthHelpersHelpersNot, _emberTruthHelpersHelpersIsArray, _emberTruthHelpersHelpersNotEqual, _emberTruthHelpersHelpersGt, _emberTruthHelpersHelpersGte, _emberTruthHelpersHelpersLt, _emberTruthHelpersHelpersLte) {
  exports.initialize = initialize;

  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember['default'].Helper) {
      return;
    }

    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('and', _emberTruthHelpersHelpersAnd.andHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('or', _emberTruthHelpersHelpersOr.orHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('eq', _emberTruthHelpersHelpersEqual.equalHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not', _emberTruthHelpersHelpersNot.notHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('is-array', _emberTruthHelpersHelpersIsArray.isArrayHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not-eq', _emberTruthHelpersHelpersNotEqual.notEqualHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gt', _emberTruthHelpersHelpersGt.gtHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gte', _emberTruthHelpersHelpersGte.gteHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lt', _emberTruthHelpersHelpersLt.ltHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lte', _emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };
});
define('ember-app/initializers/user-settings', ['exports', 'ember-flexberry/initializers/user-settings'], function (exports, _emberFlexberryInitializersUserSettings) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersUserSettings['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInitializersUserSettings.initialize;
    }
  });
});
define('ember-app/instance-initializers/block-slots', ['exports', 'ember-flexberry-gis/instance-initializers/block-slots'], function (exports, _emberFlexberryGisInstanceInitializersBlockSlots) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInstanceInitializersBlockSlots['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInstanceInitializersBlockSlots.initialize;
    }
  });
});
define('ember-app/instance-initializers/device', ['exports', 'ember-flexberry/instance-initializers/device'], function (exports, _emberFlexberryInstanceInitializersDevice) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersDevice['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersDevice.initialize;
    }
  });
});
define("ember-app/instance-initializers/ember-data", ["exports", "ember-data/-private/instance-initializers/initialize-store-service"], function (exports, _emberDataPrivateInstanceInitializersInitializeStoreService) {
  exports["default"] = {
    name: "ember-data",
    initialize: _emberDataPrivateInstanceInitializersInitializeStoreService["default"]
  };
});
define("ember-app/instance-initializers/ember-i18n", ["exports", "ember", "ember-i18n/stream", "ember-i18n/legacy-helper", "ember-app/config/environment"], function (exports, _ember, _emberI18nStream, _emberI18nLegacyHelper, _emberAppConfigEnvironment) {
  exports["default"] = {
    name: 'ember-i18n',

    initialize: function initialize(appOrAppInstance) {
      if (_emberI18nLegacyHelper["default"] != null) {
        (function () {
          // Used for Ember < 1.13
          var i18n = appOrAppInstance.container.lookup('service:i18n');

          i18n.localeStream = new _emberI18nStream["default"](function () {
            return i18n.get('locale');
          });

          _ember["default"].addObserver(i18n, 'locale', i18n, function () {
            this.localeStream.value(); // force the stream to be dirty
            this.localeStream.notify();
          });

          _ember["default"].HTMLBars._registerHelper('t', _emberI18nLegacyHelper["default"]);
        })();
      }
    }
  };
});
define('ember-app/instance-initializers/flexberry-search', ['exports', 'ember-flexberry-gis/instance-initializers/flexberry-search'], function (exports, _emberFlexberryGisInstanceInitializersFlexberrySearch) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInstanceInitializersFlexberrySearch['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInstanceInitializersFlexberrySearch.initialize;
    }
  });
});
define('ember-app/instance-initializers/i18n', ['exports', 'ember-flexberry/instance-initializers/moment'], function (exports, _emberFlexberryInstanceInitializersMoment) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersMoment['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersMoment.initialize;
    }
  });
});
define('ember-app/instance-initializers/layers', ['exports', 'ember-flexberry-gis/instance-initializers/layers'], function (exports, _emberFlexberryGisInstanceInitializersLayers) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInstanceInitializersLayers['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInstanceInitializersLayers.initialize;
    }
  });
});
define('ember-app/instance-initializers/leaflet-editable-measures', ['exports', 'ember-flexberry-gis/instance-initializers/leaflet-editable-measures'], function (exports, _emberFlexberryGisInstanceInitializersLeafletEditableMeasures) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInstanceInitializersLeafletEditableMeasures['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInstanceInitializersLeafletEditableMeasures.initialize;
    }
  });
});
define('ember-app/instance-initializers/lock', ['exports', 'ember-flexberry/instance-initializers/lock'], function (exports, _emberFlexberryInstanceInitializersLock) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLock['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLock.initialize;
    }
  });
});
define('ember-app/instance-initializers/log', ['exports', 'ember-flexberry/instance-initializers/log'], function (exports, _emberFlexberryInstanceInitializersLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLog['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersLog.initialize;
    }
  });
});
define('ember-app/instance-initializers/moment', ['exports', 'ember-flexberry/instance-initializers/i18n'], function (exports, _emberFlexberryInstanceInitializersI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersI18n['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersI18n.initialize;
    }
  });
});
define('ember-app/instance-initializers/owner', ['exports', 'ember-flexberry-gis/instance-initializers/owner'], function (exports, _emberFlexberryGisInstanceInitializersOwner) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInstanceInitializersOwner['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisInstanceInitializersOwner.initialize;
    }
  });
});
define('ember-app/instance-initializers/perf', ['exports', 'ember-flexberry/instance-initializers/perf'], function (exports, _emberFlexberryInstanceInitializersPerf) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersPerf['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryInstanceInitializersPerf.initialize;
    }
  });
});
define('ember-app/instance-initializers/set-singletons', ['exports', 'ember-flexberry-data/instance-initializers/set-singletons'], function (exports, _emberFlexberryDataInstanceInitializersSetSingletons) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInstanceInitializersSetSingletons['default'];
    }
  });
  Object.defineProperty(exports, 'initialize', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataInstanceInitializersSetSingletons.initialize;
    }
  });
});
define('ember-app/layers/geocoder-osm-overpass', ['exports', 'ember-flexberry-gis/layers/geocoder-osm-overpass'], function (exports, _emberFlexberryGisLayersGeocoderOsmOverpass) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisLayersGeocoderOsmOverpass['default'];
    }
  });
});
define('ember-app/layers/geocoder-osm-ru', ['exports', 'ember-flexberry-gis/layers/geocoder-osm-ru'], function (exports, _emberFlexberryGisLayersGeocoderOsmRu) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisLayersGeocoderOsmRu['default'];
    }
  });
});
define('ember-app/layers/geojson', ['exports', 'ember', 'ember-flexberry-gis/layers/-private/base'], function (exports, _ember, _emberFlexberryGisLayersPrivateBase) {

  /**
    Class describing WFS layer metadata.
  
    @class WfsLayer
    @extends BaseLayer
  */
  exports['default'] = _emberFlexberryGisLayersPrivateBase['default'].extend({
    /**
      Permitted operations related to layer type.
       @property operations
      @type String[]
      @default ['edit', 'remove', 'identify', 'search', 'legend']
    */
    operations: ['edit', 'remove', 'identify', 'search', 'legend'],

    /**
      Creates new settings object (with settings related to layer-type).
       @method createSettings
      @returns {Object} New settings object (with settings related to layer-type).
    */
    createSettings: function createSettings() {
      var settings = this._super.apply(this, arguments);
      _ember['default'].$.extend(true, settings, {
        pointToLayer: undefined,
        style: undefined,
        onEachFeature: undefined,
        filter: undefined,
        coordsToLatLng: undefined,
        geojson: undefined
      });

      return settings;
    },

    /**
      Creates new search settings object (with search settings related to layer-type).
       @method createSearchSettings
      @returns {Object} New search settings object (with search settings related to layer-type).
    */
    createSearchSettings: function createSearchSettings() {
      var settings = this._super.apply(this, arguments);
      _ember['default'].$.extend(true, settings, {
        queryString: '',
        maxResultsCount: 10
      });

      return settings;
    }
  });
});
/**
  @module ember-flexberry-gis
*/
define('ember-app/layers/group', ['exports', 'ember-flexberry-gis/layers/group'], function (exports, _emberFlexberryGisLayersGroup) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisLayersGroup['default'];
    }
  });
});
define('ember-app/layers/tile', ['exports', 'ember-flexberry-gis/layers/tile'], function (exports, _emberFlexberryGisLayersTile) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisLayersTile['default'];
    }
  });
});
define('ember-app/layers/wfs', ['exports', 'ember-flexberry-gis/layers/wfs'], function (exports, _emberFlexberryGisLayersWfs) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisLayersWfs['default'];
    }
  });
});
define('ember-app/layers/wms-single-tile', ['exports', 'ember-flexberry-gis/layers/wms-single-tile'], function (exports, _emberFlexberryGisLayersWmsSingleTile) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisLayersWmsSingleTile['default'];
    }
  });
});
define('ember-app/layers/wms-wfs', ['exports', 'ember-flexberry-gis/layers/wms-wfs'], function (exports, _emberFlexberryGisLayersWmsWfs) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisLayersWmsWfs['default'];
    }
  });
});
define('ember-app/layers/wms', ['exports', 'ember-flexberry-gis/layers/wms'], function (exports, _emberFlexberryGisLayersWms) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisLayersWms['default'];
    }
  });
});
define('ember-app/locales/en/forms/flexberry-ember-demo-application-user-e', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Application user',
    'name-caption': 'Name',
    'login-caption': 'Login',
    'eMail-caption': 'E Mail',
    'phone1-caption': 'Phone 1',
    'phone2-caption': 'Phone 2',
    'phone3-caption': 'Phone 3',
    'activated-caption': 'Activated',
    'vK-caption': 'VK',
    'facebook-caption': 'Facebook',
    'twitter-caption': 'Twitter',
    'birthday-caption': 'Birthday',
    'gender-caption': 'Gender',
    'vip-caption': 'VIP',
    'karma-caption': 'Karma'
  };
});
define('ember-app/locales/en/forms/flexberry-ember-demo-application-user-l', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Application user'
  };
});
define('ember-app/locales/en/forms/flexberry-ember-demo-localization-e', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Localization',
    'name-caption': 'Name'
  };
});
define('ember-app/locales/en/forms/flexberry-ember-demo-localization-l', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Localization'
  };
});
define('ember-app/locales/en/forms/flexberry-ember-demo-suggestion-e', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Suggestion',
    'address-caption': 'Address',
    'text-caption': 'Text',
    'polygon-caption': 'Polygon',
    'date-caption': 'Date',
    'votes-caption': 'Votes',
    'moderated-caption': 'Moderated',
    'type-caption': 'Type',
    'author-caption': 'Author',
    'comments-caption': 'Comments',
    'files-caption': 'Files',
    'userVotes-caption': 'User votes'
  };
});
define('ember-app/locales/en/forms/flexberry-ember-demo-suggestion-l', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Suggestion'
  };
});
define('ember-app/locales/en/forms/flexberry-ember-demo-suggestion-type-e', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Suggestion type',
    'name-caption': 'Name',
    'moderated-caption': 'Moderated',
    'parent-caption': 'Parent',
    'localizedTypes-caption': 'Localized types'
  };
});
define('ember-app/locales/en/forms/flexberry-ember-demo-suggestion-type-l', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Suggestion type'
  };
});
define('ember-app/locales/en/models/flexberry-ember-demo-application-user', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      ApplicationUserE: {
        name: {
          caption: 'Name'
        },
        login: {
          caption: 'Login'
        },
        eMail: {
          caption: 'E Mail'
        },
        phone1: {
          caption: 'Phone 1'
        },
        phone2: {
          caption: 'Phone 2'
        },
        phone3: {
          caption: 'Phone 3'
        },
        activated: {
          caption: 'Activated'
        },
        vK: {
          caption: 'VK'
        },
        facebook: {
          caption: 'Facebook'
        },
        twitter: {
          caption: 'Twitter'
        },
        birthday: {
          caption: 'Birthday'
        },
        gender: {
          caption: 'Gender'
        },
        vip: {
          caption: 'VIP'
        },
        karma: {
          caption: 'Karma'
        }
      },
      ApplicationUserL: {
        name: {
          caption: 'Name'
        },
        eMail: {
          caption: 'E Mail'
        },
        birthday: {
          caption: 'Birthday'
        },
        gender: {
          caption: 'Gender'
        },
        vip: {
          caption: 'VIP'
        },
        karma: {
          caption: 'Karma'
        }
      }
    }
  };
});
define('ember-app/locales/en/models/flexberry-ember-demo-comment-vote', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      CommentVoteE: {
        voteType: {
          caption: 'Vote type'
        },
        applicationUser: {
          caption: 'Application user',
          name: {
            caption: 'Name'
          }
        }
      }
    }
  };
});
define('ember-app/locales/en/models/flexberry-ember-demo-comment', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      CommentE: {
        text: {
          caption: 'Text'
        },
        votes: {
          caption: 'Votes'
        },
        moderated: {
          caption: 'Moderated'
        },
        author: {
          caption: 'Author',
          name: {
            caption: 'Name'
          }
        },
        userVotes: {
          caption: 'User votes',
          voteType: {
            caption: 'Vote type'
          },
          applicationUser: {
            caption: 'Application user',
            name: {
              caption: 'Name'
            }
          }
        }
      }
    }
  };
});
define('ember-app/locales/en/models/flexberry-ember-demo-localization', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      LocalizationE: {
        name: {
          caption: 'Name'
        }
      },
      LocalizationL: {
        name: {
          caption: 'Name'
        }
      }
    }
  };
});
define('ember-app/locales/en/models/flexberry-ember-demo-localized-suggestion-type', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      LocalizedSuggestionTypeE: {
        name: {
          caption: 'Name'
        },
        localization: {
          caption: 'Localization',
          name: {
            caption: 'Name'
          }
        }
      }
    }
  };
});
define('ember-app/locales/en/models/flexberry-ember-demo-offline-user', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      OfflineUserE: {
        login: {
          caption: 'login'
        },
        password: {
          caption: 'password'
        }
      }
    }
  };
});
define('ember-app/locales/en/models/flexberry-ember-demo-suggestion-file', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SuggestionFileE: {
        order: {
          caption: 'Order'
        },
        file: {
          caption: 'File'
        }
      }
    }
  };
});
define('ember-app/locales/en/models/flexberry-ember-demo-suggestion-type', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SuggestionTypeE: {
        name: {
          caption: 'Name'
        },
        moderated: {
          caption: 'Moderated'
        },
        parent: {
          caption: 'Parent',
          name: {
            caption: 'Name'
          }
        },
        localizedTypes: {
          caption: 'Localized types',
          name: {
            caption: 'Name'
          },
          localization: {
            caption: 'Localization',
            name: {
              caption: 'Name'
            }
          }
        }
      },
      SuggestionTypeL: {
        name: {
          caption: 'Name'
        },
        moderated: {
          caption: 'Moderated'
        },
        parent: {
          caption: 'Parent'
        }
      }
    }
  };
});
define('ember-app/locales/en/models/flexberry-ember-demo-suggestion', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SuggestionE: {
        address: {
          caption: 'Address'
        },
        text: {
          caption: 'Text'
        },
        polygon: {
          caption: 'Polygon'
        },
        date: {
          caption: 'Date'
        },
        votes: {
          caption: 'Votes'
        },
        moderated: {
          caption: 'Moderated'
        },
        type: {
          caption: 'Type',
          name: {
            caption: 'Name'
          }
        },
        author: {
          caption: 'Author',
          name: {
            caption: 'Name'
          }
        },
        comments: {
          caption: 'Comments',
          text: {
            caption: 'Text'
          },
          votes: {
            caption: 'Votes'
          },
          moderated: {
            caption: 'Moderated'
          },
          author: {
            caption: 'Author',
            name: {
              caption: 'Name'
            }
          },
          userVotes: {
            caption: 'User votes',
            voteType: {
              caption: 'Vote type'
            },
            applicationUser: {
              caption: 'Application user',
              name: {
                caption: 'Name'
              }
            }
          }
        },
        files: {
          caption: 'Files',
          order: {
            caption: 'Order'
          },
          file: {
            caption: 'File'
          }
        },
        userVotes: {
          caption: 'User votes',
          voteType: {
            caption: 'Vote type'
          },
          applicationUser: {
            caption: 'Application user',
            name: {
              caption: 'Name'
            }
          }
        }
      },
      SuggestionL: {
        address: {
          caption: 'Address'
        },
        text: {
          caption: 'Text'
        },
        date: {
          caption: 'Date'
        },
        votes: {
          caption: 'Votes'
        },
        moderated: {
          caption: 'Moderated'
        },
        type: {
          caption: 'Type',
          name: {
            caption: 'Name'
          }
        },
        author: {
          caption: 'Author',
          name: {
            caption: 'Name'
          }
        }
      }
    }
  };
});
define('ember-app/locales/en/models/flexberry-ember-demo-vote', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      VoteE: {
        voteType: {
          caption: 'Vote type'
        },
        applicationUser: {
          caption: 'Application user',
          name: {
            caption: 'Name'
          }
        }
      }
    }
  };
});
define('ember-app/locales/en/translations', ['exports', 'ember', 'ember-flexberry/locales/en/translations', 'ember-flexberry-gis/locales/en/translations', 'ember-app/locales/en/forms/flexberry-ember-demo-application-user-l', 'ember-app/locales/en/forms/flexberry-ember-demo-localization-l', 'ember-app/locales/en/forms/flexberry-ember-demo-suggestion-l', 'ember-app/locales/en/forms/flexberry-ember-demo-suggestion-type-l', 'ember-app/locales/en/forms/flexberry-ember-demo-application-user-e', 'ember-app/locales/en/forms/flexberry-ember-demo-localization-e', 'ember-app/locales/en/forms/flexberry-ember-demo-suggestion-e', 'ember-app/locales/en/forms/flexberry-ember-demo-suggestion-type-e', 'ember-app/locales/en/models/flexberry-ember-demo-application-user', 'ember-app/locales/en/models/flexberry-ember-demo-comment-vote', 'ember-app/locales/en/models/flexberry-ember-demo-comment', 'ember-app/locales/en/models/flexberry-ember-demo-localization', 'ember-app/locales/en/models/flexberry-ember-demo-localized-suggestion-type', 'ember-app/locales/en/models/flexberry-ember-demo-suggestion-file', 'ember-app/locales/en/models/flexberry-ember-demo-suggestion-type', 'ember-app/locales/en/models/flexberry-ember-demo-suggestion', 'ember-app/locales/en/models/flexberry-ember-demo-vote'], function (exports, _ember, _emberFlexberryLocalesEnTranslations, _emberFlexberryGisLocalesEnTranslations, _emberAppLocalesEnFormsFlexberryEmberDemoApplicationUserL, _emberAppLocalesEnFormsFlexberryEmberDemoLocalizationL, _emberAppLocalesEnFormsFlexberryEmberDemoSuggestionL, _emberAppLocalesEnFormsFlexberryEmberDemoSuggestionTypeL, _emberAppLocalesEnFormsFlexberryEmberDemoApplicationUserE, _emberAppLocalesEnFormsFlexberryEmberDemoLocalizationE, _emberAppLocalesEnFormsFlexberryEmberDemoSuggestionE, _emberAppLocalesEnFormsFlexberryEmberDemoSuggestionTypeE, _emberAppLocalesEnModelsFlexberryEmberDemoApplicationUser, _emberAppLocalesEnModelsFlexberryEmberDemoCommentVote, _emberAppLocalesEnModelsFlexberryEmberDemoComment, _emberAppLocalesEnModelsFlexberryEmberDemoLocalization, _emberAppLocalesEnModelsFlexberryEmberDemoLocalizedSuggestionType, _emberAppLocalesEnModelsFlexberryEmberDemoSuggestionFile, _emberAppLocalesEnModelsFlexberryEmberDemoSuggestionType, _emberAppLocalesEnModelsFlexberryEmberDemoSuggestion, _emberAppLocalesEnModelsFlexberryEmberDemoVote) {

  var translations = {};
  _ember['default'].$.extend(true, translations, _emberFlexberryLocalesEnTranslations['default']);
  _ember['default'].$.extend(true, translations, _emberFlexberryGisLocalesEnTranslations['default']);

  _ember['default'].$.extend(true, translations, {
    components: {
      'map-tools': {
        'draw-suggestion': {
          caption: 'Create suggestion'
        }
      }
    },

    models: {
      'flexberry-ember-demo-application-user': _emberAppLocalesEnModelsFlexberryEmberDemoApplicationUser['default'],
      'flexberry-ember-demo-comment-vote': _emberAppLocalesEnModelsFlexberryEmberDemoCommentVote['default'],
      'flexberry-ember-demo-comment': _emberAppLocalesEnModelsFlexberryEmberDemoComment['default'],
      'flexberry-ember-demo-localization': _emberAppLocalesEnModelsFlexberryEmberDemoLocalization['default'],
      'flexberry-ember-demo-localized-suggestion-type': _emberAppLocalesEnModelsFlexberryEmberDemoLocalizedSuggestionType['default'],
      'flexberry-ember-demo-suggestion-file': _emberAppLocalesEnModelsFlexberryEmberDemoSuggestionFile['default'],
      'flexberry-ember-demo-suggestion-type': _emberAppLocalesEnModelsFlexberryEmberDemoSuggestionType['default'],
      'flexberry-ember-demo-suggestion': _emberAppLocalesEnModelsFlexberryEmberDemoSuggestion['default'],
      'flexberry-ember-demo-vote': _emberAppLocalesEnModelsFlexberryEmberDemoVote['default']
    },

    'application-name': 'Demo application ember-flexberry',

    forms: {
      loading: {
        'spinner-caption': 'Loading stuff, please have a cold beer...'
      },
      index: {
        greeting: 'Welcome to ember-flexberry test stand!'
      },

      login: {
        caption: 'Login',
        logout: 'Logout',
        back: 'Back',
        login: 'Login',
        password: 'Password',
        'you-logged-as': 'You logged as: "{{login}}".',
        errors: {
          'empty-login': 'Login can not be empty.',
          'empty-password': 'Password can not be empty.',
          'server-error': 'Not response from server.',
          'incorrect-auth-data': 'Wrong login or password.',
          'login-please': 'Please, login.',
          'unknown-error': 'Oh, something went wrong...'
        }
      },

      map: {
        caption: 'Map',
        treeviewbuttontooltip: 'Show tree view',
        searchbuttontooltip: 'Show search',
        bookmarksbuttontooltip: 'Spatial bookmarks',
        identifybuttontooltip: 'Show identification'
      },

      crs: {
        current: {
          name: 'In map\'s coordinate system',
          xCaption: 'X',
          yCaption: 'Y'
        },
        latlng: {
          name: 'Latitude and Longitude',
          xCaption: 'Latitude',
          yCaption: 'Longitude'
        }
      },

      application: {
        header: {
          menu: {
            'show-menu': {
              caption: 'Show menu'
            },
            'hide-menu': {
              caption: 'Hide menu'
            },
            'sitemap-button': {
              caption: '',
              title: 'Menu'
            },
            'user-settings-service-checkbox': {
              caption: 'List\'s user settings'
            },
            'language-dropdown': {
              caption: 'Application language',
              placeholder: 'Choose language'
            }
          }
        },

        'sync-up': 'Sync-up',
        'sync-down': 'Sync-down',

        footer: {
          'application-name': 'Application caption',
          'application-version': {
            caption: 'Addon version {{version}}',
            title: 'It is version of ember-flexberry addon, which uses in this dummy application ' + '(npm version + commit sha). ' + 'Click to open commit on GitHub.'
          }
        },

        sitemap: {
          'application-name': {
            caption: 'Application caption',
            title: 'Application title'
          },
          'application-version': {
            caption: 'Addon version {{version}}',
            title: 'It is version of ember-flexberry addon, which uses in this dummy application ' + '(npm version + commit sha). ' + 'Click to open commit on GitHub.'
          },
          index: {
            caption: 'Home',
            title: ''
          },
          map: {
            caption: 'Map',
            title: ''
          },
          'flexberry-ember-demo': {
            caption: 'flexberry-ember-demo',
            title: 'flexberry-ember-demo',
            'flexberry-ember-demo-suggestion-type-l': {
              caption: 'flexberry-ember-demo-suggestion-type-l',
              title: 'flexberry-ember-demo-suggestion-type-l'

            },
            'flexberry-ember-demo-application-user-l': {
              caption: 'flexberry-ember-demo-application-user-l',
              title: 'flexberry-ember-demo-application-user-l'

            },
            'flexberry-ember-demo-localization-l': {
              caption: 'flexberry-ember-demo-localization-l',
              title: 'flexberry-ember-demo-localization-l'

            },
            'flexberry-ember-demo-suggestion-l': {
              caption: 'flexberry-ember-demo-suggestion-l',
              title: 'flexberry-ember-demo-suggestion-l'

            }
          }
        }
      },

      'edit-form': {
        'save-success-message-caption': 'Save operation succeed',
        'save-success-message': 'Object saved',
        'save-error-message-caption': 'Save operation failed',
        'delete-success-message-caption': 'Delete operation succeed',
        'delete-success-message': 'Object deleted',
        'delete-error-message-caption': 'Delete operation failed'
      },
      'flexberry-ember-demo-application-user-l': _emberAppLocalesEnFormsFlexberryEmberDemoApplicationUserL['default'],
      'flexberry-ember-demo-localization-l': _emberAppLocalesEnFormsFlexberryEmberDemoLocalizationL['default'],
      'flexberry-ember-demo-suggestion-l': _emberAppLocalesEnFormsFlexberryEmberDemoSuggestionL['default'],
      'flexberry-ember-demo-suggestion-type-l': _emberAppLocalesEnFormsFlexberryEmberDemoSuggestionTypeL['default'],
      'flexberry-ember-demo-application-user-e': _emberAppLocalesEnFormsFlexberryEmberDemoApplicationUserE['default'],
      'flexberry-ember-demo-localization-e': _emberAppLocalesEnFormsFlexberryEmberDemoLocalizationE['default'],
      'flexberry-ember-demo-suggestion-e': _emberAppLocalesEnFormsFlexberryEmberDemoSuggestionE['default'],
      'flexberry-ember-demo-suggestion-type-e': _emberAppLocalesEnFormsFlexberryEmberDemoSuggestionTypeE['default']
    }

  });

  exports['default'] = translations;
});
define('ember-app/locales/ru/forms/flexberry-ember-demo-application-user-e', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Пользователь приложения',
    'name-caption': 'Имя',
    'login-caption': 'Логин',
    'eMail-caption': 'E mail',
    'phone1-caption': 'Номер телефона 1',
    'phone2-caption': 'Номер телефона 2',
    'phone3-caption': 'Номер телефона 3',
    'activated-caption': 'Активен',
    'vK-caption': 'VK',
    'facebook-caption': 'Facebook',
    'twitter-caption': 'Twitter',
    'birthday-caption': 'Дата рождения',
    'gender-caption': 'Пол',
    'vip-caption': 'VIP',
    'karma-caption': 'Карма'
  };
});
define('ember-app/locales/ru/forms/flexberry-ember-demo-application-user-l', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Пользователь приложения'
  };
});
define('ember-app/locales/ru/forms/flexberry-ember-demo-localization-e', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Локализация',
    'name-caption': 'Название'
  };
});
define('ember-app/locales/ru/forms/flexberry-ember-demo-localization-l', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Локализация'
  };
});
define('ember-app/locales/ru/forms/flexberry-ember-demo-suggestion-e', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Предложение',
    'address-caption': 'Адрес',
    'text-caption': 'Текст',
    'polygon-caption': 'Полигон',
    'date-caption': 'Дата',
    'votes-caption': 'Голоса',
    'moderated-caption': 'Одобрено',
    'type-caption': 'Тип',
    'author-caption': 'Автор',
    'comments-caption': 'Комментарии',
    'files-caption': 'Файлы',
    'userVotes-caption': 'Голоса пользователей'
  };
});
define('ember-app/locales/ru/forms/flexberry-ember-demo-suggestion-l', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Предложение'
  };
});
define('ember-app/locales/ru/forms/flexberry-ember-demo-suggestion-type-e', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Тип предложения',
    'name-caption': 'Название',
    'moderated-caption': 'Одобрено',
    'parent-caption': 'Родитель',
    'localizedTypes-caption': 'Локализованные типы'
  };
});
define('ember-app/locales/ru/forms/flexberry-ember-demo-suggestion-type-l', ['exports'], function (exports) {
  exports['default'] = {
    caption: 'Тип предложения'
  };
});
define('ember-app/locales/ru/models/flexberry-ember-demo-application-user', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      ApplicationUserE: {
        name: {
          caption: 'Имя'
        },
        login: {
          caption: 'Логин'
        },
        eMail: {
          caption: 'E mail'
        },
        phone1: {
          caption: 'Номер телефона 1'
        },
        phone2: {
          caption: 'Номер телефона 2'
        },
        phone3: {
          caption: 'Номер телефона 3'
        },
        activated: {
          caption: 'Активен'
        },
        vK: {
          caption: 'VK'
        },
        facebook: {
          caption: 'Facebook'
        },
        twitter: {
          caption: 'Twitter'
        },
        birthday: {
          caption: 'Дата рождения'
        },
        gender: {
          caption: 'Пол'
        },
        vip: {
          caption: 'VIP'
        },
        karma: {
          caption: 'Карма'
        }
      },
      ApplicationUserL: {
        name: {
          caption: 'Имя'
        },
        eMail: {
          caption: 'E mail'
        },
        birthday: {
          caption: 'Дата рождения'
        },
        gender: {
          caption: 'Пол'
        },
        vip: {
          caption: 'VIP'
        },
        karma: {
          caption: 'Карма'
        },
        phone1: {
          caption: ''
        },
        vK: {
          caption: ''
        },
        facebook: {
          caption: ''
        },
        twitter: {
          caption: ''
        },
        activated: {
          caption: ''
        },
        phone2: {
          caption: ''
        },
        phone3: {
          caption: ''
        },
        login: {
          caption: ''
        }
      }
    }
  };
});
define('ember-app/locales/ru/models/flexberry-ember-demo-comment-vote', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      CommentVoteE: {
        voteType: {
          caption: 'Тип голосования'
        },
        applicationUser: {
          caption: 'Пользователь приложения',
          name: {
            caption: 'Name'
          }
        }
      }
    }
  };
});
define('ember-app/locales/ru/models/flexberry-ember-demo-comment', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      CommentE: {
        text: {
          caption: 'Текст'
        },
        votes: {
          caption: 'Голоса'
        },
        moderated: {
          caption: 'Одобрен'
        },
        author: {
          caption: 'Автор',
          name: {
            caption: 'Name'
          }
        },
        userVotes: {
          caption: 'Голоса пользователей',
          voteType: {
            caption: 'Тип голосования'
          },
          applicationUser: {
            caption: 'Пользователь приложения',
            name: {
              caption: 'Name'
            }
          }
        }
      }
    }
  };
});
define('ember-app/locales/ru/models/flexberry-ember-demo-localization', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      LocalizationE: {
        name: {
          caption: 'Название'
        }
      },
      LocalizationL: {
        name: {
          caption: 'Название'
        }
      }
    }
  };
});
define('ember-app/locales/ru/models/flexberry-ember-demo-localized-suggestion-type', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      LocalizedSuggestionTypeE: {
        name: {
          caption: 'Название'
        },
        localization: {
          caption: 'Локализация',
          name: {
            caption: 'Name'
          }
        }
      }
    }
  };
});
define('ember-app/locales/ru/models/flexberry-ember-demo-offline-user', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      OfflineUserE: {
        login: {
          caption: 'Логин'
        },
        password: {
          caption: 'Пароль'
        }
      }
    }
  };
});
define('ember-app/locales/ru/models/flexberry-ember-demo-suggestion-file', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SuggestionFileE: {
        order: {
          caption: 'Порядок'
        },
        file: {
          caption: 'Файл'
        }
      }
    }
  };
});
define('ember-app/locales/ru/models/flexberry-ember-demo-suggestion-type', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SuggestionTypeE: {
        name: {
          caption: 'Название'
        },
        moderated: {
          caption: 'Одобрено'
        },
        parent: {
          caption: 'Родитель',
          name: {
            caption: 'Name'
          }
        },
        localizedTypes: {
          caption: 'Локализованные типы',
          name: {
            caption: 'Название'
          },
          localization: {
            caption: 'Локализация',
            name: {
              caption: 'Name'
            }
          }
        }
      },
      SuggestionTypeL: {
        name: {
          caption: 'Название'
        },
        moderated: {
          caption: 'Одобрено'
        },
        parent: {
          caption: 'Name'
        }
      }
    }
  };
});
define('ember-app/locales/ru/models/flexberry-ember-demo-suggestion', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      SuggestionE: {
        address: {
          caption: 'Адрес'
        },
        text: {
          caption: 'Текст'
        },
        polygon: {
          caption: 'Полигон'
        },
        date: {
          caption: 'Дата'
        },
        votes: {
          caption: 'Голоса'
        },
        moderated: {
          caption: 'Одобрено'
        },
        type: {
          caption: 'Тип',
          name: {
            caption: 'Name'
          }
        },
        author: {
          caption: 'Автор',
          name: {
            caption: 'Name'
          }
        },
        comments: {
          caption: 'Комментарии',
          text: {
            caption: 'Текст'
          },
          votes: {
            caption: 'Голоса'
          },
          moderated: {
            caption: 'Одобрен'
          },
          author: {
            caption: 'Автор',
            name: {
              caption: 'Name'
            }
          },
          userVotes: {
            caption: 'Голоса пользователей',
            voteType: {
              caption: 'Тип голосования'
            },
            applicationUser: {
              caption: 'Пользователь приложения',
              name: {
                caption: 'Name'
              }
            }
          }
        },
        files: {
          caption: 'Файлы',
          order: {
            caption: 'Порядок'
          },
          file: {
            caption: 'Файл'
          }
        },
        userVotes: {
          caption: 'Голоса пользователей',
          voteType: {
            caption: 'Тип голосования'
          },
          applicationUser: {
            caption: 'Пользователь приложения',
            name: {
              caption: 'Name'
            }
          }
        }
      },
      SuggestionL: {
        address: {
          caption: 'Адрес'
        },
        text: {
          caption: 'Текст'
        },
        date: {
          caption: 'Дата'
        },
        votes: {
          caption: 'Голоса'
        },
        moderated: {
          caption: 'Одобрено'
        },
        type: {
          caption: 'Тип предложения',
          name: {
            caption: 'Тип предложения'
          }
        },
        author: {
          caption: 'Автор',
          name: {
            caption: 'Автор'
          }
        }
      }
    }
  };
});
define('ember-app/locales/ru/models/flexberry-ember-demo-vote', ['exports'], function (exports) {
  exports['default'] = {
    projections: {
      VoteE: {
        voteType: {
          caption: 'Тип голосования'
        },
        applicationUser: {
          caption: 'Пользователь приложения',
          name: {
            caption: 'Name'
          }
        }
      }
    }
  };
});
define('ember-app/locales/ru/translations', ['exports', 'ember', 'ember-flexberry/locales/ru/translations', 'ember-flexberry-gis/locales/ru/translations', 'ember-app/locales/ru/forms/flexberry-ember-demo-application-user-l', 'ember-app/locales/ru/forms/flexberry-ember-demo-localization-l', 'ember-app/locales/ru/forms/flexberry-ember-demo-suggestion-l', 'ember-app/locales/ru/forms/flexberry-ember-demo-suggestion-type-l', 'ember-app/locales/ru/forms/flexberry-ember-demo-application-user-e', 'ember-app/locales/ru/forms/flexberry-ember-demo-localization-e', 'ember-app/locales/ru/forms/flexberry-ember-demo-suggestion-e', 'ember-app/locales/ru/forms/flexberry-ember-demo-suggestion-type-e', 'ember-app/locales/ru/models/flexberry-ember-demo-application-user', 'ember-app/locales/ru/models/flexberry-ember-demo-comment-vote', 'ember-app/locales/ru/models/flexberry-ember-demo-comment', 'ember-app/locales/ru/models/flexberry-ember-demo-localization', 'ember-app/locales/ru/models/flexberry-ember-demo-localized-suggestion-type', 'ember-app/locales/ru/models/flexberry-ember-demo-suggestion-file', 'ember-app/locales/ru/models/flexberry-ember-demo-suggestion-type', 'ember-app/locales/ru/models/flexberry-ember-demo-suggestion', 'ember-app/locales/ru/models/flexberry-ember-demo-vote'], function (exports, _ember, _emberFlexberryLocalesRuTranslations, _emberFlexberryGisLocalesRuTranslations, _emberAppLocalesRuFormsFlexberryEmberDemoApplicationUserL, _emberAppLocalesRuFormsFlexberryEmberDemoLocalizationL, _emberAppLocalesRuFormsFlexberryEmberDemoSuggestionL, _emberAppLocalesRuFormsFlexberryEmberDemoSuggestionTypeL, _emberAppLocalesRuFormsFlexberryEmberDemoApplicationUserE, _emberAppLocalesRuFormsFlexberryEmberDemoLocalizationE, _emberAppLocalesRuFormsFlexberryEmberDemoSuggestionE, _emberAppLocalesRuFormsFlexberryEmberDemoSuggestionTypeE, _emberAppLocalesRuModelsFlexberryEmberDemoApplicationUser, _emberAppLocalesRuModelsFlexberryEmberDemoCommentVote, _emberAppLocalesRuModelsFlexberryEmberDemoComment, _emberAppLocalesRuModelsFlexberryEmberDemoLocalization, _emberAppLocalesRuModelsFlexberryEmberDemoLocalizedSuggestionType, _emberAppLocalesRuModelsFlexberryEmberDemoSuggestionFile, _emberAppLocalesRuModelsFlexberryEmberDemoSuggestionType, _emberAppLocalesRuModelsFlexberryEmberDemoSuggestion, _emberAppLocalesRuModelsFlexberryEmberDemoVote) {

  var translations = {};
  _ember['default'].$.extend(true, translations, _emberFlexberryLocalesRuTranslations['default']);
  _ember['default'].$.extend(true, translations, _emberFlexberryGisLocalesRuTranslations['default']);

  _ember['default'].$.extend(true, translations, {
    components: {
      'map-tools': {
        'draw-suggestion': {
          caption: 'Создать предложение'
        }
      }
    },

    models: {
      'flexberry-ember-demo-application-user': _emberAppLocalesRuModelsFlexberryEmberDemoApplicationUser['default'],
      'flexberry-ember-demo-comment-vote': _emberAppLocalesRuModelsFlexberryEmberDemoCommentVote['default'],
      'flexberry-ember-demo-comment': _emberAppLocalesRuModelsFlexberryEmberDemoComment['default'],
      'flexberry-ember-demo-localization': _emberAppLocalesRuModelsFlexberryEmberDemoLocalization['default'],
      'flexberry-ember-demo-localized-suggestion-type': _emberAppLocalesRuModelsFlexberryEmberDemoLocalizedSuggestionType['default'],
      'flexberry-ember-demo-suggestion-file': _emberAppLocalesRuModelsFlexberryEmberDemoSuggestionFile['default'],
      'flexberry-ember-demo-suggestion-type': _emberAppLocalesRuModelsFlexberryEmberDemoSuggestionType['default'],
      'flexberry-ember-demo-suggestion': _emberAppLocalesRuModelsFlexberryEmberDemoSuggestion['default'],
      'flexberry-ember-demo-vote': _emberAppLocalesRuModelsFlexberryEmberDemoVote['default']
    },

    'application-name': 'Демонстрационное приложение ember-flexberry',

    forms: {
      loading: {
        'spinner-caption': 'Данные загружаются, пожалуйста подождите...'
      },
      index: {
        greeting: 'Добро пожаловать на тестовый стенд ember-flexberry!'
      },

      login: {
        caption: 'Войти',
        logout: 'Выйти',
        back: 'Назад',
        login: 'Логин',
        password: 'Пароль',
        'you-logged-as': 'Вы вошли как: "{{login}}".',
        errors: {
          'empty-login': 'Логин не может быть пустым.',
          'empty-password': 'Пароль не может быть пустым.',
          'server-error': 'Не удалось получить ответ от сервера.',
          'incorrect-auth-data': 'Неверный логин или пароль.',
          'login-please': 'Пожалуйста, войдите.',
          'unknown-error': 'Ой, что то пошло не так...'
        }
      },

      map: {
        caption: 'Карта',
        treeviewbuttontooltip: 'Показать дерево слоёв',
        searchbuttontooltip: 'Показать поиск',
        bookmarksbuttontooltip: 'Пространственные закладки',
        identifybuttontooltip: 'Показать идентификацию'
      },

      crs: {
        current: {
          name: 'В системе коодинат карты',
          xCaption: 'X',
          yCaption: 'Y'
        },
        latlng: {
          name: 'Широта и Долгота',
          xCaption: 'Широта',
          yCaption: 'Долгота'
        }
      },

      application: {
        header: {
          menu: {
            'show-menu': {
              caption: 'Показать меню'
            },
            'hide-menu': {
              caption: 'Скрыть меню'
            },
            'sitemap-button': {
              caption: '',
              title: 'Меню'
            },
            'user-settings-service-checkbox': {
              caption: 'Пользовательские настройки списков'
            },
            'language-dropdown': {
              caption: 'Язык приложения',
              placeholder: 'Выберите язык'
            }
          }
        },

        'sync-up': 'Синхронизировать',
        'sync-down': 'Sync-down',

        footer: {
          'application-name': 'Flexberry ember demo',
          'application-version': {
            caption: 'Версия аддона {{version}}',
            title: 'Это версия аддона ember-flexberry, которая сейчас используется в этом тестовом приложении ' + '(версия npm-пакета + хэш коммита). ' + 'Кликните, чтобы перейти на GitHub.'
          }
        },

        sitemap: {
          'application-name': {
            caption: 'Flexberry ember demo',
            title: 'Flexberry ember demo'
          },
          'application-version': {
            caption: 'Версия аддона {{version}}',
            title: 'Это версия аддона ember-flexberry, которая сейчас используется в этом тестовом приложении ' + '(версия npm-пакета + хэш коммита). ' + 'Кликните, чтобы перейти на GitHub.'
          },
          index: {
            caption: 'Главная',
            title: ''
          },
          map: {
            caption: 'Карта',
            title: ''
          },
          'flexberry-ember-demo': {
            caption: 'FlexberryEmberDemo',
            title: 'FlexberryEmberDemo',
            'flexberry-ember-demo-suggestion-type-l': {
              caption: 'Типы предложений',
              title: ''

            },
            'flexberry-ember-demo-application-user-l': {
              caption: 'Пользователи приложения',
              title: ''

            },
            'flexberry-ember-demo-localization-l': {
              caption: 'Локализация',
              title: ''

            },
            'flexberry-ember-demo-suggestion-l': {
              caption: 'Предложения',
              title: ''

            }
          }
        }
      },

      'edit-form': {
        'save-success-message-caption': 'Сохранение завершилось успешно',
        'save-success-message': 'Объект сохранен',
        'save-error-message-caption': 'Ошибка сохранения',
        'delete-success-message-caption': 'Удаление завершилось успешно',
        'delete-success-message': 'Объект удален',
        'delete-error-message-caption': 'Ошибка удаления'
      },
      'flexberry-ember-demo-application-user-l': _emberAppLocalesRuFormsFlexberryEmberDemoApplicationUserL['default'],
      'flexberry-ember-demo-localization-l': _emberAppLocalesRuFormsFlexberryEmberDemoLocalizationL['default'],
      'flexberry-ember-demo-suggestion-l': _emberAppLocalesRuFormsFlexberryEmberDemoSuggestionL['default'],
      'flexberry-ember-demo-suggestion-type-l': _emberAppLocalesRuFormsFlexberryEmberDemoSuggestionTypeL['default'],
      'flexberry-ember-demo-application-user-e': _emberAppLocalesRuFormsFlexberryEmberDemoApplicationUserE['default'],
      'flexberry-ember-demo-localization-e': _emberAppLocalesRuFormsFlexberryEmberDemoLocalizationE['default'],
      'flexberry-ember-demo-suggestion-e': _emberAppLocalesRuFormsFlexberryEmberDemoSuggestionE['default'],
      'flexberry-ember-demo-suggestion-type-e': _emberAppLocalesRuFormsFlexberryEmberDemoSuggestionTypeE['default']
    }

  });

  exports['default'] = translations;
});
define('ember-app/map-commands/base', ['exports', 'ember-flexberry-gis/map-commands/base'], function (exports, _emberFlexberryGisMapCommandsBase) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapCommandsBase['default'];
    }
  });
});
define('ember-app/map-commands/export-download', ['exports', 'ember-flexberry-gis/map-commands/export-download'], function (exports, _emberFlexberryGisMapCommandsExportDownload) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapCommandsExportDownload['default'];
    }
  });
});
define('ember-app/map-commands/export-print', ['exports', 'ember-flexberry-gis/map-commands/export-print'], function (exports, _emberFlexberryGisMapCommandsExportPrint) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapCommandsExportPrint['default'];
    }
  });
});
define('ember-app/map-commands/export', ['exports', 'ember-flexberry-gis/map-commands/export'], function (exports, _emberFlexberryGisMapCommandsExport) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapCommandsExport['default'];
    }
  });
});
define('ember-app/map-commands/full-extent', ['exports', 'ember-flexberry-gis/map-commands/full-extent'], function (exports, _emberFlexberryGisMapCommandsFullExtent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapCommandsFullExtent['default'];
    }
  });
});
define('ember-app/map-commands/go-to', ['exports', 'ember-flexberry-gis/map-commands/go-to'], function (exports, _emberFlexberryGisMapCommandsGoTo) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapCommandsGoTo['default'];
    }
  });
});
define('ember-app/map-commands/search-attributes', ['exports', 'ember-flexberry-gis/map-commands/search-attributes'], function (exports, _emberFlexberryGisMapCommandsSearchAttributes) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapCommandsSearchAttributes['default'];
    }
  });
});
define('ember-app/map-commands/search-clear', ['exports', 'ember-flexberry-gis/map-commands/search-clear'], function (exports, _emberFlexberryGisMapCommandsSearchClear) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapCommandsSearchClear['default'];
    }
  });
});
define('ember-app/map-commands/search-show', ['exports', 'ember-flexberry-gis/map-commands/search-show'], function (exports, _emberFlexberryGisMapCommandsSearchShow) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapCommandsSearchShow['default'];
    }
  });
});
define('ember-app/map-commands/search', ['exports', 'ember-flexberry-gis/map-commands/search'], function (exports, _emberFlexberryGisMapCommandsSearch) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapCommandsSearch['default'];
    }
  });
});
define('ember-app/map-tools/base-nonclickable', ['exports', 'ember-flexberry-gis/map-tools/base-nonclickable'], function (exports, _emberFlexberryGisMapToolsBaseNonclickable) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsBaseNonclickable['default'];
    }
  });
});
define('ember-app/map-tools/base', ['exports', 'ember-flexberry-gis/map-tools/base'], function (exports, _emberFlexberryGisMapToolsBase) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsBase['default'];
    }
  });
});
define('ember-app/map-tools/drag', ['exports', 'ember-flexberry-gis/map-tools/drag'], function (exports, _emberFlexberryGisMapToolsDrag) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsDrag['default'];
    }
  });
});
define('ember-app/map-tools/draw-circle', ['exports', 'ember-flexberry-gis/map-tools/draw-circle'], function (exports, _emberFlexberryGisMapToolsDrawCircle) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsDrawCircle['default'];
    }
  });
});
define('ember-app/map-tools/draw-clear', ['exports', 'ember-flexberry-gis/map-tools/draw-clear'], function (exports, _emberFlexberryGisMapToolsDrawClear) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsDrawClear['default'];
    }
  });
});
define('ember-app/map-tools/draw-marker', ['exports', 'ember-flexberry-gis/map-tools/draw-marker'], function (exports, _emberFlexberryGisMapToolsDrawMarker) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsDrawMarker['default'];
    }
  });
});
define('ember-app/map-tools/draw-polygon', ['exports', 'ember-flexberry-gis/map-tools/draw-polygon'], function (exports, _emberFlexberryGisMapToolsDrawPolygon) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsDrawPolygon['default'];
    }
  });
});
define('ember-app/map-tools/draw-polyline', ['exports', 'ember-flexberry-gis/map-tools/draw-polyline'], function (exports, _emberFlexberryGisMapToolsDrawPolyline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsDrawPolyline['default'];
    }
  });
});
define('ember-app/map-tools/draw-rectangle', ['exports', 'ember-flexberry-gis/map-tools/draw-rectangle'], function (exports, _emberFlexberryGisMapToolsDrawRectangle) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsDrawRectangle['default'];
    }
  });
});
define('ember-app/map-tools/draw-suggestion-marker', ['exports', 'ember', 'ember-app/map-tools/draw-suggestion'], function (exports, _ember, _emberAppMapToolsDrawSuggestion) {

  /**
    Draw marker map-tool.
  
    @class DrawMarkerMapTool
    @extends DrawMapTool
  */
  exports['default'] = _emberAppMapToolsDrawSuggestion['default'].extend({
    /**
      Handles map's 'editable:drawing:end' event.
       @method _drawingDidEnd
      @param {Object} e Event object.
      @param {<a href="http://leafletjs.com/reference-1.0.0.html#rectangle">L.Rectangle</a>} e.layer Drawn rectangle layer.
    */
    _drawingDidEnd: function _drawingDidEnd(_ref) {
      var layer = _ref.layer;

      this._super.apply(this, arguments);

      layer.disableEdit();
      var latlng = layer._latlng;
      var geojson = '[' + latlng.lat + ',' + latlng.lng + ']';
      _ember['default'].getOwner(this).lookup('controller:map').transitionToRoute('flexberry-ember-demo-suggestion-e.new', { queryParams: { geojson: geojson } });
    },

    /**
      Enables tool.
       @method _enable
      @private
    */
    _enable: function _enable() {
      this._super.apply(this, arguments);
      this.get('_editTools').startMarker();
    }
  });
});
/**
  @module ember-flexberry-gis
*/
define('ember-app/map-tools/draw-suggestion-polygon', ['exports', 'ember', 'ember-app/map-tools/draw-suggestion'], function (exports, _ember, _emberAppMapToolsDrawSuggestion) {

  /**
    Draw polygon map-tool.
  
    @class DrawPolygonMapTool
    @extends DrawMapTool
  */
  exports['default'] = _emberAppMapToolsDrawSuggestion['default'].extend({
    /**
      Handles map's 'editable:drawing:end' event.
       @method _drawingDidEnd
      @param {Object} e Event object.
      @param {<a href="http://leafletjs.com/reference-1.0.0.html#rectangle">L.Rectangle</a>} e.layer Drawn rectangle layer.
    */
    _drawingDidEnd: function _drawingDidEnd(_ref) {
      var layer = _ref.layer;

      this._super.apply(this, arguments);

      layer.disableEdit();
      var latlngs = layer._latlngs;
      var geojson = '[[';
      latlngs[0].forEach(function (latlng) {
        geojson += '[' + latlng.lat + ',' + latlng.lng + '],';
      });

      geojson = geojson.slice(0, -1) + ']]';
      _ember['default'].getOwner(this).lookup('controller:map').transitionToRoute('flexberry-ember-demo-suggestion-e.new', { queryParams: { geojson: geojson } });
    },

    /**
      Enables tool.
       @method _enable
      @private
    */
    _enable: function _enable() {
      this._super.apply(this, arguments);
      this.get('_editTools').startPolygon();
    }
  });
});
/**
  @module ember-flexberry-gis
*/
define('ember-app/map-tools/draw-suggestion-polyline', ['exports', 'ember', 'ember-app/map-tools/draw-suggestion'], function (exports, _ember, _emberAppMapToolsDrawSuggestion) {

  /**
    Draw polyline map-tool.
  
    @class DrawPolylineMapTool
    @extends DrawMapTool
  */
  exports['default'] = _emberAppMapToolsDrawSuggestion['default'].extend({
    /**
      Handles map's 'editable:drawing:end' event.
       @method _drawingDidEnd
      @param {Object} e Event object.
      @param {<a href="http://leafletjs.com/reference-1.0.0.html#rectangle">L.Rectangle</a>} e.layer Drawn rectangle layer.
    */
    _drawingDidEnd: function _drawingDidEnd(_ref) {
      var layer = _ref.layer;

      this._super.apply(this, arguments);

      layer.disableEdit();
      var latlngs = layer._latlngs;
      var geojson = '[';
      latlngs.forEach(function (latlng) {
        geojson += '[' + latlng.lat + ',' + latlng.lng + '],';
      });

      geojson = geojson.slice(0, -1) + ']';
      _ember['default'].getOwner(this).lookup('controller:map').transitionToRoute('flexberry-ember-demo-suggestion-e.new', { queryParams: { geojson: geojson } });
    },

    /**
      Enables tool.
       @method _enable
      @private
    */
    _enable: function _enable() {
      this._super.apply(this, arguments);
      this.get('_editTools').startPolyline();
    }
  });
});
/**
  @module ember-flexberry-gis
*/
define('ember-app/map-tools/draw-suggestion-rectangle', ['exports', 'ember', 'ember-app/map-tools/draw-suggestion'], function (exports, _ember, _emberAppMapToolsDrawSuggestion) {

  /**
    Draw rectangle map-tool.
  
    @class DrawRectangleMapTool
    @extends DrawMapTool
  */
  exports['default'] = _emberAppMapToolsDrawSuggestion['default'].extend({
    /**
      Handles map's 'editable:drawing:end' event.
       @method _drawingDidEnd
      @param {Object} e Event object.
      @param {<a href="http://leafletjs.com/reference-1.0.0.html#rectangle">L.Rectangle</a>} e.layer Drawn rectangle layer.
    */
    _drawingDidEnd: function _drawingDidEnd(_ref) {
      var layer = _ref.layer;

      this._super.apply(this, arguments);

      layer.disableEdit();
      var latlngs = layer._latlngs;
      var geojson = '[[';
      latlngs[0].forEach(function (latlng) {
        geojson += '[' + latlng.lat + ',' + latlng.lng + '],';
      });

      geojson = geojson.slice(0, -1) + ']]';
      _ember['default'].getOwner(this).lookup('controller:map').transitionToRoute('flexberry-ember-demo-suggestion-e.new', { queryParams: { geojson: geojson } });
    },

    /**
      Enables tool.
       @method _enable
      @private
    */
    _enable: function _enable() {
      this._super.apply(this, arguments);
      this.get('_editTools').startRectangle();
    }
  });
});
/**
  @module ember-flexberry-gis
*/
define('ember-app/map-tools/draw-suggestion', ['exports', 'ember', 'ember-flexberry-gis/map-tools/base-nonclickable'], function (exports, _ember, _emberFlexberryGisMapToolsBaseNonclickable) {

  /**
    Draw map-tool.
  
    @class DrawMapTool
    @extends BaseNonclickableMapTool
  */
  exports['default'] = _emberFlexberryGisMapToolsBaseNonclickable['default'].extend({
    /**
      Leaflet.Editable drawing tools instance.
       @property _editTools
      @type <a href="http://leaflet.github.io/Leaflet.Editable/doc/api.html">L.Ediatble</a>
      @default null
      @private
    */
    _editTools: null,

    /**
      Layer group for Leaflet.Editable temporary markers & other objects.
       @property editLayer
      @type <a href="http://leafletjs.com/reference-1.0.0.html#layergroup">L.LayerGroup</a>
      @default null
    */
    editLayer: null,

    /**
      Layer group for Leaflet.Editable drawn features.
       @property featuresLayer
      @type <a href="http://leafletjs.com/reference-1.0.0.html#layergroup">L.LayerGroup</a>
      @default null
    */
    featuresLayer: null,

    /**
      Flag: indicates whether map-tool is exclusive or not.
      Exclusive map-tool lives in enabled state until some other tool will be manually enabled.
       @property enabled
      @type Boolean
      @default false
    */
    exclusive: false,

    /**
      Enables tool.
       @method _enable
      @private
    */
    _enable: function _enable() {
      this._super.apply(this, arguments);

      var leafletMap = this.get('leafletMap');
      var editLayer = this.get('editLayer');
      if (!_ember['default'].isNone(editLayer) && !leafletMap.hasLayer(editLayer)) {
        editLayer.addTo(leafletMap);
      }

      var featuresLayer = this.get('featuresLayer');
      if (!_ember['default'].isNone(featuresLayer) && !leafletMap.hasLayer(featuresLayer)) {
        featuresLayer.addTo(leafletMap);
      }

      var editTools = this.get('_editTools');
      if (_ember['default'].isNone(editTools)) {
        editTools = new L.Editable(leafletMap, {
          editLayer: editLayer,
          featuresLayer: featuresLayer
        });
        this.set('_editTools', editTools);
      }

      editTools.on('editable:drawing:end', this._drawingDidEnd, this);
    },

    /**
      Disables tool.
       @method _disable
      @private
    */
    _disable: function _disable() {
      this._super.apply(this, arguments);

      var editTools = this.get('_editTools');
      if (!_ember['default'].isNone(editTools)) {
        editTools.off('editable:drawing:end', this._drawingDidEnd, this);
        editTools.stopDrawing();
      }
    },

    /**
      Destroys map-tool.
    */
    willDestroy: function willDestroy() {
      this._super.apply(this, arguments);

      var editLayer = this.get('_editTools.editLayer');
      if (!_ember['default'].isNone(editLayer)) {
        editLayer.clearLayers();
        editLayer.remove();
      }

      var featuresLayer = this.get('_editTools.featuresLayer');
      if (!_ember['default'].isNone(featuresLayer)) {
        featuresLayer.clearLayers();
        featuresLayer.remove();
      }

      this.set('editLayer', null);
      this.set('featuresLayer', null);
      this.set('_editTools', null);
    }
  });
});
/**
  @module ember-flexberry-gis
*/
define('ember-app/map-tools/draw', ['exports', 'ember-flexberry-gis/map-tools/draw'], function (exports, _emberFlexberryGisMapToolsDraw) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsDraw['default'];
    }
  });
});
define('ember-app/map-tools/identify-all-polygon', ['exports', 'ember-flexberry-gis/map-tools/identify-all-polygon'], function (exports, _emberFlexberryGisMapToolsIdentifyAllPolygon) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsIdentifyAllPolygon['default'];
    }
  });
});
define('ember-app/map-tools/identify-all-rectangle', ['exports', 'ember-flexberry-gis/map-tools/identify-all-rectangle'], function (exports, _emberFlexberryGisMapToolsIdentifyAllRectangle) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsIdentifyAllRectangle['default'];
    }
  });
});
define('ember-app/map-tools/identify-top-polygon', ['exports', 'ember-flexberry-gis/map-tools/identify-top-polygon'], function (exports, _emberFlexberryGisMapToolsIdentifyTopPolygon) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsIdentifyTopPolygon['default'];
    }
  });
});
define('ember-app/map-tools/identify-top-rectangle', ['exports', 'ember-flexberry-gis/map-tools/identify-top-rectangle'], function (exports, _emberFlexberryGisMapToolsIdentifyTopRectangle) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsIdentifyTopRectangle['default'];
    }
  });
});
define('ember-app/map-tools/identify-visible-polygon', ['exports', 'ember-flexberry-gis/map-tools/identify-visible-polygon'], function (exports, _emberFlexberryGisMapToolsIdentifyVisiblePolygon) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsIdentifyVisiblePolygon['default'];
    }
  });
});
define('ember-app/map-tools/identify-visible-rectangle', ['exports', 'ember-flexberry-gis/map-tools/identify-visible-rectangle'], function (exports, _emberFlexberryGisMapToolsIdentifyVisibleRectangle) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsIdentifyVisibleRectangle['default'];
    }
  });
});
define('ember-app/map-tools/identify', ['exports', 'ember-flexberry-gis/map-tools/identify'], function (exports, _emberFlexberryGisMapToolsIdentify) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsIdentify['default'];
    }
  });
});
define('ember-app/map-tools/measure-area', ['exports', 'ember-flexberry-gis/map-tools/measure-area'], function (exports, _emberFlexberryGisMapToolsMeasureArea) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsMeasureArea['default'];
    }
  });
});
define('ember-app/map-tools/measure-clear', ['exports', 'ember-flexberry-gis/map-tools/measure-clear'], function (exports, _emberFlexberryGisMapToolsMeasureClear) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsMeasureClear['default'];
    }
  });
});
define('ember-app/map-tools/measure-coordinates', ['exports', 'ember-flexberry-gis/map-tools/measure-coordinates'], function (exports, _emberFlexberryGisMapToolsMeasureCoordinates) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsMeasureCoordinates['default'];
    }
  });
});
define('ember-app/map-tools/measure-distance', ['exports', 'ember-flexberry-gis/map-tools/measure-distance'], function (exports, _emberFlexberryGisMapToolsMeasureDistance) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsMeasureDistance['default'];
    }
  });
});
define('ember-app/map-tools/measure-radius', ['exports', 'ember-flexberry-gis/map-tools/measure-radius'], function (exports, _emberFlexberryGisMapToolsMeasureRadius) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsMeasureRadius['default'];
    }
  });
});
define('ember-app/map-tools/measure', ['exports', 'ember-flexberry-gis/map-tools/measure'], function (exports, _emberFlexberryGisMapToolsMeasure) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsMeasure['default'];
    }
  });
});
define('ember-app/map-tools/rectangle', ['exports', 'ember-flexberry-gis/map-tools/rectangle'], function (exports, _emberFlexberryGisMapToolsRectangle) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsRectangle['default'];
    }
  });
});
define('ember-app/map-tools/zoom-in', ['exports', 'ember-flexberry-gis/map-tools/zoom-in'], function (exports, _emberFlexberryGisMapToolsZoomIn) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsZoomIn['default'];
    }
  });
});
define('ember-app/map-tools/zoom-out', ['exports', 'ember-flexberry-gis/map-tools/zoom-out'], function (exports, _emberFlexberryGisMapToolsZoomOut) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisMapToolsZoomOut['default'];
    }
  });
});
define('ember-app/mixins/link-action', ['exports', 'ember-link-action/mixins/link-action'], function (exports, _emberLinkActionMixinsLinkAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLinkActionMixinsLinkAction['default'];
    }
  });
});
define('ember-app/mixins/redirect-to-login-mixin', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    offlineGlobals: _ember['default'].inject.service('offline-globals'),

    beforeModel: function beforeModel() {
      var login = _ember['default'].get(_ember['default'].getOwner(this).lookup('controller:application'), 'login');
      if (_ember['default'].isBlank(login)) {
        this.transitionTo('login');
      }

      this._super.apply(this, arguments);
    }
  });
});
define('ember-app/mixins/regenerated/models/flexberry-ember-demo-application-user', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    name: _emberData['default'].attr('string'),
    login: _emberData['default'].attr('string'),
    eMail: _emberData['default'].attr('string'),
    phone1: _emberData['default'].attr('string'),
    phone2: _emberData['default'].attr('string'),
    phone3: _emberData['default'].attr('string'),
    activated: _emberData['default'].attr('boolean'),
    vK: _emberData['default'].attr('string'),
    facebook: _emberData['default'].attr('string'),
    twitter: _emberData['default'].attr('string'),
    birthday: _emberData['default'].attr('date'),
    gender: _emberData['default'].attr('flexberry-ember-demo-gender'),
    vip: _emberData['default'].attr('boolean'),
    karma: _emberData['default'].attr('decimal'),
    getValidations: function getValidations() {
      var parentValidations = this._super();
      var thisValidations = {
        name: { presence: true },
        login: { presence: true },
        eMail: { presence: true }
      };
      return _ember['default'].$.extend(true, {}, parentValidations, thisValidations);
    },
    init: function init() {
      this.set('validations', this.getValidations());
      this._super.apply(this, arguments);
    }
  });
  exports.Model = Model;
  var defineProjections = function defineProjections(modelClass) {
    modelClass.defineProjection('ApplicationUserE', 'flexberry-ember-demo-application-user', {
      name: _emberFlexberryData.Projection.attr('Имя'),
      login: _emberFlexberryData.Projection.attr('Логин'),
      eMail: _emberFlexberryData.Projection.attr('E mail'),
      phone1: _emberFlexberryData.Projection.attr('Номер телефона 1'),
      phone2: _emberFlexberryData.Projection.attr('Номер телефона 2'),
      phone3: _emberFlexberryData.Projection.attr('Номер телефона 3'),
      activated: _emberFlexberryData.Projection.attr('Активен'),
      vK: _emberFlexberryData.Projection.attr('VK'),
      facebook: _emberFlexberryData.Projection.attr('Facebook'),
      twitter: _emberFlexberryData.Projection.attr('Twitter'),
      birthday: _emberFlexberryData.Projection.attr('Дата рождения'),
      gender: _emberFlexberryData.Projection.attr('Пол'),
      vip: _emberFlexberryData.Projection.attr('VIP'),
      karma: _emberFlexberryData.Projection.attr('Карма')
    });
    modelClass.defineProjection('ApplicationUserL', 'flexberry-ember-demo-application-user', {
      name: _emberFlexberryData.Projection.attr('Имя'),
      eMail: _emberFlexberryData.Projection.attr('E mail'),
      birthday: _emberFlexberryData.Projection.attr('Дата рождения'),
      gender: _emberFlexberryData.Projection.attr('Пол'),
      vip: _emberFlexberryData.Projection.attr('VIP'),
      karma: _emberFlexberryData.Projection.attr('Карма'),
      phone1: _emberFlexberryData.Projection.attr('', { hidden: true }),
      vK: _emberFlexberryData.Projection.attr('', { hidden: true }),
      facebook: _emberFlexberryData.Projection.attr('', { hidden: true }),
      twitter: _emberFlexberryData.Projection.attr('', { hidden: true }),
      activated: _emberFlexberryData.Projection.attr('', { hidden: true }),
      phone2: _emberFlexberryData.Projection.attr('', { hidden: true }),
      phone3: _emberFlexberryData.Projection.attr('', { hidden: true }),
      login: _emberFlexberryData.Projection.attr('', { hidden: true })
    });
  };
  exports.defineProjections = defineProjections;
});
define('ember-app/mixins/regenerated/models/flexberry-ember-demo-comment-vote', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    voteType: _emberData['default'].attr('flexberry-ember-demo-vote-type'),
    applicationUser: _emberData['default'].belongsTo('flexberry-ember-demo-application-user', { inverse: null, async: false }),
    comment: _emberData['default'].belongsTo('flexberry-ember-demo-comment', { inverse: 'userVotes', async: false }),
    getValidations: function getValidations() {
      var parentValidations = this._super();
      var thisValidations = {
        applicationUser: { presence: true },
        comment: { presence: true }
      };
      return _ember['default'].$.extend(true, {}, parentValidations, thisValidations);
    },
    init: function init() {
      this.set('validations', this.getValidations());
      this._super.apply(this, arguments);
    }
  });
  exports.Model = Model;
  var defineProjections = function defineProjections(modelClass) {
    modelClass.defineProjection('CommentVoteE', 'flexberry-ember-demo-comment-vote', {
      voteType: _emberFlexberryData.Projection.attr('Тип голосования'),
      applicationUser: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-application-user', 'Пользователь приложения', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' })
    });
  };
  exports.defineProjections = defineProjections;
});
define('ember-app/mixins/regenerated/models/flexberry-ember-demo-comment', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    text: _emberData['default'].attr('string'),
    votes: _emberData['default'].attr('number'),
    moderated: _emberData['default'].attr('boolean'),
    author: _emberData['default'].belongsTo('flexberry-ember-demo-application-user', { inverse: null, async: false }),
    suggestion: _emberData['default'].belongsTo('flexberry-ember-demo-suggestion', { inverse: 'comments', async: false }),
    userVotes: _emberData['default'].hasMany('flexberry-ember-demo-comment-vote', { inverse: 'comment', async: false }),
    getValidations: function getValidations() {
      var parentValidations = this._super();
      var thisValidations = {
        author: { presence: true },
        suggestion: { presence: true }
      };
      return _ember['default'].$.extend(true, {}, parentValidations, thisValidations);
    },
    init: function init() {
      this.set('validations', this.getValidations());
      this._super.apply(this, arguments);
    }
  });
  exports.Model = Model;
  var defineProjections = function defineProjections(modelClass) {
    modelClass.defineProjection('CommentE', 'flexberry-ember-demo-comment', {
      text: _emberFlexberryData.Projection.attr('Текст'),
      votes: _emberFlexberryData.Projection.attr('Голоса'),
      moderated: _emberFlexberryData.Projection.attr('Одобрен'),
      author: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-application-user', 'Автор', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      userVotes: _emberFlexberryData.Projection.hasMany('flexberry-ember-demo-comment-vote', 'Голоса пользователей', {
        voteType: _emberFlexberryData.Projection.attr('Тип голосования'),
        applicationUser: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-application-user', 'Пользователь приложения', {
          name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
        }, { displayMemberPath: 'name' })
      })
    });
  };
  exports.defineProjections = defineProjections;
});
define('ember-app/mixins/regenerated/models/flexberry-ember-demo-localization', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    name: _emberData['default'].attr('string'),
    getValidations: function getValidations() {
      var parentValidations = this._super();
      var thisValidations = {
        name: { presence: true }
      };
      return _ember['default'].$.extend(true, {}, parentValidations, thisValidations);
    },
    init: function init() {
      this.set('validations', this.getValidations());
      this._super.apply(this, arguments);
    }
  });
  exports.Model = Model;
  var defineProjections = function defineProjections(modelClass) {
    modelClass.defineProjection('LocalizationE', 'flexberry-ember-demo-localization', {
      name: _emberFlexberryData.Projection.attr('Название')
    });
    modelClass.defineProjection('LocalizationL', 'flexberry-ember-demo-localization', {
      name: _emberFlexberryData.Projection.attr('Название')
    });
  };
  exports.defineProjections = defineProjections;
});
define('ember-app/mixins/regenerated/models/flexberry-ember-demo-localized-suggestion-type', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    name: _emberData['default'].attr('string'),
    localization: _emberData['default'].belongsTo('flexberry-ember-demo-localization', { inverse: null, async: false }),
    suggestionType: _emberData['default'].belongsTo('flexberry-ember-demo-suggestion-type', { inverse: 'localizedTypes', async: false }),
    getValidations: function getValidations() {
      var parentValidations = this._super();
      var thisValidations = {
        name: { presence: true },
        localization: { presence: true },
        suggestionType: { presence: true }
      };
      return _ember['default'].$.extend(true, {}, parentValidations, thisValidations);
    },
    init: function init() {
      this.set('validations', this.getValidations());
      this._super.apply(this, arguments);
    }
  });
  exports.Model = Model;
  var defineProjections = function defineProjections(modelClass) {
    modelClass.defineProjection('LocalizedSuggestionTypeE', 'flexberry-ember-demo-localized-suggestion-type', {
      name: _emberFlexberryData.Projection.attr('Название'),
      localization: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-localization', 'Локализация', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' })
    });
  };
  exports.defineProjections = defineProjections;
});
define('ember-app/mixins/regenerated/models/flexberry-ember-demo-offline-user', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    /**
      Non-stored property.
       @property login
    */
    login: _emberData['default'].attr('string'),
    /**
      Method to set non-stored property.
      Please, use code below in model class (outside of this mixin) otherwise it will be replaced during regeneration of models.
      Please, implement 'loginCompute' method in model class (outside of this mixin) if you want to compute value of 'login' property.
       @method _loginCompute
      @private
      @example
        ```javascript
        _loginChanged: Ember.on('init', Ember.observer('login', function() {
          Ember.run.once(this, '_loginCompute');
        }))
        ```
    */
    _loginCompute: function _loginCompute() {
      var result = this.loginCompute && typeof this.loginCompute === 'function' ? this.loginCompute() : null;
      this.set('login', result);
    },
    /**
      Non-stored property.
       @property password
    */
    password: _emberData['default'].attr('string'),
    /**
      Method to set non-stored property.
      Please, use code below in model class (outside of this mixin) otherwise it will be replaced during regeneration of models.
      Please, implement 'passwordCompute' method in model class (outside of this mixin) if you want to compute value of 'password' property.
       @method _passwordCompute
      @private
      @example
        ```javascript
        _passwordChanged: Ember.on('init', Ember.observer('password', function() {
          Ember.run.once(this, '_passwordCompute');
        }))
        ```
    */
    _passwordCompute: function _passwordCompute() {
      var result = this.passwordCompute && typeof this.passwordCompute === 'function' ? this.passwordCompute() : null;
      this.set('password', result);
    },
    getValidations: function getValidations() {
      var parentValidations = this._super();
      var thisValidations = {};
      return _ember['default'].$.extend(true, {}, parentValidations, thisValidations);
    },
    init: function init() {
      this.set('validations', this.getValidations());
      this._super.apply(this, arguments);
    }
  });
  exports.Model = Model;
  var defineProjections = function defineProjections(modelClass) {
    modelClass.defineProjection('OfflineUserE', 'flexberry-ember-demo-offline-user', {
      login: _emberFlexberryData.Projection.attr('Логин'),
      password: _emberFlexberryData.Projection.attr('Пароль')
    });
  };
  exports.defineProjections = defineProjections;
});
define('ember-app/mixins/regenerated/models/flexberry-ember-demo-suggestion-file', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    order: _emberData['default'].attr('number'),
    file: _emberData['default'].attr('file'),
    suggestion: _emberData['default'].belongsTo('flexberry-ember-demo-suggestion', { inverse: 'files', async: false }),
    getValidations: function getValidations() {
      var parentValidations = this._super();
      var thisValidations = {
        suggestion: { presence: true }
      };
      return _ember['default'].$.extend(true, {}, parentValidations, thisValidations);
    },
    init: function init() {
      this.set('validations', this.getValidations());
      this._super.apply(this, arguments);
    }
  });
  exports.Model = Model;
  var defineProjections = function defineProjections(modelClass) {
    modelClass.defineProjection('SuggestionFileE', 'flexberry-ember-demo-suggestion-file', {
      order: _emberFlexberryData.Projection.attr('Порядок'),
      file: _emberFlexberryData.Projection.attr('Файл')
    });
  };
  exports.defineProjections = defineProjections;
});
define('ember-app/mixins/regenerated/models/flexberry-ember-demo-suggestion-type', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    name: _emberData['default'].attr('string'),
    moderated: _emberData['default'].attr('boolean'),
    parent: _emberData['default'].belongsTo('flexberry-ember-demo-suggestion-type', { inverse: null, async: false }),
    localizedTypes: _emberData['default'].hasMany('flexberry-ember-demo-localized-suggestion-type', { inverse: 'suggestionType', async: false }),
    getValidations: function getValidations() {
      var parentValidations = this._super();
      var thisValidations = {
        name: { presence: true }
      };
      return _ember['default'].$.extend(true, {}, parentValidations, thisValidations);
    },
    init: function init() {
      this.set('validations', this.getValidations());
      this._super.apply(this, arguments);
    }
  });
  exports.Model = Model;
  var defineProjections = function defineProjections(modelClass) {
    modelClass.defineProjection('SuggestionTypeE', 'flexberry-ember-demo-suggestion-type', {
      name: _emberFlexberryData.Projection.attr('Название'),
      moderated: _emberFlexberryData.Projection.attr('Одобрено'),
      parent: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-suggestion-type', 'Родитель', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      localizedTypes: _emberFlexberryData.Projection.hasMany('flexberry-ember-demo-localized-suggestion-type', 'Локализованные типы', {
        name: _emberFlexberryData.Projection.attr('Название'),
        localization: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-localization', 'Локализация', {
          name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
        }, { displayMemberPath: 'name' })
      })
    });
    modelClass.defineProjection('SuggestionTypeL', 'flexberry-ember-demo-suggestion-type', {
      name: _emberFlexberryData.Projection.attr('Название'),
      moderated: _emberFlexberryData.Projection.attr('Одобрено'),
      parent: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-suggestion-type', 'Name', {}, { hidden: true })
    });
  };
  exports.defineProjections = defineProjections;
});
define('ember-app/mixins/regenerated/models/flexberry-ember-demo-suggestion', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    address: _emberData['default'].attr('string'),
    text: _emberData['default'].attr('string'),
    date: _emberData['default'].attr('date'),
    votes: _emberData['default'].attr('number'),
    moderated: _emberData['default'].attr('boolean'),
    polygon: _emberData['default'].attr('string'),
    type: _emberData['default'].belongsTo('flexberry-ember-demo-suggestion-type', { inverse: null, async: false }),
    author: _emberData['default'].belongsTo('flexberry-ember-demo-application-user', { inverse: null, async: false }),
    comments: _emberData['default'].hasMany('flexberry-ember-demo-comment', { inverse: 'suggestion', async: false }),
    files: _emberData['default'].hasMany('flexberry-ember-demo-suggestion-file', { inverse: 'suggestion', async: false }),
    userVotes: _emberData['default'].hasMany('flexberry-ember-demo-vote', { inverse: 'suggestion', async: false }),
    getValidations: function getValidations() {
      var parentValidations = this._super();
      var thisValidations = {
        type: { presence: true },
        author: { presence: true }
      };
      return _ember['default'].$.extend(true, {}, parentValidations, thisValidations);
    },
    init: function init() {
      this.set('validations', this.getValidations());
      this._super.apply(this, arguments);
    }
  });
  exports.Model = Model;
  var defineProjections = function defineProjections(modelClass) {
    modelClass.defineProjection('SuggestionE', 'flexberry-ember-demo-suggestion', {
      address: _emberFlexberryData.Projection.attr('Адрес'),
      text: _emberFlexberryData.Projection.attr('Текст'),
      polygon: _emberFlexberryData.Projection.attr('Полигон'),
      date: _emberFlexberryData.Projection.attr('Дата'),
      votes: _emberFlexberryData.Projection.attr('Голоса'),
      moderated: _emberFlexberryData.Projection.attr('Одобрено'),
      type: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-suggestion-type', 'Тип', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      author: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-application-user', 'Автор', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' }),
      comments: _emberFlexberryData.Projection.hasMany('flexberry-ember-demo-comment', 'Комментарии', {
        text: _emberFlexberryData.Projection.attr('Текст'),
        votes: _emberFlexberryData.Projection.attr('Голоса'),
        moderated: _emberFlexberryData.Projection.attr('Одобрен'),
        author: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-application-user', 'Автор', {
          name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
        }, { displayMemberPath: 'name' }),
        userVotes: _emberFlexberryData.Projection.hasMany('flexberry-ember-demo-comment-vote', 'Голоса пользователей', {
          voteType: _emberFlexberryData.Projection.attr('Тип голосования'),
          applicationUser: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-application-user', 'Пользователь приложения', {
            name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
          }, { displayMemberPath: 'name' })
        })
      }),
      files: _emberFlexberryData.Projection.hasMany('flexberry-ember-demo-suggestion-file', 'Файлы', {
        order: _emberFlexberryData.Projection.attr('Порядок'),
        file: _emberFlexberryData.Projection.attr('Файл')
      }),
      userVotes: _emberFlexberryData.Projection.hasMany('flexberry-ember-demo-vote', 'Голоса пользователей', {
        voteType: _emberFlexberryData.Projection.attr('Тип голосования'),
        applicationUser: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-application-user', 'Пользователь приложения', {
          name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
        }, { displayMemberPath: 'name' })
      })
    });
    modelClass.defineProjection('SuggestionL', 'flexberry-ember-demo-suggestion', {
      address: _emberFlexberryData.Projection.attr('Адрес'),
      text: _emberFlexberryData.Projection.attr('Текст'),
      date: _emberFlexberryData.Projection.attr('Дата'),
      votes: _emberFlexberryData.Projection.attr('Голоса'),
      moderated: _emberFlexberryData.Projection.attr('Одобрено'),
      type: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-suggestion-type', 'Тип предложения', {
        name: _emberFlexberryData.Projection.attr('Тип предложения')
      }, { hidden: true }),
      author: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-application-user', 'Автор', {
        name: _emberFlexberryData.Projection.attr('Автор')
      }, { hidden: true }),
      polygon: _emberFlexberryData.Projection.attr('', { hidden: true })
    });
  };
  exports.defineProjections = defineProjections;
});
define('ember-app/mixins/regenerated/models/flexberry-ember-demo-vote', ['exports', 'ember', 'ember-data', 'ember-flexberry-data'], function (exports, _ember, _emberData, _emberFlexberryData) {
  var Model = _ember['default'].Mixin.create({
    voteType: _emberData['default'].attr('flexberry-ember-demo-vote-type'),
    applicationUser: _emberData['default'].belongsTo('flexberry-ember-demo-application-user', { inverse: null, async: false }),
    suggestion: _emberData['default'].belongsTo('flexberry-ember-demo-suggestion', { inverse: 'userVotes', async: false }),
    getValidations: function getValidations() {
      var parentValidations = this._super();
      var thisValidations = {
        applicationUser: { presence: true },
        suggestion: { presence: true }
      };
      return _ember['default'].$.extend(true, {}, parentValidations, thisValidations);
    },
    init: function init() {
      this.set('validations', this.getValidations());
      this._super.apply(this, arguments);
    }
  });
  exports.Model = Model;
  var defineProjections = function defineProjections(modelClass) {
    modelClass.defineProjection('VoteE', 'flexberry-ember-demo-vote', {
      voteType: _emberFlexberryData.Projection.attr('Тип голосования'),
      applicationUser: _emberFlexberryData.Projection.belongsTo('flexberry-ember-demo-application-user', 'Пользователь приложения', {
        name: _emberFlexberryData.Projection.attr('Name', { hidden: true })
      }, { displayMemberPath: 'name' })
    });
  };
  exports.defineProjections = defineProjections;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-application-user-offline', ['exports', 'ember'], function (exports, _ember) {
  var OfflineSerializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {};

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.OfflineSerializer = OfflineSerializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-application-user', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {};

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.Serializer = Serializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-comment-offline', ['exports', 'ember'], function (exports, _ember) {
  var OfflineSerializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        author: { serialize: 'id', deserialize: 'records' },
        suggestion: { serialize: 'id', deserialize: 'records' },
        userVotes: { serialize: 'ids', deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.OfflineSerializer = OfflineSerializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-comment-vote-offline', ['exports', 'ember'], function (exports, _ember) {
  var OfflineSerializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        applicationUser: { serialize: 'id', deserialize: 'records' },
        comment: { serialize: 'id', deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.OfflineSerializer = OfflineSerializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-comment-vote', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        applicationUser: { serialize: 'odata-id', deserialize: 'records' },
        comment: { serialize: 'odata-id', deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.Serializer = Serializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-comment', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        author: { serialize: 'odata-id', deserialize: 'records' },
        suggestion: { serialize: 'odata-id', deserialize: 'records' },
        userVotes: { serialize: false, deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.Serializer = Serializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-localization-offline', ['exports', 'ember'], function (exports, _ember) {
  var OfflineSerializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {};

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.OfflineSerializer = OfflineSerializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-localization', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {};

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.Serializer = Serializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-localized-suggestion-type-offline', ['exports', 'ember'], function (exports, _ember) {
  var OfflineSerializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        localization: { serialize: 'id', deserialize: 'records' },
        suggestionType: { serialize: 'id', deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.OfflineSerializer = OfflineSerializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-localized-suggestion-type', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        localization: { serialize: 'odata-id', deserialize: 'records' },
        suggestionType: { serialize: 'odata-id', deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.Serializer = Serializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-offline-user-offline', ['exports', 'ember'], function (exports, _ember) {
  var OfflineSerializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {};

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.OfflineSerializer = OfflineSerializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-offline-user', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {};

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.Serializer = Serializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-suggestion-file-offline', ['exports', 'ember'], function (exports, _ember) {
  var OfflineSerializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        suggestion: { serialize: 'id', deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.OfflineSerializer = OfflineSerializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-suggestion-file', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        suggestion: { serialize: 'odata-id', deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.Serializer = Serializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-suggestion-offline', ['exports', 'ember'], function (exports, _ember) {
  var OfflineSerializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        type: { serialize: 'id', deserialize: 'records' },
        author: { serialize: 'id', deserialize: 'records' },
        comments: { serialize: 'ids', deserialize: 'records' },
        files: { serialize: 'ids', deserialize: 'records' },
        userVotes: { serialize: 'ids', deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.OfflineSerializer = OfflineSerializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-suggestion-type-offline', ['exports', 'ember'], function (exports, _ember) {
  var OfflineSerializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        parent: { serialize: 'id', deserialize: 'records' },
        localizedTypes: { serialize: 'ids', deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.OfflineSerializer = OfflineSerializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-suggestion-type', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        parent: { serialize: 'odata-id', deserialize: 'records' },
        localizedTypes: { serialize: false, deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.Serializer = Serializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-suggestion', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        type: { serialize: 'odata-id', deserialize: 'records' },
        author: { serialize: 'odata-id', deserialize: 'records' },
        comments: { serialize: false, deserialize: 'records' },
        files: { serialize: false, deserialize: 'records' },
        userVotes: { serialize: false, deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.Serializer = Serializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-vote-offline', ['exports', 'ember'], function (exports, _ember) {
  var OfflineSerializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        applicationUser: { serialize: 'id', deserialize: 'records' },
        suggestion: { serialize: 'id', deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.OfflineSerializer = OfflineSerializer;
});
define('ember-app/mixins/regenerated/serializers/flexberry-ember-demo-vote', ['exports', 'ember'], function (exports, _ember) {
  var Serializer = _ember['default'].Mixin.create({
    getAttrs: function getAttrs() {
      var parentAttrs = this._super();
      var attrs = {
        applicationUser: { serialize: 'odata-id', deserialize: 'records' },
        suggestion: { serialize: 'odata-id', deserialize: 'records' }
      };

      return _ember['default'].$.extend(true, {}, parentAttrs, attrs);
    },
    init: function init() {
      this.set('attrs', this.getAttrs());
      this._super.apply(this, arguments);
    }
  });
  exports.Serializer = Serializer;
});
define('ember-app/models/custom-inflector-rules', ['exports', 'ember-inflector'], function (exports, _emberInflector) {

  var inflector = _emberInflector['default'].inflector;

  inflector.irregular('user', 'Users');
  inflector.irregular('vote', 'Votes');
  inflector.irregular('comment', 'Comments');
  inflector.irregular('localization', 'Localizations');
  inflector.irregular('type', 'Types');
  inflector.irregular('file', 'Files');
  inflector.irregular('type', 'Types');
  inflector.irregular('suggestion', 'Suggestions');
  inflector.irregular('vote', 'Votes');

  exports['default'] = {};
});
define('ember-app/models/flexberry-ember-demo-application-user', ['exports', 'ember-app/mixins/regenerated/models/flexberry-ember-demo-application-user', 'ember-flexberry-data'], function (exports, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoApplicationUser, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend(_emberFlexberryData.Offline.ModelMixin, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoApplicationUser.Model, {});
  (0, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoApplicationUser.defineProjections)(Model);
  exports['default'] = Model;
});
define('ember-app/models/flexberry-ember-demo-comment-vote', ['exports', 'ember-app/mixins/regenerated/models/flexberry-ember-demo-comment-vote', 'ember-flexberry-data'], function (exports, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoCommentVote, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend(_emberFlexberryData.Offline.ModelMixin, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoCommentVote.Model, {});
  (0, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoCommentVote.defineProjections)(Model);
  exports['default'] = Model;
});
define('ember-app/models/flexberry-ember-demo-comment', ['exports', 'ember-app/mixins/regenerated/models/flexberry-ember-demo-comment', 'ember-flexberry-data'], function (exports, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoComment, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend(_emberFlexberryData.Offline.ModelMixin, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoComment.Model, {});
  (0, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoComment.defineProjections)(Model);
  exports['default'] = Model;
});
define('ember-app/models/flexberry-ember-demo-localization', ['exports', 'ember-app/mixins/regenerated/models/flexberry-ember-demo-localization', 'ember-flexberry-data'], function (exports, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoLocalization, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend(_emberFlexberryData.Offline.ModelMixin, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoLocalization.Model, {});
  (0, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoLocalization.defineProjections)(Model);
  exports['default'] = Model;
});
define('ember-app/models/flexberry-ember-demo-localized-suggestion-type', ['exports', 'ember-app/mixins/regenerated/models/flexberry-ember-demo-localized-suggestion-type', 'ember-flexberry-data'], function (exports, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoLocalizedSuggestionType, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend(_emberFlexberryData.Offline.ModelMixin, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoLocalizedSuggestionType.Model, {});
  (0, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoLocalizedSuggestionType.defineProjections)(Model);
  exports['default'] = Model;
});
define('ember-app/models/flexberry-ember-demo-offline-user', ['exports', 'ember-app/mixins/regenerated/models/flexberry-ember-demo-offline-user', 'ember-flexberry-data'], function (exports, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoOfflineUser, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend(_emberAppMixinsRegeneratedModelsFlexberryEmberDemoOfflineUser.Model, {});
  (0, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoOfflineUser.defineProjections)(Model);
  exports['default'] = Model;
});
define('ember-app/models/flexberry-ember-demo-suggestion-file', ['exports', 'ember-app/mixins/regenerated/models/flexberry-ember-demo-suggestion-file', 'ember-flexberry-data'], function (exports, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoSuggestionFile, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend(_emberFlexberryData.Offline.ModelMixin, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoSuggestionFile.Model, {});
  (0, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoSuggestionFile.defineProjections)(Model);
  exports['default'] = Model;
});
define('ember-app/models/flexberry-ember-demo-suggestion-type', ['exports', 'ember-app/mixins/regenerated/models/flexberry-ember-demo-suggestion-type', 'ember-flexberry-data'], function (exports, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoSuggestionType, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend(_emberFlexberryData.Offline.ModelMixin, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoSuggestionType.Model, {});
  (0, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoSuggestionType.defineProjections)(Model);
  exports['default'] = Model;
});
define('ember-app/models/flexberry-ember-demo-suggestion', ['exports', 'ember-app/mixins/regenerated/models/flexberry-ember-demo-suggestion', 'ember-flexberry-data'], function (exports, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoSuggestion, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend(_emberFlexberryData.Offline.ModelMixin, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoSuggestion.Model, {});
  (0, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoSuggestion.defineProjections)(Model);
  exports['default'] = Model;
});
define('ember-app/models/flexberry-ember-demo-vote', ['exports', 'ember-app/mixins/regenerated/models/flexberry-ember-demo-vote', 'ember-flexberry-data'], function (exports, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoVote, _emberFlexberryData) {
  var Model = _emberFlexberryData.Projection.Model.extend(_emberFlexberryData.Offline.ModelMixin, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoVote.Model, {});
  (0, _emberAppMixinsRegeneratedModelsFlexberryEmberDemoVote.defineProjections)(Model);
  exports['default'] = Model;
});
define('ember-app/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditEntity) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditEntity['default'];
    }
  });
});
define('ember-app/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditField) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsAuditField['default'];
    }
  });
});
define('ember-app/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsObjectType) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETBusinessAuditObjectsObjectType['default'];
    }
  });
});
define('ember-app/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETSecurityAgent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETSecurityAgent['default'];
    }
  });
});
define('ember-app/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETSecurityLinkGroup) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETSecurityLinkGroup['default'];
    }
  });
});
define('ember-app/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session', ['exports', 'ember-flexberry-data/models/i-c-s-soft-s-t-o-r-m-n-e-t-security-session'], function (exports, _emberFlexberryDataModelsICSSoftSTORMNETSecuritySession) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsICSSoftSTORMNETSecuritySession['default'];
    }
  });
});
define('ember-app/models/i-i-s-caseberry-logging-objects-application-log', ['exports', 'ember-flexberry/models/i-i-s-caseberry-logging-objects-application-log'], function (exports, _emberFlexberryModelsIISCaseberryLoggingObjectsApplicationLog) {
  /**
   * @module ember-flexberry
   */
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryModelsIISCaseberryLoggingObjectsApplicationLog['default'];
    }
  });
});
define('ember-app/models/model', ['exports', 'ember-flexberry-data/models/model'], function (exports, _emberFlexberryDataModelsModel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsModel['default'];
    }
  });
});
define('ember-app/models/new-platform-flexberry-flexberry-user-setting', ['exports', 'ember-flexberry/models/new-platform-flexberry-flexberry-user-setting'], function (exports, _emberFlexberryModelsNewPlatformFlexberryFlexberryUserSetting) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryModelsNewPlatformFlexberryFlexberryUserSetting['default'];
    }
  });
});
define('ember-app/models/new-platform-flexberry-g-i-s-layer-link', ['exports', 'ember-flexberry-gis/models/new-platform-flexberry-g-i-s-layer-link'], function (exports, _emberFlexberryGisModelsNewPlatformFlexberryGISLayerLink) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisModelsNewPlatformFlexberryGISLayerLink['default'];
    }
  });
});
define('ember-app/models/new-platform-flexberry-g-i-s-layer-metadata', ['exports', 'ember-flexberry-gis/models/new-platform-flexberry-g-i-s-layer-metadata'], function (exports, _emberFlexberryGisModelsNewPlatformFlexberryGISLayerMetadata) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisModelsNewPlatformFlexberryGISLayerMetadata['default'];
    }
  });
});
define('ember-app/models/new-platform-flexberry-g-i-s-link-parameter', ['exports', 'ember-flexberry-gis/models/new-platform-flexberry-g-i-s-link-parameter'], function (exports, _emberFlexberryGisModelsNewPlatformFlexberryGISLinkParameter) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisModelsNewPlatformFlexberryGISLinkParameter['default'];
    }
  });
});
define('ember-app/models/new-platform-flexberry-g-i-s-map-layer', ['exports', 'ember-flexberry-gis/models/new-platform-flexberry-g-i-s-map-layer'], function (exports, _emberFlexberryGisModelsNewPlatformFlexberryGISMapLayer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisModelsNewPlatformFlexberryGISMapLayer['default'];
    }
  });
});
define('ember-app/models/new-platform-flexberry-g-i-s-map-object-setting', ['exports', 'ember-flexberry-gis/models/new-platform-flexberry-g-i-s-map-object-setting'], function (exports, _emberFlexberryGisModelsNewPlatformFlexberryGISMapObjectSetting) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisModelsNewPlatformFlexberryGISMapObjectSetting['default'];
    }
  });
});
define('ember-app/models/new-platform-flexberry-g-i-s-map', ['exports', 'ember-flexberry-gis/models/new-platform-flexberry-g-i-s-map'], function (exports, _emberFlexberryGisModelsNewPlatformFlexberryGISMap) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisModelsNewPlatformFlexberryGISMap['default'];
    }
  });
});
define('ember-app/models/new-platform-flexberry-services-lock', ['exports', 'ember-flexberry/models/new-platform-flexberry-services-lock'], function (exports, _emberFlexberryModelsNewPlatformFlexberryServicesLock) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryModelsNewPlatformFlexberryServicesLock['default'];
    }
  });
});
define('ember-app/models/offline-model', ['exports', 'ember-flexberry-data/models/offline-model'], function (exports, _emberFlexberryDataModelsOfflineModel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataModelsOfflineModel['default'];
    }
  });
});
define('ember-app/resolver', ['exports', 'ember-flexberry/resolver'], function (exports, _emberFlexberryResolver) {
  exports['default'] = _emberFlexberryResolver['default'];
});
define('ember-app/router', ['exports', 'ember', 'ember-app/config/environment'], function (exports, _ember, _emberAppConfigEnvironment) {

  var Router = _ember['default'].Router.extend({
    location: _emberAppConfigEnvironment['default'].locationType
  });

  Router.map(function () {
    this.route('flexberry-ember-demo-application-user-l');
    this.route('flexberry-ember-demo-application-user-e', { path: 'flexberry-ember-demo-application-user-e/:id' });
    this.route('flexberry-ember-demo-application-user-e.new', { path: 'flexberry-ember-demo-application-user-e/new' });
    this.route('flexberry-ember-demo-localization-l');
    this.route('flexberry-ember-demo-localization-e', { path: 'flexberry-ember-demo-localization-e/:id' });
    this.route('flexberry-ember-demo-localization-e.new', { path: 'flexberry-ember-demo-localization-e/new' });
    this.route('flexberry-ember-demo-suggestion-l');
    this.route('flexberry-ember-demo-suggestion-e', { path: 'flexberry-ember-demo-suggestion-e/:id' });
    this.route('flexberry-ember-demo-suggestion-e.new', { path: 'flexberry-ember-demo-suggestion-e/new' });
    this.route('flexberry-ember-demo-suggestion-type-l');
    this.route('flexberry-ember-demo-suggestion-type-e', { path: 'flexberry-ember-demo-suggestion-type-e/:id' });
    this.route('flexberry-ember-demo-suggestion-type-e.new', { path: 'flexberry-ember-demo-suggestion-type-e/new' });
    this.route('login');
    this.route('map');
  });

  exports['default'] = Router;
});
define('ember-app/routes/application', ['exports', 'ember', 'ember-flexberry/mixins/modal-application-route'], function (exports, _ember, _emberFlexberryMixinsModalApplicationRoute) {
  exports['default'] = _ember['default'].Route.extend(_emberFlexberryMixinsModalApplicationRoute['default']);
});
define('ember-app/routes/edit-form', ['exports', 'ember-flexberry/routes/edit-form'], function (exports, _emberFlexberryRoutesEditForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesEditForm['default'];
    }
  });
});
define('ember-app/routes/flexberry-ember-demo-application-user-e', ['exports', 'ember-flexberry/routes/edit-form', 'ember-app/mixins/redirect-to-login-mixin'], function (exports, _emberFlexberryRoutesEditForm, _emberAppMixinsRedirectToLoginMixin) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberAppMixinsRedirectToLoginMixin['default'], {
    modelProjection: 'ApplicationUserE',
    modelName: 'flexberry-ember-demo-application-user'
  });
});
define('ember-app/routes/flexberry-ember-demo-application-user-e/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'ApplicationUserE',
    modelName: 'flexberry-ember-demo-application-user',
    templateName: 'flexberry-ember-demo-application-user-e'
  });
});
define('ember-app/routes/flexberry-ember-demo-application-user-l', ['exports', 'ember-flexberry/routes/list-form', 'ember-app/mixins/redirect-to-login-mixin'], function (exports, _emberFlexberryRoutesListForm, _emberAppMixinsRedirectToLoginMixin) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend(_emberAppMixinsRedirectToLoginMixin['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'ApplicationUserL'
    */
    modelProjection: 'ApplicationUserL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'flexberry-ember-demo-application-user'
    */
    modelName: 'flexberry-ember-demo-application-user',

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: { FlexberryEmberDemoApplicationUserL: {} }
  });
});
define('ember-app/routes/flexberry-ember-demo-localization-e', ['exports', 'ember-flexberry/routes/edit-form', 'ember-app/mixins/redirect-to-login-mixin'], function (exports, _emberFlexberryRoutesEditForm, _emberAppMixinsRedirectToLoginMixin) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberAppMixinsRedirectToLoginMixin['default'], {
    modelProjection: 'LocalizationE',
    modelName: 'flexberry-ember-demo-localization'
  });
});
define('ember-app/routes/flexberry-ember-demo-localization-e/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'LocalizationE',
    modelName: 'flexberry-ember-demo-localization',
    templateName: 'flexberry-ember-demo-localization-e'
  });
});
define('ember-app/routes/flexberry-ember-demo-localization-l', ['exports', 'ember-flexberry/routes/list-form', 'ember-app/mixins/redirect-to-login-mixin'], function (exports, _emberFlexberryRoutesListForm, _emberAppMixinsRedirectToLoginMixin) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend(_emberAppMixinsRedirectToLoginMixin['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'LocalizationL'
    */
    modelProjection: 'LocalizationL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'flexberry-ember-demo-localization'
    */
    modelName: 'flexberry-ember-demo-localization',

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: { FlexberryEmberDemoLocalizationL: {} }
  });
});
define('ember-app/routes/flexberry-ember-demo-suggestion-e', ['exports', 'ember-flexberry/routes/edit-form', 'ember-app/mixins/redirect-to-login-mixin'], function (exports, _emberFlexberryRoutesEditForm, _emberAppMixinsRedirectToLoginMixin) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberAppMixinsRedirectToLoginMixin['default'], {
    modelProjection: 'SuggestionE',
    modelName: 'flexberry-ember-demo-suggestion'
  });
});
define('ember-app/routes/flexberry-ember-demo-suggestion-e/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'SuggestionE',
    modelName: 'flexberry-ember-demo-suggestion',
    templateName: 'flexberry-ember-demo-suggestion-e',

    /**
      A hook you can implement to convert the URL into the model for this route.
      [More info](http://emberjs.com/api/classes/Ember.Route.html#method_model).
       @method model
      @param {Object} params
      @param {Object} transition
     */
    model: function model(params) {
      var record = this._super.apply(this, arguments);
      record.set('polygon', params.geojson);
      record.set('date', new Date());

      return record;
    },

    /**
      A hook you can use to setup the controller for the current route.
      [More info](http://emberjs.com/api/classes/Ember.Route.html#method_setupController).
       @method setupController
      @param {<a href="http://emberjs.com/api/classes/Ember.Controller.html">Ember.Controller</a>} controller
      @param {Object} model
    */
    setupController: function setupController(controller) {
      this._super.apply(this, arguments);

      controller.set('geojson', null);
    }
  });
});
define('ember-app/routes/flexberry-ember-demo-suggestion-l', ['exports', 'ember-flexberry/routes/list-form', 'ember-app/mixins/redirect-to-login-mixin'], function (exports, _emberFlexberryRoutesListForm, _emberAppMixinsRedirectToLoginMixin) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend(_emberAppMixinsRedirectToLoginMixin['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionL'
    */
    modelProjection: 'SuggestionL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'flexberry-ember-demo-suggestion'
    */
    modelName: 'flexberry-ember-demo-suggestion',

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: { FlexberryEmberDemoSuggestionL: {} }
  });
});
define('ember-app/routes/flexberry-ember-demo-suggestion-type-e', ['exports', 'ember-flexberry/routes/edit-form', 'ember-app/mixins/redirect-to-login-mixin'], function (exports, _emberFlexberryRoutesEditForm, _emberAppMixinsRedirectToLoginMixin) {
  exports['default'] = _emberFlexberryRoutesEditForm['default'].extend(_emberAppMixinsRedirectToLoginMixin['default'], {
    modelProjection: 'SuggestionTypeE',
    modelName: 'flexberry-ember-demo-suggestion-type'
  });
});
define('ember-app/routes/flexberry-ember-demo-suggestion-type-e/new', ['exports', 'ember-flexberry/routes/edit-form-new'], function (exports, _emberFlexberryRoutesEditFormNew) {
  exports['default'] = _emberFlexberryRoutesEditFormNew['default'].extend({
    modelProjection: 'SuggestionTypeE',
    modelName: 'flexberry-ember-demo-suggestion-type',
    templateName: 'flexberry-ember-demo-suggestion-type-e'
  });
});
define('ember-app/routes/flexberry-ember-demo-suggestion-type-l', ['exports', 'ember-flexberry/routes/list-form', 'ember-app/mixins/redirect-to-login-mixin'], function (exports, _emberFlexberryRoutesListForm, _emberAppMixinsRedirectToLoginMixin) {
  exports['default'] = _emberFlexberryRoutesListForm['default'].extend(_emberAppMixinsRedirectToLoginMixin['default'], {
    /**
      Name of model projection to be used as record's properties limitation.
       @property modelProjection
      @type String
      @default 'SuggestionTypeL'
    */
    modelProjection: 'SuggestionTypeL',

    /**
      Name of model to be used as list's records types.
       @property modelName
      @type String
      @default 'flexberry-ember-demo-suggestion-type'
    */
    modelName: 'flexberry-ember-demo-suggestion-type',

    /**
      Defined user settings developer.
      For default userSetting use empty name ('').
      Property `<componentName>` may contain any of properties: `colsOrder`, `sorting`, `colsWidth` or being empty.
       ```javascript
      {
        <componentName>: {
          <settingName>: {
            colsOrder: [ { propName :<colName>, hide: true|false }, ... ],
            sorting: [{ propName: <colName>, direction: "asc"|"desc" }, ... ],
            colsWidths: [ <colName>:<colWidth>, ... ],
          },
          ...
        },
        ...
      }
      ```
       @property developerUserSettings
      @type Object
      @default {}
    */
    developerUserSettings: { FlexberryEmberDemoSuggestionTypeL: {} }
  });
});
define('ember-app/routes/i-i-s-caseberry-logging-objects-application-log-e', ['exports', 'ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-e'], function (exports, _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogE) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogE['default'];
    }
  });
});
define('ember-app/routes/i-i-s-caseberry-logging-objects-application-log-l', ['exports', 'ember-flexberry/routes/i-i-s-caseberry-logging-objects-application-log-l'], function (exports, _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogL) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesIISCaseberryLoggingObjectsApplicationLogL['default'];
    }
  });
});
define('ember-app/routes/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('ember-app/routes/list-form', ['exports', 'ember-flexberry/routes/list-form'], function (exports, _emberFlexberryRoutesListForm) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesListForm['default'];
    }
  });
});
define('ember-app/routes/login', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    /**
    */
    controllerName: 'application'
  });
});
define('ember-app/routes/map', ['exports', 'ember', 'ember-flexberry-gis/routes/edit-map', 'ember-app/mixins/redirect-to-login-mixin', 'moment', 'ember-flexberry-data'], function (exports, _ember, _emberFlexberryGisRoutesEditMap, _emberAppMixinsRedirectToLoginMixin, _moment, _emberFlexberryData) {
  var Builder = _emberFlexberryData.Query.Builder;

  /**
    Map edit route.
  
    @class MapRoute
    @extends EditMapRoute
    @uses EditFormRouteOperationsIndicationMixin
  */
  exports['default'] = _emberFlexberryGisRoutesEditMap['default'].extend(_emberAppMixinsRedirectToLoginMixin['default'], {
    i18n: _ember['default'].inject.service(),

    translatedSuggestions: _ember['default'].computed('i18n.locale', function () {
      return {
        'address-caption': this.get('i18n').t('forms.flexberry-ember-demo-suggestion-e.address-caption'),
        'text-caption': this.get('i18n').t('forms.flexberry-ember-demo-suggestion-e.text-caption'),
        'date-caption': this.get('i18n').t('forms.flexberry-ember-demo-suggestion-e.date-caption'),
        'moderated-caption': this.get('i18n').t('forms.flexberry-ember-demo-suggestion-e.moderated-caption'),
        'type-caption': this.get('i18n').t('forms.flexberry-ember-demo-suggestion-e.type-caption'),
        'author-caption': this.get('i18n').t('forms.flexberry-ember-demo-suggestion-e.author-caption')
      };
    }),

    model: function model() {
      var _this2 = this;

      var _this = this;
      var builder = new Builder(this.store).from('flexberry-ember-demo-suggestion').selectByProjection('SuggestionE');
      return this.store.query('flexberry-ember-demo-suggestion', builder.build()).then(function (suggestions) {
        var features = [];
        var translatedSuggestions = _this.get('translatedSuggestions');
        suggestions.forEach(function (elem) {
          var geojson = elem.get('polygon');
          if (!_ember['default'].isBlank(geojson)) {
            var points = JSON.parse(geojson);

            if (points.length !== 0) {
              var type = undefined;
              if (_ember['default'].isNone(points[0].length)) {
                type = 'Point';
              } else if (_ember['default'].isNone(points[0][0].length)) {
                type = 'LineString';
              } else {
                type = 'Polygon';
              }

              var date = elem.get('date') ? (0, _moment['default'])(elem.get('date')).format('DD.MM.YYYY') : null;

              var popupContent = '<table><tr><td>' + translatedSuggestions['author-caption'] + ': </td><td>' + (elem.get('author.name') || '-') + '</td></tr>' + ('<tr><td>' + translatedSuggestions['type-caption'] + ': </td><td>' + (elem.get('type.name') || '-') + '</td></tr>') + ('<tr><td>' + translatedSuggestions['date-caption'] + ': </td><td>' + (date || '-') + '</td></tr>') + ('<tr><td>' + translatedSuggestions['address-caption'] + ': </td><td>' + (elem.get('address') || '-') + '</td></tr>') + ('<tr><td>' + translatedSuggestions['text-caption'] + ': </td><td>' + (elem.get('text') || '-') + '</td></tr>') + ('<tr><td>' + translatedSuggestions['moderated-caption'] + ': </td><td>' + elem.get('moderated') + '</td></tr>') + '</table>';

              features.addObject({
                type: 'Feature',
                properties: { suggestionID: elem.get('id'), popupContent: popupContent },
                geometry: {
                  type: '' + type,
                  coordinates: points
                }
              });
            }
          }
        }, _this);

        var layer = _this2.store.createRecord('new-platform-flexberry-g-i-s-map-layer', {
          name: 'Map',
          type: 'tile',
          visibility: true,
          settings: '{"url":"http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png","showOnMinimap":true}',
          coordinateReferenceSystem: '{"code":"EPSG:3857","definition":null}'
        });

        var layer2 = _this2.store.createRecord('new-platform-flexberry-g-i-s-map-layer', {
          name: 'Features',
          type: 'geojson',
          visibility: true,
          settings: '{"geojson":' + JSON.stringify(features) + ',"coordsToLatLng":"function(coords) { return L.latLng(coords[0], coords[1]); }",' + '"style":"function(feature) { return { opacity: 0.65 }; }","showOnMinimap":true,' + '"onEachFeature":"function(feature, layer) { if (feature.properties && feature.properties.popupContent) ' + '{ layer.bindPopup(feature.properties.popupContent); } } "}',
          coordinateReferenceSystem: '{"code":"EPSG:3857","definition":null}'
        });

        var mapProject = _this2.store.createRecord(_this2.get('modelName'), {
          name: 'Test map',
          lat: 58,
          lng: 56.3,
          zoom: 10,
          coordinateReferenceSystem: '{"code":"EPSG:4326"}',
          mapLayer: _ember['default'].A([layer, layer2])
        });

        return mapProject;
      });
    }
  });
});
/**
  @module ember-flexberry-demo
*/
define('ember-app/routes/new-platform-flexberry-services-lock-list', ['exports', 'ember-flexberry/routes/new-platform-flexberry-services-lock-list'], function (exports, _emberFlexberryRoutesNewPlatformFlexberryServicesLockList) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryRoutesNewPlatformFlexberryServicesLockList['default'];
    }
  });
});
define('ember-app/serializers/application-offline', ['exports', 'ember-data', 'ember-flexberry-data'], function (exports, _emberData, _emberFlexberryData) {
  exports['default'] = _emberFlexberryData.Serializer.Offline.extend(_emberData['default'].EmbeddedRecordsMixin, {
    attrs: {}
  });
});
define('ember-app/serializers/application', ['exports', 'ember-flexberry-data'], function (exports, _emberFlexberryData) {
  exports['default'] = _emberFlexberryData.Serializer.Odata.extend({});
});
define('ember-app/serializers/base', ['exports', 'ember-flexberry-data/serializers/base'], function (exports, _emberFlexberryDataSerializersBase) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersBase['default'];
    }
  });
});
define('ember-app/serializers/flexberry-ember-demo-application-user-offline', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-application-user-offline', 'ember-app/serializers/application-offline'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoApplicationUserOffline, _emberAppSerializersApplicationOffline) {
  exports['default'] = _emberAppSerializersApplicationOffline['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoApplicationUserOffline.OfflineSerializer, {});
});
define('ember-app/serializers/flexberry-ember-demo-application-user', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-application-user', 'ember-app/serializers/application'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoApplicationUser, _emberAppSerializersApplication) {
  exports['default'] = _emberAppSerializersApplication['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoApplicationUser.Serializer, {
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
});
define('ember-app/serializers/flexberry-ember-demo-comment-offline', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-comment-offline', 'ember-app/serializers/application-offline'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoCommentOffline, _emberAppSerializersApplicationOffline) {
  exports['default'] = _emberAppSerializersApplicationOffline['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoCommentOffline.OfflineSerializer, {});
});
define('ember-app/serializers/flexberry-ember-demo-comment-vote-offline', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-comment-vote-offline', 'ember-app/serializers/application-offline'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoCommentVoteOffline, _emberAppSerializersApplicationOffline) {
  exports['default'] = _emberAppSerializersApplicationOffline['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoCommentVoteOffline.OfflineSerializer, {});
});
define('ember-app/serializers/flexberry-ember-demo-comment-vote', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-comment-vote', 'ember-app/serializers/application'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoCommentVote, _emberAppSerializersApplication) {
  exports['default'] = _emberAppSerializersApplication['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoCommentVote.Serializer, {
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
});
define('ember-app/serializers/flexberry-ember-demo-comment', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-comment', 'ember-app/serializers/application'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoComment, _emberAppSerializersApplication) {
  exports['default'] = _emberAppSerializersApplication['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoComment.Serializer, {
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
});
define('ember-app/serializers/flexberry-ember-demo-localization-offline', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-localization-offline', 'ember-app/serializers/application-offline'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoLocalizationOffline, _emberAppSerializersApplicationOffline) {
  exports['default'] = _emberAppSerializersApplicationOffline['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoLocalizationOffline.OfflineSerializer, {});
});
define('ember-app/serializers/flexberry-ember-demo-localization', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-localization', 'ember-app/serializers/application'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoLocalization, _emberAppSerializersApplication) {
  exports['default'] = _emberAppSerializersApplication['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoLocalization.Serializer, {
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
});
define('ember-app/serializers/flexberry-ember-demo-localized-suggestion-type-offline', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-localized-suggestion-type-offline', 'ember-app/serializers/application-offline'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoLocalizedSuggestionTypeOffline, _emberAppSerializersApplicationOffline) {
  exports['default'] = _emberAppSerializersApplicationOffline['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoLocalizedSuggestionTypeOffline.OfflineSerializer, {});
});
define('ember-app/serializers/flexberry-ember-demo-localized-suggestion-type', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-localized-suggestion-type', 'ember-app/serializers/application'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoLocalizedSuggestionType, _emberAppSerializersApplication) {
  exports['default'] = _emberAppSerializersApplication['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoLocalizedSuggestionType.Serializer, {
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
});
define('ember-app/serializers/flexberry-ember-demo-offline-user-offline', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-offline-user-offline', 'ember-app/serializers/application-offline'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoOfflineUserOffline, _emberAppSerializersApplicationOffline) {
  exports['default'] = _emberAppSerializersApplicationOffline['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoOfflineUserOffline.OfflineSerializer, {});
});
define('ember-app/serializers/flexberry-ember-demo-offline-user', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-offline-user', 'ember-app/serializers/application'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoOfflineUser, _emberAppSerializersApplication) {
  exports['default'] = _emberAppSerializersApplication['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoOfflineUser.Serializer, {
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
});
define('ember-app/serializers/flexberry-ember-demo-suggestion-file-offline', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-suggestion-file-offline', 'ember-app/serializers/application-offline'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoSuggestionFileOffline, _emberAppSerializersApplicationOffline) {
  exports['default'] = _emberAppSerializersApplicationOffline['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoSuggestionFileOffline.OfflineSerializer, {});
});
define('ember-app/serializers/flexberry-ember-demo-suggestion-file', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-suggestion-file', 'ember-app/serializers/application'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoSuggestionFile, _emberAppSerializersApplication) {
  exports['default'] = _emberAppSerializersApplication['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoSuggestionFile.Serializer, {
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
});
define('ember-app/serializers/flexberry-ember-demo-suggestion-offline', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-suggestion-offline', 'ember-app/serializers/application-offline'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoSuggestionOffline, _emberAppSerializersApplicationOffline) {
  exports['default'] = _emberAppSerializersApplicationOffline['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoSuggestionOffline.OfflineSerializer, {});
});
define('ember-app/serializers/flexberry-ember-demo-suggestion-type-offline', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-suggestion-type-offline', 'ember-app/serializers/application-offline'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoSuggestionTypeOffline, _emberAppSerializersApplicationOffline) {
  exports['default'] = _emberAppSerializersApplicationOffline['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoSuggestionTypeOffline.OfflineSerializer, {});
});
define('ember-app/serializers/flexberry-ember-demo-suggestion-type', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-suggestion-type', 'ember-app/serializers/application'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoSuggestionType, _emberAppSerializersApplication) {
  exports['default'] = _emberAppSerializersApplication['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoSuggestionType.Serializer, {
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
});
define('ember-app/serializers/flexberry-ember-demo-suggestion', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-suggestion', 'ember-app/serializers/application'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoSuggestion, _emberAppSerializersApplication) {
  exports['default'] = _emberAppSerializersApplication['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoSuggestion.Serializer, {
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
});
define('ember-app/serializers/flexberry-ember-demo-vote-offline', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-vote-offline', 'ember-app/serializers/application-offline'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoVoteOffline, _emberAppSerializersApplicationOffline) {
  exports['default'] = _emberAppSerializersApplicationOffline['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoVoteOffline.OfflineSerializer, {});
});
define('ember-app/serializers/flexberry-ember-demo-vote', ['exports', 'ember-app/mixins/regenerated/serializers/flexberry-ember-demo-vote', 'ember-app/serializers/application'], function (exports, _emberAppMixinsRegeneratedSerializersFlexberryEmberDemoVote, _emberAppSerializersApplication) {
  exports['default'] = _emberAppSerializersApplication['default'].extend(_emberAppMixinsRegeneratedSerializersFlexberryEmberDemoVote.Serializer, {
    /**
    * Field name where object identifier is kept.
    */
    primaryKey: '__PrimaryKey'
  });
});
define('ember-app/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntityOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntityOffline['default'];
    }
  });
});
define('ember-app/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntity) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditEntity['default'];
    }
  });
});
define('ember-app/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditFieldOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditFieldOffline['default'];
    }
  });
});
define('ember-app/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditField) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsAuditField['default'];
    }
  });
});
define('ember-app/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectTypeOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectTypeOffline['default'];
    }
  });
});
define('ember-app/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectType) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETBusinessAuditObjectsObjectType['default'];
    }
  });
});
define('ember-app/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent-offline', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent-offline'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgentOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgentOffline['default'];
    }
  });
});
define('ember-app/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-agent'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecurityAgent['default'];
    }
  });
});
define('ember-app/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecurityLinkGroup) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecurityLinkGroup['default'];
    }
  });
});
define('ember-app/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-session', ['exports', 'ember-flexberry-data/serializers/i-c-s-soft-s-t-o-r-m-n-e-t-security-session'], function (exports, _emberFlexberryDataSerializersICSSoftSTORMNETSecuritySession) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersICSSoftSTORMNETSecuritySession['default'];
    }
  });
});
define('ember-app/serializers/i-i-s-caseberry-logging-objects-application-log', ['exports', 'ember-flexberry/serializers/i-i-s-caseberry-logging-objects-application-log'], function (exports, _emberFlexberrySerializersIISCaseberryLoggingObjectsApplicationLog) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySerializersIISCaseberryLoggingObjectsApplicationLog['default'];
    }
  });
});
define('ember-app/serializers/new-platform-flexberry-flexberry-user-setting', ['exports', 'ember-flexberry/serializers/new-platform-flexberry-flexberry-user-setting'], function (exports, _emberFlexberrySerializersNewPlatformFlexberryFlexberryUserSetting) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySerializersNewPlatformFlexberryFlexberryUserSetting['default'];
    }
  });
});
define('ember-app/serializers/new-platform-flexberry-g-i-s-csw-connection', ['exports', 'ember-flexberry-gis/serializers/new-platform-flexberry-g-i-s-csw-connection'], function (exports, _emberFlexberryGisSerializersNewPlatformFlexberryGISCswConnection) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisSerializersNewPlatformFlexberryGISCswConnection['default'];
    }
  });
});
define('ember-app/serializers/new-platform-flexberry-g-i-s-layer-link', ['exports', 'ember-flexberry-gis/serializers/new-platform-flexberry-g-i-s-layer-link'], function (exports, _emberFlexberryGisSerializersNewPlatformFlexberryGISLayerLink) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisSerializersNewPlatformFlexberryGISLayerLink['default'];
    }
  });
});
define('ember-app/serializers/new-platform-flexberry-g-i-s-layer-metadata', ['exports', 'ember-flexberry-gis/serializers/new-platform-flexberry-g-i-s-layer-metadata'], function (exports, _emberFlexberryGisSerializersNewPlatformFlexberryGISLayerMetadata) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisSerializersNewPlatformFlexberryGISLayerMetadata['default'];
    }
  });
});
define('ember-app/serializers/new-platform-flexberry-g-i-s-link-parameter', ['exports', 'ember-flexberry-gis/serializers/new-platform-flexberry-g-i-s-link-parameter'], function (exports, _emberFlexberryGisSerializersNewPlatformFlexberryGISLinkParameter) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisSerializersNewPlatformFlexberryGISLinkParameter['default'];
    }
  });
});
define('ember-app/serializers/new-platform-flexberry-g-i-s-map-layer', ['exports', 'ember-flexberry-gis/serializers/new-platform-flexberry-g-i-s-map-layer'], function (exports, _emberFlexberryGisSerializersNewPlatformFlexberryGISMapLayer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisSerializersNewPlatformFlexberryGISMapLayer['default'];
    }
  });
});
define('ember-app/serializers/new-platform-flexberry-g-i-s-map-object-setting', ['exports', 'ember-flexberry-gis/serializers/new-platform-flexberry-g-i-s-map-object-setting'], function (exports, _emberFlexberryGisSerializersNewPlatformFlexberryGISMapObjectSetting) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisSerializersNewPlatformFlexberryGISMapObjectSetting['default'];
    }
  });
});
define('ember-app/serializers/new-platform-flexberry-g-i-s-map', ['exports', 'ember-flexberry-gis/serializers/new-platform-flexberry-g-i-s-map'], function (exports, _emberFlexberryGisSerializersNewPlatformFlexberryGISMap) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisSerializersNewPlatformFlexberryGISMap['default'];
    }
  });
});
define('ember-app/serializers/new-platform-flexberry-services-lock', ['exports', 'ember-flexberry/serializers/new-platform-flexberry-services-lock'], function (exports, _emberFlexberrySerializersNewPlatformFlexberryServicesLock) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberrySerializersNewPlatformFlexberryServicesLock['default'];
    }
  });
});
define('ember-app/serializers/odata', ['exports', 'ember-flexberry-data/serializers/odata'], function (exports, _emberFlexberryDataSerializersOdata) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersOdata['default'];
    }
  });
});
define('ember-app/serializers/offline', ['exports', 'ember-flexberry-data/serializers/offline'], function (exports, _emberFlexberryDataSerializersOffline) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataSerializersOffline['default'];
    }
  });
});
define('ember-app/services/ajax', ['exports', 'ember-ajax/services/ajax'], function (exports, _emberAjaxServicesAjax) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberAjaxServicesAjax['default'];
    }
  });
});
define('ember-app/services/cols-config-menu', ['exports', 'ember', 'ember-flexberry/services/cols-config-menu', 'ember-app/config/environment'], function (exports, _ember, _emberFlexberryServicesColsConfigMenu, _emberAppConfigEnvironment) {

  var environment = _ember['default'].get(_emberAppConfigEnvironment['default'], 'environment');
  _emberFlexberryServicesColsConfigMenu['default'].reopen({
    environment: environment
  });

  exports['default'] = _emberFlexberryServicesColsConfigMenu['default'];

  // export { default } from 'ember-flexberry/services/cols-config-menu';
});
define('ember-app/services/detail-interaction', ['exports', 'ember-flexberry/services/detail-interaction'], function (exports, _emberFlexberryServicesDetailInteraction) {
  exports['default'] = _emberFlexberryServicesDetailInteraction['default'];
});
define('ember-app/services/device', ['exports', 'ember-flexberry/services/device'], function (exports, _emberFlexberryServicesDevice) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryServicesDevice['default'];
    }
  });
});
define('ember-app/services/dexie', ['exports', 'ember-flexberry-data/services/dexie'], function (exports, _emberFlexberryDataServicesDexie) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataServicesDexie['default'];
    }
  });
});
define('ember-app/services/form-load-time-tracker', ['exports', 'ember-flexberry/services/form-load-time-tracker'], function (exports, _emberFlexberryServicesFormLoadTimeTracker) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryServicesFormLoadTimeTracker['default'];
    }
  });
});
define('ember-app/services/i18n', ['exports', 'ember-i18n/services/i18n'], function (exports, _emberI18nServicesI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nServicesI18n['default'];
    }
  });
});
define('ember-app/services/log', ['exports', 'ember', 'ember-flexberry/services/log', 'ember-app/config/environment'], function (exports, _ember, _emberFlexberryServicesLog, _emberAppConfigEnvironment) {

  var enabled = _ember['default'].get(_emberAppConfigEnvironment['default'], 'APP.log.enabled');
  if (_ember['default'].typeOf(enabled) === 'boolean') {
    _emberFlexberryServicesLog['default'].reopen({
      enabled: enabled
    });
  }

  var storeErrorMessages = _ember['default'].get(_emberAppConfigEnvironment['default'], 'APP.log.storeErrorMessages');
  if (_ember['default'].typeOf(storeErrorMessages) === 'boolean') {
    _emberFlexberryServicesLog['default'].reopen({
      storeErrorMessages: storeErrorMessages
    });
  }

  var storeWarnMessages = _ember['default'].get(_emberAppConfigEnvironment['default'], 'APP.log.storeWarnMessages');
  if (_ember['default'].typeOf(storeWarnMessages) === 'boolean') {
    _emberFlexberryServicesLog['default'].reopen({
      storeWarnMessages: storeWarnMessages
    });
  }

  var storeLogMessages = _ember['default'].get(_emberAppConfigEnvironment['default'], 'APP.log.storeLogMessages');
  if (_ember['default'].typeOf(storeLogMessages) === 'boolean') {
    _emberFlexberryServicesLog['default'].reopen({
      storeLogMessages: storeLogMessages
    });
  }

  var storeInfoMessages = _ember['default'].get(_emberAppConfigEnvironment['default'], 'APP.log.storeInfoMessages');
  if (_ember['default'].typeOf(storeInfoMessages) === 'boolean') {
    _emberFlexberryServicesLog['default'].reopen({
      storeInfoMessages: storeInfoMessages
    });
  }

  var storeDebugMessages = _ember['default'].get(_emberAppConfigEnvironment['default'], 'APP.log.storeDebugMessages');
  if (_ember['default'].typeOf(storeDebugMessages) === 'boolean') {
    _emberFlexberryServicesLog['default'].reopen({
      storeDebugMessages: storeDebugMessages
    });
  }

  var storeDeprecationMessages = _ember['default'].get(_emberAppConfigEnvironment['default'], 'APP.log.storeDeprecationMessages');
  if (_ember['default'].typeOf(storeDeprecationMessages) === 'boolean') {
    _emberFlexberryServicesLog['default'].reopen({
      storeDeprecationMessages: storeDeprecationMessages
    });
  }

  var storePromiseErrors = _ember['default'].get(_emberAppConfigEnvironment['default'], 'APP.log.storePromiseErrors');
  if (_ember['default'].typeOf(storePromiseErrors) === 'boolean') {
    _emberFlexberryServicesLog['default'].reopen({
      storePromiseErrors: storePromiseErrors
    });
  }

  var showPromiseErrors = _ember['default'].get(_emberAppConfigEnvironment['default'], 'APP.log.showPromiseErrors');
  if (_ember['default'].typeOf(showPromiseErrors) === 'boolean') {
    _emberFlexberryServicesLog['default'].reopen({
      showPromiseErrors: showPromiseErrors
    });
  }

  exports['default'] = _emberFlexberryServicesLog['default'];
});
define('ember-app/services/lookup-events', ['exports', 'ember-flexberry/services/lookup-events'], function (exports, _emberFlexberryServicesLookupEvents) {
  exports['default'] = _emberFlexberryServicesLookupEvents['default'];
});
define('ember-app/services/moment', ['exports', 'ember', 'ember-app/config/environment', 'ember-moment/services/moment'], function (exports, _ember, _emberAppConfigEnvironment, _emberMomentServicesMoment) {
  exports['default'] = _emberMomentServicesMoment['default'].extend({
    defaultFormat: _ember['default'].get(_emberAppConfigEnvironment['default'], 'moment.outputFormat')
  });
});
define('ember-app/services/objectlistview-events', ['exports', 'ember-flexberry/services/objectlistview-events'], function (exports, _emberFlexberryServicesObjectlistviewEvents) {
  exports['default'] = _emberFlexberryServicesObjectlistviewEvents['default'];
});
define('ember-app/services/offline-globals', ['exports', 'ember-flexberry-data/services/offline-globals'], function (exports, _emberFlexberryDataServicesOfflineGlobals) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataServicesOfflineGlobals['default'];
    }
  });
});
define('ember-app/services/perf', ['exports', 'ember', 'ember-flexberry/services/perf', 'ember-app/config/environment'], function (exports, _ember, _emberFlexberryServicesPerf, _emberAppConfigEnvironment) {

  var enabled = _ember['default'].get(_emberAppConfigEnvironment['default'], 'APP.perf.enabled');
  if (_ember['default'].typeOf(enabled) === 'boolean') {
    _emberFlexberryServicesPerf['default'].reopen({
      enabled: enabled
    });
  }

  exports['default'] = _emberFlexberryServicesPerf['default'];
});
define('ember-app/services/spatial-bookmark-local-storage', ['exports', 'ember-flexberry-gis/services/spatial-bookmark-local-storage'], function (exports, _emberFlexberryGisServicesSpatialBookmarkLocalStorage) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryGisServicesSpatialBookmarkLocalStorage['default'];
    }
  });
});
define('ember-app/services/store', ['exports', 'ember-flexberry-data', 'ember-app/config/environment'], function (exports, _emberFlexberryData, _emberAppConfigEnvironment) {
  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  exports['default'] = _emberFlexberryData.Offline.Store.reopen(_emberFlexberryData.Projection.StoreMixin, {
    init: function init() {
      this.set('offlineSchema', _defineProperty({}, _emberAppConfigEnvironment['default'].APP.offline.dbName, {
        1: {
          'flexberry-ember-demo-application-user': 'id,name,login,eMail,phone1,phone2,phone3,activated,vK,facebook,twitter,birthday,gender,vip,karma',
          'flexberry-ember-demo-comment-vote': 'id,voteType,applicationUser,comment',
          'flexberry-ember-demo-comment': 'id,text,votes,moderated,author,suggestion,userVotes',
          'flexberry-ember-demo-localization': 'id,name',
          'flexberry-ember-demo-localized-suggestion-type': 'id,name,localization,suggestionType',
          'flexberry-ember-demo-suggestion-file': 'id,order,file,suggestion',
          'flexberry-ember-demo-suggestion-type': 'id,name,moderated,parent,*localizedTypes',
          'flexberry-ember-demo-suggestion': 'id,address,text,date,votes,moderated,latitude,longitude,type,author,*commets,*files,*userVotes',
          'flexberry-ember-demo-vote': 'voteType,applicationUser,suggestion',
          'i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-entity': 'id,objectPrimaryKey,operationTime,operationType,executionResult,source,serializedField,createTime,' + 'creator,editTime,editor,user,objectType,*auditFields',
          'i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-audit-field': 'id,field,caption,oldValue,newValue,mainChange,auditEntity',
          'i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-object-type': 'id,name',
          'i-c-s-soft-s-t-o-r-m-n-e-t-security-agent': 'id,name,login,pwd,isUser,isGroup,isRole,connString,enabled,email,full,read,insert,update,delete,' + 'execute,createTime,creator,editTime,editor',
          'i-c-s-soft-s-t-o-r-m-n-e-t-security-link-group': 'id,createTime,creator,editTime,editor,syncDownTime,readOnly,group,user',
          'i-c-s-soft-s-t-o-r-m-n-e-t-security-session': 'id,createTime,creator,editTime,editor,syncDownTime,readOnly,userKey,startedAt,lastAccess,closed',
          'i-c-s-soft-s-t-o-r-m-n-e-t-security-access': 'id,typeAccess,createTime,creator,editTime,editor,syncDownTime,readOnly,filter,permition',
          'i-c-s-soft-s-t-o-r-m-n-e-t-security-filter': 'id,filterText,name,filterTypeNView,createTime,creator,editTime,editor,syncDownTime,readOnly,subject',
          'i-c-s-soft-s-t-o-r-m-n-e-t-security-impersonalization': 'id,createTime,creator,editTime,editor,syncDownTime,readOnly,user,agent',
          'i-c-s-soft-s-t-o-r-m-n-e-t-security-link-attribute': 'id,createTime,creator,editTime,editor,syncDownTime,readOnly,view,attribute',
          'i-c-s-soft-s-t-o-r-m-n-e-t-security-link-operation': 'id,createTime,creator,editTime,editor,syncDownTime,readOnly,operation,class',
          'i-c-s-soft-s-t-o-r-m-n-e-t-security-link-role': 'id,startDate,endDate,createTime,creator,editTime,editor,syncDownTime,readOnly,role,agent',
          'i-c-s-soft-s-t-o-r-m-n-e-t-security-link-view': 'id,createTime,creator,editTime,editor,syncDownTime,readOnly,view,class',
          'i-c-s-soft-s-t-o-r-m-n-e-t-security-permition': 'id,createTime,creator,editTime,editor,syncDownTime,readOnly,agent,subject,*access',
          'i-c-s-soft-s-t-o-r-m-n-e-t-security-subject': 'id,name,type,isAttribute,isOperation,isView,isClass,sharedOper,full,read,insert,update,delete,' + 'execute,permitted,createTime,creator,editTime,editor,syncDownTime,readOnly',
          'i-i-s-caseberry-logging-objects-application-log': 'id,category,eventId,priority,severity,title,timestamp,machineName,appDomainName,processId,' + 'processName,threadName,win32ThreadId,message,formattedMessage',
          'new-platform-flexberry-flexberry-user-setting': 'id,appName,userName,moduleName,settName,settLastAccessTime,txtVal',
          'new-platform-flexberry-services-lock': 'id,lockKey,userName,lockDate',
          'flexberry-ember-demo-offline-user': 'id,login,password'
        }
      }));
      return this._super.apply(this, arguments);
    },

    offlineModels: {
      'new-platform-flexberry-flexberry-user-setting': true,
      'flexberry-ember-demo-offline-user': true
    }
  });
});
define('ember-app/services/syncer', ['exports', 'ember-flexberry-data/services/syncer'], function (exports, _emberFlexberryDataServicesSyncer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataServicesSyncer['default'];
    }
  });
});
define('ember-app/services/user-settings', ['exports', 'ember', 'ember-flexberry/services/user-settings', 'ember-app/config/environment'], function (exports, _ember, _emberFlexberryServicesUserSettings, _emberAppConfigEnvironment) {

  var enabled = _ember['default'].get(_emberAppConfigEnvironment['default'], 'APP.useUserSettingsService');
  var appName = _ember['default'].get(_emberAppConfigEnvironment['default'], 'APP.name');
  if (_ember['default'].typeOf(enabled) === 'boolean') {
    _emberFlexberryServicesUserSettings['default'].reopen({
      isUserSettingsServiceEnabled: enabled,
      appName: appName
    });
  }

  exports['default'] = _emberFlexberryServicesUserSettings['default'];
});
define('ember-app/services/user', ['exports', 'ember-flexberry-data/services/user'], function (exports, _emberFlexberryDataServicesUser) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataServicesUser['default'];
    }
  });
});
define('ember-app/services/validations', ['exports', 'ember'], function (exports, _ember) {

  var set = _ember['default'].set;

  exports['default'] = _ember['default'].Service.extend({
    init: function init() {
      set(this, 'cache', {});
    }
  });
});
define("ember-app/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["content", "outlet", ["loc", [null, [2, 2], [2, 12]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [3, 2], [3, 20]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 41,
                "column": 4
              },
              "end": {
                "line": 43,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/application.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [42, 25], [42, 32]]]]], [], ["loc", [null, [42, 6], [42, 34]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 84,
                  "column": 10
                },
                "end": {
                  "line": 88,
                  "column": 10
                }
              },
              "moduleName": "ember-app/templates/application.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("option");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element0, 'value');
              morphs[1] = dom.createAttrMorph(element0, 'selected');
              morphs[2] = dom.createMorphAt(element0, 1, 1);
              return morphs;
            },
            statements: [["attribute", "value", ["get", "locale", ["loc", [null, [85, 28], [85, 34]]]]], ["attribute", "selected", ["subexpr", "eq", [["subexpr", "get", [["get", "i18n", ["loc", [null, [85, 56], [85, 60]]]], "locale"], [], ["loc", [null, [85, 51], [85, 70]]]], ["get", "locale", ["loc", [null, [85, 71], [85, 77]]]]], [], ["loc", [null, [85, 46], [85, 79]]]]], ["content", "locale", ["loc", [null, [86, 14], [86, 24]]]]],
            locals: ["locale"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 82,
                "column": 6
              },
              "end": {
                "line": 90,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/application.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("select");
            dom.setAttribute(el1, "class", "ui dropdown");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element1, 'onchange');
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            return morphs;
          },
          statements: [["attribute", "onchange", ["subexpr", "action", [["subexpr", "mut", [["subexpr", "get", [["get", "i18n", ["loc", [null, [83, 64], [83, 68]]]], "locale"], [], ["loc", [null, [83, 59], [83, 78]]]]], [], ["loc", [null, [83, 54], [83, 79]]]]], ["value", "target.value"], ["loc", [null, [83, 45], [83, 102]]]]], ["block", "each", [["get", "locales", ["loc", [null, [84, 18], [84, 25]]]]], [], 0, null, ["loc", [null, [84, 10], [88, 19]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 90,
                "column": 6
              },
              "end": {
                "line": 98,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/application.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-dropdown", [], ["class", "compact", "items", ["subexpr", "@mut", [["get", "locales", ["loc", [null, [93, 16], [93, 23]]]]], [], []], "value", ["subexpr", "@mut", [["get", "i18n.locale", ["loc", [null, [94, 16], [94, 27]]]]], [], []], "placeholder", ["subexpr", "t", ["forms.application.header.menu.language-dropdown.placeholder"], [], ["loc", [null, [95, 22], [95, 87]]]], "direction", "upward"], ["loc", [null, [91, 8], [97, 10]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 103,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "bgw-fix");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "background-logo");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ui top attached");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "ui attached menu");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "ui container flex-container");
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          var el6 = dom.createElement("a");
          dom.setAttribute(el6, "class", "launch icon item");
          var el7 = dom.createTextNode("\n            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createComment("");
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("i");
          dom.setAttribute(el7, "class", "sidebar icon text-menu-1");
          var el8 = dom.createElement("span");
          dom.setAttribute(el8, "class", "text_menu ");
          var el9 = dom.createComment("");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          var el8 = dom.createElement("span");
          dom.setAttribute(el8, "class", "text_menu hidden-menu text-menu-2");
          var el9 = dom.createComment("");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n            ");
          dom.appendChild(el6, el7);
          var el7 = dom.createElement("i");
          dom.setAttribute(el7, "class", "sidebar icon hidden-menu text-menu-2 hidden-text");
          var el8 = dom.createElement("span");
          dom.setAttribute(el8, "class", "text_menu hidden-text");
          var el9 = dom.createComment("");
          dom.appendChild(el8, el9);
          dom.appendChild(el7, el8);
          dom.appendChild(el6, el7);
          var el7 = dom.createTextNode("\n          ");
          dom.appendChild(el6, el7);
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n        ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("a");
          dom.setAttribute(el3, "class", "item logo");
          dom.setAttribute(el3, "href", "https://github.com/flexberry");
          dom.setAttribute(el3, "target", "_blank");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("img");
          dom.setAttribute(el4, "class", "ui centered image");
          dom.setAttribute(el4, "src", "assets/images/flexberry-logo.png");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "page-header-caption");
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "href", "https://github.com/flexberry");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "page-header-userbar");
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "style", "margin:0.5em; background:#FFF linear-gradient(#FFFFFF, #FFF) !important;");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("span");
          dom.setAttribute(el4, "id", "fio");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("button");
          dom.setAttribute(el4, "class", "ui basic button mini custom-button");
          dom.setAttribute(el4, "style", "margin:0.5em; background:#FFF linear-gradient(#FFFFFF, #FFF) !important;");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "id", "example");
          dom.setAttribute(el1, "class", "pusher");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "full height");
          dom.setAttribute(el2, "style", "min-height: 90vh");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "flexberry-content ui attached segment");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("      ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "ui main container");
          var el5 = dom.createTextNode("\n        ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("div");
          dom.setAttribute(el5, "class", "stackable grid container");
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n          ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n        ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui vertical footer segment");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui container flex-container");
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ui text menu");
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("a");
          dom.setAttribute(el4, "class", "brand item");
          dom.setAttribute(el4, "href", "#");
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n    ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "right item");
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "style", "margin-right: 5px;");
          var el6 = dom.createTextNode("\n        ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n      ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n    ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "item lang");
          dom.setAttribute(el4, "style", "margin:0.65em;");
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "style", "margin-right: 5px;");
          var el6 = dom.createTextNode("\n        ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n      ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n    ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "item lang");
          var el5 = dom.createTextNode("\n      ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("label");
          dom.setAttribute(el5, "style", "margin-right: 5px;");
          var el6 = dom.createTextNode("\n        ");
          dom.appendChild(el5, el6);
          var el6 = dom.createComment("");
          dom.appendChild(el5, el6);
          var el6 = dom.createTextNode("\n      ");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n");
          dom.appendChild(el4, el5);
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("    ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n    ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [0, 1]);
          var element3 = dom.childAt(element2, [1, 1, 1, 1]);
          var element4 = dom.childAt(element3, [3]);
          var element5 = dom.childAt(element2, [3]);
          var element6 = dom.childAt(element2, [7]);
          var element7 = dom.childAt(element6, [1]);
          var element8 = dom.childAt(element6, [5]);
          var element9 = dom.childAt(fragment, [2, 1, 1]);
          var element10 = dom.childAt(element9, [3, 1]);
          var element11 = dom.childAt(fragment, [4, 1, 1]);
          var element12 = dom.childAt(element11, [3]);
          var element13 = dom.childAt(element11, [5]);
          var element14 = dom.childAt(element11, [7]);
          var morphs = new Array(24);
          morphs[0] = dom.createAttrMorph(element3, 'title');
          morphs[1] = dom.createElementMorph(element3);
          morphs[2] = dom.createMorphAt(element3, 1, 1);
          morphs[3] = dom.createMorphAt(dom.childAt(element4, [0]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
          morphs[5] = dom.createMorphAt(dom.childAt(element3, [5, 0]), 0, 0);
          morphs[6] = dom.createAttrMorph(element5, 'title');
          morphs[7] = dom.createMorphAt(dom.childAt(element2, [5, 0]), 0, 0);
          morphs[8] = dom.createAttrMorph(element7, 'class');
          morphs[9] = dom.createElementMorph(element7);
          morphs[10] = dom.createMorphAt(element7, 1, 1);
          morphs[11] = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
          morphs[12] = dom.createElementMorph(element8);
          morphs[13] = dom.createMorphAt(element8, 1, 1);
          morphs[14] = dom.createMorphAt(element9, 1, 1);
          morphs[15] = dom.createMorphAt(element10, 1, 1);
          morphs[16] = dom.createMorphAt(element10, 3, 3);
          morphs[17] = dom.createMorphAt(dom.childAt(element11, [1]), 1, 1);
          morphs[18] = dom.createMorphAt(dom.childAt(element12, [1]), 1, 1);
          morphs[19] = dom.createMorphAt(element12, 3, 3);
          morphs[20] = dom.createMorphAt(dom.childAt(element13, [1]), 1, 1);
          morphs[21] = dom.createMorphAt(element13, 3, 3);
          morphs[22] = dom.createMorphAt(dom.childAt(element14, [1]), 1, 1);
          morphs[23] = dom.createMorphAt(element14, 3, 3);
          return morphs;
        },
        statements: [["attribute", "title", ["subexpr", "t", ["forms.application.header.menu.sitemap-button.title"], [], ["loc", [null, [12, 18], [12, 76]]]]], ["element", "action", ["toggleSidebar"], [], ["loc", [null, [10, 13], [10, 39]]]], ["inline", "t", ["forms.application.header.menu.sitemap-button.caption"], [], ["loc", [null, [13, 12], [13, 72]]]], ["inline", "t", ["forms.application.header.menu.show-menu.caption"], [], ["loc", [null, [14, 73], [14, 128]]]], ["inline", "t", ["forms.application.header.menu.hide-menu.caption"], [], ["loc", [null, [14, 183], [14, 238]]]], ["inline", "t", ["forms.application.header.menu.hide-menu.caption"], [], ["loc", [null, [15, 108], [15, 163]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.sitemap.application-name.title"], [], ["loc", [null, [23, 12], [23, 68]]]]], ["inline", "t", ["application-name"], [], ["loc", [null, [26, 76], [26, 100]]]], ["attribute", "class", ["concat", ["ui basic button mini custom-button ", ["subexpr", "unless", [["subexpr", "and", [["get", "login", ["loc", [null, [28, 70], [28, 75]]]], ["subexpr", "and", [["get", "onlineStatus", ["loc", [null, [28, 81], [28, 93]]]], ["subexpr", "not", [["get", "synchronizes", ["loc", [null, [28, 99], [28, 111]]]]], [], ["loc", [null, [28, 94], [28, 112]]]]], [], ["loc", [null, [28, 76], [28, 113]]]]], [], ["loc", [null, [28, 65], [28, 114]]]], "disabled"], [], ["loc", [null, [28, 56], [28, 127]]]], " ", ["subexpr", "if", [["get", "synchronizes", ["loc", [null, [28, 133], [28, 145]]]], "loading"], [], ["loc", [null, [28, 128], [28, 157]]]]]]], ["element", "action", ["syncUp"], [], ["loc", [null, [28, 159], [28, 178]]]], ["inline", "t", ["forms.application.sync-up"], [], ["loc", [null, [29, 8], [29, 41]]]], ["content", "login", ["loc", [null, [31, 21], [31, 30]]]], ["element", "action", [["subexpr", "if", [["get", "login", ["loc", [null, [32, 70], [32, 75]]]], "logout", "goToLoginForm"], [], ["loc", [null, [32, 66], [32, 101]]]]], [], ["loc", [null, [32, 57], [32, 103]]]], ["inline", "t", [["subexpr", "if", [["get", "login", ["loc", [null, [33, 16], [33, 21]]]], "forms.login.logout", "forms.login.caption"], [], ["loc", [null, [33, 12], [33, 65]]]]], [], ["loc", [null, [33, 8], [33, 67]]]], ["block", "ui-sidebar", [], ["class", "inverted vertical main menu", "dimPage", false], 0, null, ["loc", [null, [41, 4], [43, 19]]]], ["content", "outlet", ["loc", [null, [46, 10], [46, 20]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [47, 10], [47, 28]]]], ["inline", "t", ["forms.application.footer.application-name"], [], ["loc", [null, [57, 6], [57, 55]]]], ["inline", "t", ["forms.application.header.menu.user-settings-service-checkbox.caption"], [], ["loc", [null, [61, 8], [61, 84]]]], ["inline", "flexberry-checkbox", [], ["class", "toggle", "value", ["subexpr", "@mut", [["get", "userSettingsService.isUserSettingsServiceEnabled", ["loc", [null, [65, 14], [65, 62]]]]], [], []]], ["loc", [null, [63, 6], [66, 8]]]], ["inline", "if", [["get", "onlineStatus", ["loc", [null, [70, 13], [70, 25]]]], "Online", "Offline"], [], ["loc", [null, [70, 8], [70, 46]]]], ["inline", "ui-checkbox", [], ["checked", ["subexpr", "@mut", [["get", "onlineStatus", ["loc", [null, [73, 16], [73, 28]]]]], [], []], "class", "toggle"], ["loc", [null, [72, 6], [75, 8]]]], ["inline", "t", ["forms.application.header.menu.language-dropdown.caption"], [], ["loc", [null, [79, 8], [79, 71]]]], ["block", "if", [["get", "browserIsInternetExplorer", ["loc", [null, [82, 12], [82, 37]]]]], [], 1, 2, ["loc", [null, [82, 6], [98, 13]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 104,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/application.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "isInAcceptanceTestMode", ["loc", [null, [1, 6], [1, 28]]]]], [], 0, 1, ["loc", [null, [1, 0], [103, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-app/templates/colsconfig-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/colsconfig-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "colsconfig-dialog-content", [], ["model", ["subexpr", "@mut", [["get", "model", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "close", "sortByColumnsConfig", "type", ["subexpr", "@mut", [["get", "message.type", ["loc", [null, [4, 7], [4, 19]]]]], [], []], "closeable", true, "visible", ["subexpr", "@mut", [["get", "message.visible", ["loc", [null, [6, 10], [6, 25]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "message.caption", ["loc", [null, [7, 10], [7, 25]]]]], [], []], "message", ["subexpr", "@mut", [["get", "message.message", ["loc", [null, [8, 10], [8, 25]]]]], [], []]], ["loc", [null, [1, 0], [9, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/colsconfig-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/colsconfig-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "outlet", ["modal-content"], [], ["loc", [null, [9, 2], [9, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/colsconfig-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "sizeClass", "small", "close", "removeModalDialog", "created", "createdModalDialog", "useOkButton", false, "useCloseButton", false], 0, null, ["loc", [null, [1, 0], [10, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/components/colsconfig-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 46,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/colsconfig-dialog-content.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createElement("td");
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "colsConfigHidden", "false");
          dom.setAttribute(el3, "style", "cursor:pointer");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "ui icon tiny button");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "chevron up icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          dom.setAttribute(el3, "class", "ui icon tiny button no-margin");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("i");
          dom.setAttribute(el4, "class", "chevron down icon");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "class", "sort-direction-cell");
          var el3 = dom.createElement("select");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("option");
          dom.setAttribute(el4, "value", "0");
          var el5 = dom.createTextNode("-");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("option");
          dom.setAttribute(el4, "value", "1");
          var el5 = dom.createTextNode("▲");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("option");
          dom.setAttribute(el4, "value", "-1");
          var el5 = dom.createTextNode("▼");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("input");
          dom.setAttribute(el4, "size", "2");
          dom.setAttribute(el4, "type", "input");
          dom.setAttribute(el4, "style", "");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          var el4 = dom.createTextNode("\n                ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("input");
          dom.setAttribute(el4, "size", "2");
          dom.setAttribute(el4, "class", "columnWidth");
          dom.setAttribute(el4, "type", "input");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n              ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [0, 0]);
          var element3 = dom.childAt(element1, [1]);
          var element4 = dom.childAt(element3, [1]);
          var element5 = dom.childAt(element3, [2]);
          var element6 = dom.childAt(element1, [2]);
          var element7 = dom.childAt(element1, [3, 0]);
          var element8 = dom.childAt(element7, [1]);
          var element9 = dom.childAt(element7, [3]);
          var element10 = dom.childAt(element7, [5]);
          var element11 = dom.childAt(element1, [4]);
          var element12 = dom.childAt(element11, [1]);
          var element13 = dom.childAt(element12, [1]);
          var element14 = dom.childAt(element1, [5]);
          var element15 = dom.childAt(element14, [1]);
          var element16 = dom.childAt(element15, [1]);
          var morphs = new Array(32);
          morphs[0] = dom.createAttrMorph(element1, 'id');
          morphs[1] = dom.createAttrMorph(element1, 'propName');
          morphs[2] = dom.createAttrMorph(element2, 'id');
          morphs[3] = dom.createAttrMorph(element2, 'class');
          morphs[4] = dom.createElementMorph(element2);
          morphs[5] = dom.createAttrMorph(element3, 'class');
          morphs[6] = dom.createAttrMorph(element4, 'id');
          morphs[7] = dom.createElementMorph(element4);
          morphs[8] = dom.createAttrMorph(element5, 'id');
          morphs[9] = dom.createElementMorph(element5);
          morphs[10] = dom.createAttrMorph(element6, 'class');
          morphs[11] = dom.createMorphAt(element6, 0, 0);
          morphs[12] = dom.createAttrMorph(element7, 'class');
          morphs[13] = dom.createAttrMorph(element7, 'id');
          morphs[14] = dom.createAttrMorph(element7, 'name');
          morphs[15] = dom.createElementMorph(element7);
          morphs[16] = dom.createAttrMorph(element8, 'selected');
          morphs[17] = dom.createAttrMorph(element9, 'selected');
          morphs[18] = dom.createAttrMorph(element10, 'selected');
          morphs[19] = dom.createAttrMorph(element11, 'class');
          morphs[20] = dom.createAttrMorph(element12, 'class');
          morphs[21] = dom.createAttrMorph(element13, 'id');
          morphs[22] = dom.createAttrMorph(element13, 'class');
          morphs[23] = dom.createAttrMorph(element13, 'disabled');
          morphs[24] = dom.createAttrMorph(element13, 'value');
          morphs[25] = dom.createAttrMorph(element13, 'prevValue');
          morphs[26] = dom.createElementMorph(element13);
          morphs[27] = dom.createAttrMorph(element14, 'class');
          morphs[28] = dom.createAttrMorph(element15, 'class');
          morphs[29] = dom.createAttrMorph(element16, 'id');
          morphs[30] = dom.createAttrMorph(element16, 'value');
          morphs[31] = dom.createElementMorph(element16);
          return morphs;
        },
        statements: [["attribute", "id", ["concat", [["get", "colDesc.trId", ["loc", [null, [15, 20], [15, 32]]]]]]], ["attribute", "propName", ["concat", [["get", "colDesc.propName", ["loc", [null, [15, 48], [15, 64]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.hideId", ["loc", [null, [16, 26], [16, 40]]]]]]], ["attribute", "class", ["concat", ["large ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [16, 62], [16, 74]]]], "hide", "unhide"], [], ["loc", [null, [16, 57], [16, 92]]]], " icon"]]], ["element", "action", ["invertVisibility", ["get", "n", ["loc", [null, [16, 150], [16, 151]]]]], [], ["loc", [null, [16, 122], [16, 153]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [17, 29], [17, 41]]]], "disabled", ""], [], ["loc", [null, [17, 24], [17, 57]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.rowUpId", ["loc", [null, [18, 49], [18, 64]]]]]]], ["element", "action", ["rowUp", ["get", "n", ["loc", [null, [18, 39], [18, 40]]]]], [], ["loc", [null, [18, 22], [18, 42]]]], ["attribute", "id", ["concat", [["get", "colDesc.rowDownId", ["loc", [null, [21, 53], [21, 70]]]]]]], ["element", "action", ["rowDown", ["get", "n", ["loc", [null, [21, 42], [21, 43]]]]], [], ["loc", [null, [21, 23], [21, 45]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [25, 29], [25, 41]]]], "disabled", ""], [], ["loc", [null, [25, 24], [25, 57]]]]]]], ["content", "colDesc.name", ["loc", [null, [25, 59], [25, 75]]]], ["attribute", "class", ["concat", ["ui compact dropdown selection sort-direction-dropdown ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [27, 89], [27, 101]]]], "disabled", ""], [], ["loc", [null, [27, 84], [27, 117]]]], " ", ["subexpr", "if", [["get", "colDesc.isHasMany", ["loc", [null, [27, 123], [27, 140]]]], "hidden", ""], [], ["loc", [null, [27, 118], [27, 154]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.sortOrderId", ["loc", [null, [27, 163], [27, 182]]]]]]], ["attribute", "name", ["concat", ["sortorder[", ["get", "colDesc.name", ["loc", [null, [27, 204], [27, 216]]]], "]"]]], ["element", "action", ["setSortOrder", ["get", "n", ["loc", [null, [27, 245], [27, 246]]]]], ["on", "change"], ["loc", [null, [27, 221], [27, 260]]]], ["attribute", "selected", ["concat", [["get", "colDesc.sortOrderNot", ["loc", [null, [28, 36], [28, 56]]]]]]], ["attribute", "selected", ["concat", [["get", "colDesc.sortOrderAsc", ["loc", [null, [29, 36], [29, 56]]]]]]], ["attribute", "selected", ["concat", [["get", "colDesc.sortOrderDesc", ["loc", [null, [30, 36], [30, 57]]]]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [33, 29], [33, 41]]]], "disabled", ""], [], ["loc", [null, [33, 24], [33, 57]]]]]]], ["attribute", "class", ["concat", ["ui input ", ["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [34, 40], [34, 52]]]], "disabled", ""], [], ["loc", [null, [34, 35], [34, 68]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.sortPriorityId", ["loc", [null, [35, 29], [35, 51]]]]]]], ["attribute", "class", ["concat", ["sortPriority ", ["subexpr", "if", [["get", "colDesc.sortOrder", ["loc", [null, [35, 89], [35, 106]]]], "", "hidden"], [], ["loc", [null, [35, 84], [35, 120]]]]]]], ["attribute", "disabled", ["concat", [["subexpr", "if", [["get", "colDesc.sortOrder", ["loc", [null, [35, 137], [35, 154]]]], "", "disabled"], [], ["loc", [null, [35, 132], [35, 170]]]]]]], ["attribute", "value", ["concat", [["get", "colDesc.sortPriority", ["loc", [null, [35, 181], [35, 201]]]]]]], ["attribute", "prevValue", ["concat", [["get", "colDesc.sortPriority", ["loc", [null, [36, 76], [36, 96]]]]]]], ["element", "action", ["setSortPriority", ["get", "n", ["loc", [null, [36, 45], [36, 46]]]]], ["on", "focusOut"], ["loc", [null, [36, 18], [36, 62]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "colDesc.hide", ["loc", [null, [39, 29], [39, 41]]]], "disabled", ""], [], ["loc", [null, [39, 24], [39, 57]]]]]]], ["attribute", "class", ["concat", ["ui input ", ["subexpr", "if", [["subexpr", "or", [["get", "colDesc.hide", ["loc", [null, [40, 44], [40, 56]]]], ["subexpr", "or", [["get", "exportParams.isExportExcel", ["loc", [null, [40, 61], [40, 87]]]], ["subexpr", "or", [["get", "colDesc.fixed", ["loc", [null, [40, 92], [40, 105]]]], ["subexpr", "not", [["get", "saveColWidthState", ["loc", [null, [40, 111], [40, 128]]]]], [], ["loc", [null, [40, 106], [40, 129]]]]], [], ["loc", [null, [40, 88], [40, 130]]]]], [], ["loc", [null, [40, 57], [40, 131]]]]], [], ["loc", [null, [40, 40], [40, 132]]]], "disabled", ""], [], ["loc", [null, [40, 35], [40, 148]]]]]]], ["attribute", "id", ["concat", [["get", "colDesc.columnWidthId", ["loc", [null, [41, 29], [41, 50]]]]]]], ["attribute", "value", ["concat", [["get", "colDesc.columnWidth", ["loc", [null, [41, 92], [41, 111]]]]]]], ["element", "action", ["widthChanged"], ["on", "focusOut"], ["loc", [null, [41, 128], [41, 168]]]]],
        locals: ["colDesc", "n"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 49,
              "column": 10
            },
            "end": {
              "line": 64,
              "column": 10
            }
          },
          "moduleName": "ember-app/templates/components/colsconfig-dialog-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createElement("th");
          dom.setAttribute(el2, "colspan", "6");
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n              ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 0]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          return morphs;
        },
        statements: [["inline", "flexberry-checkbox", [], ["label", ["subexpr", "t", ["components.colsconfig-dialog-content.det-separate-cols"], [], ["loc", [null, [53, 22], [53, 82]]]], "value", ["subexpr", "@mut", [["get", "exportParams.detSeparateCols", ["loc", [null, [54, 22], [54, 50]]]]], [], []], "onChange", ["subexpr", "action", ["detSeparateColsChange"], [], ["loc", [null, [55, 25], [55, 57]]]]], ["loc", [null, [52, 14], [56, 16]]]], ["inline", "flexberry-checkbox", [], ["label", ["subexpr", "t", ["components.colsconfig-dialog-content.det-separate-rows"], [], ["loc", [null, [58, 22], [58, 82]]]], "value", ["subexpr", "@mut", [["get", "exportParams.detSeparateRows", ["loc", [null, [59, 22], [59, 50]]]]], [], []], "onChange", ["subexpr", "action", ["detSeparateRowsChange"], [], ["loc", [null, [60, 25], [60, 57]]]]], ["loc", [null, [57, 14], [61, 16]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 107,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/colsconfig-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("table");
        dom.setAttribute(el2, "class", "ui unstackable fixed selectable celled table");
        var el3 = dom.createElement("thead");
        var el4 = dom.createElement("tr");
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "show-columns");
        dom.setAttribute(el5, "style", "cursor:default");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "large hide icon");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "columns-order");
        dom.setAttribute(el5, "style", "cursor:default");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "large sort icon");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "style", "cursor:default");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "sort-direction");
        dom.setAttribute(el5, "style", "cursor:default");
        var el6 = dom.createElement("nobr");
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "large sort content ascending icon");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "large sort content descending icon");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "sort-priority");
        dom.setAttribute(el5, "style", "cursor:default");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "large ordered list icon");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "class", "column-width");
        dom.setAttribute(el5, "style", "cursor:default");
        var el6 = dom.createElement("i");
        dom.setAttribute(el6, "class", "large text width icon");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tbody");
        dom.setAttribute(el3, "id", "colsConfigtableRows");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("        ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tfoot");
        dom.setAttribute(el3, "class", "full-width");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("          ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "colspan", "5");
        dom.setAttribute(el5, "style", "text-align:right");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("\n              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "colspan", "5");
        dom.setAttribute(el5, "style", "text-align:right");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("th");
        var el6 = dom.createTextNode("\n              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ui input");
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("input");
        dom.setAttribute(el7, "id", "perPageValueInput");
        dom.setAttribute(el7, "size", "2");
        dom.setAttribute(el7, "class", "perPage");
        dom.setAttribute(el7, "type", "input");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("tr");
        var el5 = dom.createElement("th");
        dom.setAttribute(el5, "colspan", "6");
        var el6 = dom.createTextNode("\n              ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "class", "ui action input");
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("input");
        dom.setAttribute(el7, "id", "columnConfigurtionSettingName");
        dom.setAttribute(el7, "type", "input");
        dom.setAttribute(el7, "name", "configName");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n                ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("div");
        dom.setAttribute(el7, "id", "columnConfigurtionButtonSave");
        dom.setAttribute(el7, "class", "ui small button disabled");
        var el8 = dom.createTextNode("\n                  ");
        dom.appendChild(el7, el8);
        var el8 = dom.createComment("");
        dom.appendChild(el7, el8);
        var el8 = dom.createTextNode("\n                ");
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n              ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n                ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("div");
        dom.setAttribute(el6, "id", "columnConfigurtionButtonUse");
        dom.setAttribute(el6, "class", "ui right floated button");
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n            ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n      ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "class", "hidden download-anchor");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element17 = dom.childAt(fragment, [0]);
        var element18 = dom.childAt(element17, [1]);
        var element19 = dom.childAt(element18, [0, 0]);
        var element20 = dom.childAt(element19, [0]);
        var element21 = dom.childAt(element19, [1, 0]);
        var element22 = dom.childAt(element19, [2]);
        var element23 = dom.childAt(element19, [3]);
        var element24 = dom.childAt(element19, [4]);
        var element25 = dom.childAt(element19, [5]);
        var element26 = dom.childAt(element18, [2]);
        var element27 = dom.childAt(element26, [3]);
        var element28 = dom.childAt(element26, [4]);
        var element29 = dom.childAt(element28, [1, 1, 1]);
        var element30 = dom.childAt(element26, [5, 0]);
        var element31 = dom.childAt(element30, [1]);
        var element32 = dom.childAt(element31, [1]);
        var element33 = dom.childAt(element31, [3]);
        var element34 = dom.childAt(element30, [3]);
        var morphs = new Array(25);
        morphs[0] = dom.createAttrMorph(element17, 'class');
        morphs[1] = dom.createAttrMorph(element20, 'title');
        morphs[2] = dom.createAttrMorph(element21, 'title');
        morphs[3] = dom.createAttrMorph(element22, 'title');
        morphs[4] = dom.createMorphAt(element22, 0, 0);
        morphs[5] = dom.createAttrMorph(element23, 'title');
        morphs[6] = dom.createAttrMorph(element24, 'title');
        morphs[7] = dom.createAttrMorph(element25, 'title');
        morphs[8] = dom.createMorphAt(dom.childAt(element18, [1]), 1, 1);
        morphs[9] = dom.createMorphAt(element26, 1, 1);
        morphs[10] = dom.createAttrMorph(element27, 'class');
        morphs[11] = dom.createMorphAt(dom.childAt(element27, [0]), 0, 0);
        morphs[12] = dom.createMorphAt(dom.childAt(element27, [1]), 1, 1);
        morphs[13] = dom.createAttrMorph(element28, 'class');
        morphs[14] = dom.createMorphAt(dom.childAt(element28, [0]), 0, 0);
        morphs[15] = dom.createAttrMorph(element29, 'value');
        morphs[16] = dom.createElementMorph(element29);
        morphs[17] = dom.createAttrMorph(element32, 'placeholder');
        morphs[18] = dom.createAttrMorph(element32, 'value');
        morphs[19] = dom.createElementMorph(element32);
        morphs[20] = dom.createElementMorph(element33);
        morphs[21] = dom.createMorphAt(element33, 1, 1);
        morphs[22] = dom.createElementMorph(element34);
        morphs[23] = dom.createMorphAt(element34, 0, 0);
        morphs[24] = dom.createMorphAt(element17, 3, 3);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ui form ", ["get", "state", ["loc", [null, [1, 22], [1, 27]]]], " flexberry-colsconfig content"]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.dont-show-columns"], [], ["loc", [null, [5, 43], [5, 105]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.columns-order"], [], ["loc", [null, [6, 94], [6, 152]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.column-name"], [], ["loc", [null, [7, 22], [7, 78]]]]]]], ["inline", "t", ["components.colsconfig-dialog-content.column-name"], [], ["loc", [null, [7, 103], [7, 159]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.sort-direction"], [], ["loc", [null, [8, 45], [8, 104]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.sort-priority"], [], ["loc", [null, [9, 44], [9, 102]]]]]]], ["attribute", "title", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.column-width"], [], ["loc", [null, [10, 43], [10, 100]]]]]]], ["block", "each", [["get", "modelForDOM", ["loc", [null, [14, 8], [14, 19]]]]], [], 0, null, ["loc", [null, [14, 0], [46, 9]]]], ["block", "if", [["get", "exportParams.isExportExcel", ["loc", [null, [49, 16], [49, 42]]]]], [], 1, null, ["loc", [null, [49, 10], [64, 17]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "exportParams.isExportExcel", ["loc", [null, [65, 26], [65, 52]]]], "hidden", ""], [], ["loc", [null, [65, 21], [65, 66]]]]]]], ["inline", "t", ["components.colsconfig-dialog-content.col-width-on"], [], ["loc", [null, [66, 52], [66, 109]]]], ["inline", "flexberry-checkbox", [], ["class", "toggle", "value", ["subexpr", "@mut", [["get", "saveColWidthState", ["loc", [null, [70, 22], [70, 39]]]]], [], []]], ["loc", [null, [68, 14], [71, 16]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "exportParams.isExportExcel", ["loc", [null, [74, 27], [74, 53]]]], "hidden", ""], [], ["loc", [null, [74, 22], [74, 67]]]]]]], ["inline", "t", ["components.colsconfig-dialog-content.per-page"], [], ["loc", [null, [75, 52], [75, 105]]]], ["attribute", "value", ["concat", [["get", "perPageValue", ["loc", [null, [78, 78], [78, 90]]]]]]], ["element", "action", ["perPageChanged"], ["on", "focusOut"], ["loc", [null, [78, 107], [78, 149]]]], ["attribute", "placeholder", ["concat", [["subexpr", "t", ["components.colsconfig-dialog-content.enter-setting-name"], [], ["loc", [null, [87, 31], [87, 94]]]]]]], ["attribute", "value", ["concat", [["get", "settingName", ["loc", [null, [87, 105], [87, 116]]]]]]], ["element", "action", ["setConfigName", ["get", "n", ["loc", [null, [88, 43], [88, 44]]]]], ["on", "change"], ["loc", [null, [88, 18], [88, 58]]]], ["element", "action", ["saveColsSetting"], [], ["loc", [null, [89, 88], [89, 116]]]], ["inline", "t", ["components.colsconfig-dialog-content.save"], [], ["loc", [null, [90, 18], [90, 67]]]], ["element", "action", ["apply"], [], ["loc", [null, [93, 86], [93, 104]]]], ["inline", "if", [["get", "exportParams.isExportExcel", ["loc", [null, [93, 110], [93, 136]]]], ["subexpr", "t", ["components.colsconfig-dialog-content.export"], [], ["loc", [null, [93, 137], [93, 186]]]], ["subexpr", "t", ["components.colsconfig-dialog-content.use"], [], ["loc", [null, [93, 187], [93, 233]]]]], [], ["loc", [null, [93, 105], [93, 235]]]], ["inline", "ui-message", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [99, 13], [99, 17]]]]], [], []], "closeable", ["subexpr", "@mut", [["get", "closeable", ["loc", [null, [100, 18], [100, 27]]]]], [], []], "visible", ["subexpr", "@mut", [["get", "visible", ["loc", [null, [101, 16], [101, 23]]]]], [], []], "caption", ["subexpr", "@mut", [["get", "caption", ["loc", [null, [102, 16], [102, 23]]]]], [], []], "message", ["subexpr", "@mut", [["get", "message", ["loc", [null, [103, 16], [103, 23]]]]], [], []]], ["loc", [null, [98, 6], [104, 8]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-app/templates/components/flexberry-checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.setAttribute(el1, "type", "checkbox");
        dom.setAttribute(el1, "class", "flexberry-checkbox-input");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        dom.setAttribute(el1, "class", "flexberry-checkbox-label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        if (this.cachedFragment) {
          dom.repairClonedNode(dom.childAt(fragment, [0]), [], true);
        }
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'checked');
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "checked", ["subexpr", "get", [["get", "this", ["loc", [null, [1, 70], [1, 74]]]], "value"], [], ["loc", [null, [1, 64], [1, 84]]]]], ["content", "label", ["loc", [null, [2, 40], [2, 49]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/components/flexberry-datepicker", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-datepicker.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("i");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [2, 7], [2, 11]]]]], [], []], "class", ["subexpr", "@mut", [["get", "classes", ["loc", [null, [3, 8], [3, 15]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [4, 11], [4, 19]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [5, 11], [5, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [6, 14], [6, 25]]]]], [], []]], ["loc", [null, [1, 0], [7, 2]]]], ["attribute", "class", ["concat", ["calendar ", ["subexpr", "unless", [["get", "readonly", ["loc", [null, [8, 28], [8, 36]]]], "link"], [], ["loc", [null, [8, 19], [8, 45]]]], " icon"]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/components/flexberry-dropdown", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 2
              },
              "end": {
                "line": 29,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("input");
            dom.setAttribute(el1, "class", "search");
            dom.setAttribute(el1, "autocomplete", "off");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 2
              },
              "end": {
                "line": 33,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("input");
            dom.setAttribute(el1, "class", "search");
            dom.setAttribute(el1, "autocomplete", "off");
            dom.setAttribute(el1, "readonly", "");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 36,
                "column": 2
              },
              "end": {
                "line": 38,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "default text");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "placeholder", ["loc", [null, [37, 30], [37, 45]]]]],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 38,
                "column": 2
              },
              "end": {
                "line": 40,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "text");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "text", ["loc", [null, [39, 22], [39, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 43,
                  "column": 6
                },
                "end": {
                  "line": 45,
                  "column": 6
                }
              },
              "moduleName": "ember-app/templates/components/flexberry-dropdown.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "item");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'data-value');
              morphs[1] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["attribute", "data-value", ["concat", [["get", "value", ["loc", [null, [44, 40], [44, 45]]]]]]], ["content", "value", ["loc", [null, [44, 49], [44, 58]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 45,
                  "column": 6
                },
                "end": {
                  "line": 47,
                  "column": 6
                }
              },
              "moduleName": "ember-app/templates/components/flexberry-dropdown.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "item");
              dom.setAttribute(el1, "data-value", "_");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
              return morphs;
            },
            statements: [["content", "value", ["loc", [null, [46, 41], [46, 50]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 42,
                "column": 4
              },
              "end": {
                "line": 48,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-dropdown.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "value", ["loc", [null, [43, 12], [43, 17]]]]], [], 0, 1, ["loc", [null, [43, 6], [47, 13]]]]],
          locals: ["key", "value"],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type", "multiple-nodes"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 50,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-dropdown.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "dropdown icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "menu");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 6, 6, contextualElement);
          morphs[3] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "and", [["get", "isSearch", ["loc", [null, [27, 13], [27, 21]]]], ["get", "isSearchReadOnly", ["loc", [null, [27, 22], [27, 38]]]]], [], ["loc", [null, [27, 8], [27, 39]]]]], [], 0, null, ["loc", [null, [27, 2], [29, 9]]]], ["block", "if", [["subexpr", "and", [["get", "isSearch", ["loc", [null, [31, 13], [31, 21]]]], ["subexpr", "not", [["get", "isSearchReadOnly", ["loc", [null, [31, 27], [31, 43]]]]], [], ["loc", [null, [31, 22], [31, 44]]]]], [], ["loc", [null, [31, 8], [31, 45]]]]], [], 1, null, ["loc", [null, [31, 2], [33, 9]]]], ["block", "if", [["get", "showPlaceholder", ["loc", [null, [36, 8], [36, 23]]]]], [], 2, 3, ["loc", [null, [36, 2], [40, 9]]]], ["block", "each-in", [["get", "_items", ["loc", [null, [42, 15], [42, 21]]]]], [], 4, null, ["loc", [null, [42, 4], [48, 16]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 51,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-dropdown.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ui-dropdown", [], ["class", ["subexpr", "concat", ["flexberry-dropdown ", ["get", "class", ["loc", [null, [2, 38], [2, 43]]]], " selection", ["subexpr", "if", [["get", "readonly", ["loc", [null, [2, 61], [2, 69]]]], " disabled", ""], [], ["loc", [null, [2, 57], [2, 85]]]]], [], ["loc", [null, [2, 8], [2, 86]]]], "onChange", ["subexpr", "action", ["onChange"], [], ["loc", [null, [3, 11], [3, 30]]]], "onHide", ["subexpr", "action", ["onShowHide"], [], ["loc", [null, [4, 9], [4, 30]]]], "onShow", ["subexpr", "action", ["onShowHide"], [], ["loc", [null, [5, 9], [5, 30]]]], "on", ["subexpr", "@mut", [["get", "on", ["loc", [null, [6, 5], [6, 7]]]]], [], []], "allowReselection", ["subexpr", "@mut", [["get", "allowReselection", ["loc", [null, [7, 19], [7, 35]]]]], [], []], "allowAdditions", ["subexpr", "@mut", [["get", "allowAdditions", ["loc", [null, [8, 17], [8, 31]]]]], [], []], "hideAdditions", ["subexpr", "@mut", [["get", "hideAdditions", ["loc", [null, [9, 16], [9, 29]]]]], [], []], "minCharacters", ["subexpr", "@mut", [["get", "minCharacters", ["loc", [null, [10, 16], [10, 29]]]]], [], []], "match", ["subexpr", "@mut", [["get", "match", ["loc", [null, [11, 8], [11, 13]]]]], [], []], "selectOnKeydown", ["subexpr", "@mut", [["get", "selectOnKeydown", ["loc", [null, [12, 18], [12, 33]]]]], [], []], "forceSelection", ["subexpr", "@mut", [["get", "forceSelection", ["loc", [null, [13, 17], [13, 31]]]]], [], []], "allowCategorySelection", ["subexpr", "@mut", [["get", "allowCategorySelection", ["loc", [null, [14, 25], [14, 47]]]]], [], []], "direction", ["subexpr", "@mut", [["get", "direction", ["loc", [null, [15, 12], [15, 21]]]]], [], []], "keepOnScreen", ["subexpr", "@mut", [["get", "keepOnScreen", ["loc", [null, [16, 15], [16, 27]]]]], [], []], "context", ["subexpr", "@mut", [["get", "context", ["loc", [null, [17, 10], [17, 17]]]]], [], []], "fullTextSearch", ["subexpr", "@mut", [["get", "fullTextSearch", ["loc", [null, [18, 17], [18, 31]]]]], [], []], "preserveHTML", ["subexpr", "@mut", [["get", "preserveHTML", ["loc", [null, [19, 15], [19, 27]]]]], [], []], "sortSelect", ["subexpr", "@mut", [["get", "sortSelect", ["loc", [null, [20, 13], [20, 23]]]]], [], []], "showOnFocus", ["subexpr", "@mut", [["get", "showOnFocus", ["loc", [null, [21, 14], [21, 25]]]]], [], []], "allowTab", ["subexpr", "@mut", [["get", "allowTab", ["loc", [null, [22, 11], [22, 19]]]]], [], []], "transition", ["subexpr", "@mut", [["get", "transition", ["loc", [null, [23, 13], [23, 23]]]]], [], []], "duration", ["subexpr", "@mut", [["get", "duration", ["loc", [null, [24, 11], [24, 19]]]]], [], []], "action", ["subexpr", "@mut", [["get", "action", ["loc", [null, [25, 9], [25, 15]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [50, 16]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/components/flexberry-field", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-field.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("label");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["content", "label", ["loc", [null, [2, 7], [2, 16]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-field.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "label", ["loc", [null, [1, 6], [1, 11]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["inline", "flexberry-textbox", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [5, 7], [5, 11]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [6, 8], [6, 13]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [7, 15], [7, 23]]]], "readonly"], [], ["loc", [null, [7, 11], [7, 35]]]], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [8, 11], [8, 19]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [9, 14], [9, 25]]]]], [], []]], ["loc", [null, [4, 0], [10, 2]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/components/flexberry-file", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "add outline square icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element6, 'class');
            morphs[1] = dom.createAttrMorph(element6, 'title');
            morphs[2] = dom.createAttrMorph(element6, 'for');
            morphs[3] = dom.createElementMorph(element6);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["flexberry-file-add-button ui icon ", ["get", "buttonClass", ["loc", [null, [14, 51], [14, 62]]]], " ", ["subexpr", "unless", [["get", "_addButtonIsEnabled", ["loc", [null, [14, 74], [14, 93]]]], "disabled"], [], ["loc", [null, [14, 65], [14, 106]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.add-button-title"], [], ["loc", [null, [15, 14], [15, 64]]]]], ["attribute", "for", ["get", "_fileInputId", ["loc", [null, [16, 14], [16, 26]]]]], ["element", "action", ["addButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [17, 8], [17, 67]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 4
              },
              "end": {
                "line": 28,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "trash outline icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element5, 'class');
            morphs[1] = dom.createAttrMorph(element5, 'title');
            morphs[2] = dom.createElementMorph(element5);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["flexberry-file-remove-button ui icon ", ["get", "buttonClass", ["loc", [null, [23, 54], [23, 65]]]], " ", ["subexpr", "unless", [["get", "_removeButtonIsEnabled", ["loc", [null, [23, 77], [23, 99]]]], "disabled"], [], ["loc", [null, [23, 68], [23, 112]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.remove-button-title"], [], ["loc", [null, [24, 14], [24, 67]]]]], ["element", "action", ["removeButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [25, 8], [25, 70]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 29,
                "column": 4
              },
              "end": {
                "line": 36,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("label");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "upload outline icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element4, 'class');
            morphs[1] = dom.createAttrMorph(element4, 'title');
            morphs[2] = dom.createElementMorph(element4);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["flexberry-file-upload-button ui icon ", ["get", "buttonClass", ["loc", [null, [31, 54], [31, 65]]]], " ", ["subexpr", "unless", [["get", "_uploadButtonIsEnabled", ["loc", [null, [31, 77], [31, 99]]]], "disabled"], [], ["loc", [null, [31, 68], [31, 112]]]], " ", ["subexpr", "if", [["get", "_uploadIsInProgress", ["loc", [null, [31, 118], [31, 137]]]], "loading"], [], ["loc", [null, [31, 113], [31, 149]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.upload-button-title"], [], ["loc", [null, [32, 14], [32, 67]]]]], ["element", "action", ["uploadButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [33, 8], [33, 70]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 2
            },
            "end": {
              "line": 37,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "_addButtonIsVisible", ["loc", [null, [12, 10], [12, 29]]]]], [], 0, null, ["loc", [null, [12, 4], [20, 11]]]], ["block", "if", [["get", "_removeButtonIsVisible", ["loc", [null, [21, 10], [21, 32]]]]], [], 1, null, ["loc", [null, [21, 4], [28, 11]]]], ["block", "if", [["get", "_uploadButtonIsVisible", ["loc", [null, [29, 10], [29, 32]]]]], [], 2, null, ["loc", [null, [29, 4], [36, 11]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 2
            },
            "end": {
              "line": 45,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("label");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "download outline icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createAttrMorph(element3, 'title');
          morphs[2] = dom.createElementMorph(element3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["flexberry-file-download-button ui icon ", ["get", "buttonClass", ["loc", [null, [40, 54], [40, 65]]]], " ", ["subexpr", "unless", [["get", "_downloadButtonIsEnabled", ["loc", [null, [40, 77], [40, 101]]]], "disabled"], [], ["loc", [null, [40, 68], [40, 114]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.download-button-title"], [], ["loc", [null, [41, 12], [41, 67]]]]], ["element", "action", ["downloadButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [42, 6], [42, 70]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 49,
                "column": 6
              },
              "end": {
                "line": 54,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("img");
            dom.setAttribute(el1, "class", "flexberry-file-image-preview ui small centered image");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'src');
            morphs[1] = dom.createAttrMorph(element0, 'alt');
            return morphs;
          },
          statements: [["attribute", "src", ["get", "_previewImageAsBase64String", ["loc", [null, [52, 16], [52, 43]]]]], ["attribute", "alt", ["subexpr", "t", ["components.flexberry-file.preview-image-alternative-text"], [], ["loc", [null, [53, 14], [53, 78]]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 0
            },
            "end": {
              "line": 57,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "flexberry-file-image-preview-wrapper ui segment");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createAttrMorph(element2, 'class');
          return morphs;
        },
        statements: [["element", "action", ["viewLoadedImage"], [], ["loc", [null, [48, 65], [48, 93]]]], ["block", "unless", [["get", "_previewDownloadIsInProgress", ["loc", [null, [49, 16], [49, 44]]]]], [], 0, null, ["loc", [null, [49, 6], [54, 17]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "_previewDownloadIsInProgress", ["loc", [null, [55, 26], [55, 54]]]], "active", ""], [], ["loc", [null, [55, 21], [55, 68]]]], " loader"]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 80,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-file.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "type", "file");
        dom.setAttribute(el2, "name", "files[]");
        dom.setAttribute(el2, "class", "flexberry-file-file-input");
        dom.setAttribute(el2, "style", "display:none");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-download-iframes-container");
        dom.setAttribute(el1, "style", "display: none;");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-error-modal-dialog ui small basic modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui icon header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("i");
        dom.setAttribute(el3, "class", "file icon");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-file-error-modal-dialog-content center aligned ui grid");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "center aligned ui grid");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "actions");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flexberry-file-error-modal-dialog-ok-button ui approve green inverted button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "checkmark icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element7 = dom.childAt(fragment, [0]);
        var element8 = dom.childAt(element7, [1]);
        var element9 = dom.childAt(fragment, [5]);
        var morphs = new Array(9);
        morphs[0] = dom.createAttrMorph(element7, 'class');
        morphs[1] = dom.createAttrMorph(element8, 'id');
        morphs[2] = dom.createMorphAt(element7, 4, 4);
        morphs[3] = dom.createMorphAt(element7, 6, 6);
        morphs[4] = dom.createMorphAt(element7, 7, 7);
        morphs[5] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[6] = dom.createMorphAt(dom.childAt(element9, [1]), 3, 3);
        morphs[7] = dom.createMorphAt(dom.childAt(element9, [3, 1]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element9, [5, 1, 1]), 3, 3);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["ui ", ["get", "inputClass", ["loc", [null, [1, 17], [1, 27]]]], " action input"]]], ["attribute", "id", ["get", "_fileInputId", ["loc", [null, [2, 41], [2, 53]]]]], ["inline", "input", [], ["type", "text", "class", "flexberry-file-filename-input", "readonly", "readonly", "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [8, 16], [8, 27]]]]], [], []], "value", ["subexpr", "get", [["get", "this", ["loc", [null, [9, 15], [9, 19]]]], "_fileName"], [], ["loc", [null, [9, 10], [9, 32]]]]], ["loc", [null, [4, 2], [10, 4]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [11, 12], [11, 20]]]]], [], 0, null, ["loc", [null, [11, 2], [37, 13]]]], ["block", "if", [["get", "_downloadButtonIsVisible", ["loc", [null, [38, 8], [38, 32]]]]], [], 1, null, ["loc", [null, [38, 2], [45, 9]]]], ["block", "if", [["subexpr", "and", [["get", "showPreview", ["loc", [null, [47, 11], [47, 22]]]], ["get", "_hasFile", ["loc", [null, [47, 23], [47, 31]]]]], [], ["loc", [null, [47, 6], [47, 32]]]]], [], 2, null, ["loc", [null, [47, 0], [57, 7]]]], ["content", "_errorModalDialogCaption", ["loc", [null, [64, 4], [64, 32]]]], ["content", "_errorModalDialogContent", ["loc", [null, [68, 6], [68, 34]]]], ["inline", "t", ["components.flexberry-file.error-dialog-ok-button-caption"], [], ["loc", [null, [75, 8], [75, 72]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("ember-app/templates/components/flexberry-groupedit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 48,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-groupedit.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "groupedit-toolbar", [], ["componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [2, 16], [2, 29]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [3, 11], [3, 19]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [4, 14], [4, 25]]]]], [], []], "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [5, 18], [5, 33]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [6, 15], [6, 27]]]]], [], []], "confirmDeleteRows", ["subexpr", "@mut", [["get", "confirmDeleteRows", ["loc", [null, [7, 20], [7, 37]]]]], [], []]], ["loc", [null, [1, 0], [8, 2]]]], ["inline", "object-list-view", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [10, 14], [10, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [11, 11], [11, 19]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [12, 14], [12, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [13, 15], [13, 27]]]]], [], []], "customTableClass", ["subexpr", "@mut", [["get", "customTableClass", ["loc", [null, [14, 19], [14, 35]]]]], [], []], "cellComponent", ["subexpr", "@mut", [["get", "cellComponent", ["loc", [null, [15, 16], [15, 29]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [16, 28], [16, 53]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [17, 26], [17, 49]]]]], [], []], "showValidationMessagesInRow", ["subexpr", "@mut", [["get", "showValidationMessagesInRow", ["loc", [null, [18, 30], [18, 57]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [19, 20], [19, 37]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [20, 20], [20, 37]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [21, 24], [21, 45]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [22, 24], [22, 45]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [23, 26], [23, 49]]]]], [], []], "sendMenuItemAction", ["subexpr", "action", ["sendMenuItemAction"], [], ["loc", [null, [24, 21], [24, 50]]]], "menuInRowAdditionalItems", ["subexpr", "@mut", [["get", "menuInRowAdditionalItems", ["loc", [null, [25, 27], [25, 51]]]]], [], []], "rowClickable", ["subexpr", "@mut", [["get", "rowClickable", ["loc", [null, [26, 15], [26, 27]]]]], [], []], "orderable", ["subexpr", "@mut", [["get", "orderable", ["loc", [null, [27, 12], [27, 21]]]]], [], []], "editOnSeparateRoute", ["subexpr", "@mut", [["get", "editOnSeparateRoute", ["loc", [null, [28, 22], [28, 41]]]]], [], []], "saveBeforeRouteLeave", ["subexpr", "@mut", [["get", "saveBeforeRouteLeave", ["loc", [null, [29, 23], [29, 43]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "sorting", ["loc", [null, [30, 10], [30, 17]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [31, 12], [31, 21]]]]], [], []], "mainModelProjection", ["subexpr", "@mut", [["get", "mainModelProjection", ["loc", [null, [32, 22], [32, 41]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [33, 18], [33, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [34, 10], [34, 17]]]]], [], []], "sortByColumn", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.sortByColumn", ["loc", [null, [35, 27], [35, 50]]]], ["get", "this.attrs.sortByColumn", ["loc", [null, [35, 51], [35, 74]]]], "sortByColumn"], [], ["loc", [null, [35, 23], [35, 90]]]]], [], ["loc", [null, [35, 15], [35, 91]]]], "addColumnToSorting", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.addColumnToSorting", ["loc", [null, [36, 33], [36, 62]]]], ["get", "this.attrs.addColumnToSorting", ["loc", [null, [36, 63], [36, 92]]]], "addColumnToSorting"], [], ["loc", [null, [36, 29], [36, 114]]]]], [], ["loc", [null, [36, 21], [36, 115]]]], "action", "groupEditRowClick", "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [38, 16], [38, 29]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [39, 20], [39, 37]]]]], [], []], "configurateRow", ["subexpr", "@mut", [["get", "this.attrs.configurateRow", ["loc", [null, [40, 17], [40, 42]]]]], [], []], "confirmDeleteRow", ["subexpr", "@mut", [["get", "confirmDeleteRow", ["loc", [null, [41, 19], [41, 35]]]]], [], []], "configurateSelectedRows", ["subexpr", "@mut", [["get", "this.attrs.configurateSelectedRows", ["loc", [null, [42, 26], [42, 60]]]]], [], []], "beforeDeleteRecord", ["subexpr", "@mut", [["get", "beforeDeleteRecord", ["loc", [null, [43, 21], [43, 39]]]]], [], []], "searchForContentChange", ["subexpr", "@mut", [["get", "searchForContentChange", ["loc", [null, [44, 25], [44, 47]]]]], [], []], "immediateDelete", false, "notUseUserSettings", true], ["loc", [null, [9, 0], [47, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/components/flexberry-lookup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 16], [3, 27]]]]], [], []], "class", "search", "value", ["subexpr", "@mut", [["get", "displayValue", ["loc", [null, [5, 10], [5, 22]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [6, 17], [6, 25]]]], "readonly"], [], ["loc", [null, [6, 13], [6, 37]]]], "needChecksOnValue", false, "isSearch", true, "isSearchReadOnly", ["subexpr", "@mut", [["get", "dropdownIsSearch", ["loc", [null, [9, 21], [9, 37]]]]], [], []]], ["loc", [null, [2, 2], [10, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 33,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui fluid action input");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var element2 = dom.childAt(element0, [5]);
          var morphs = new Array(9);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createAttrMorph(element1, 'class');
          morphs[2] = dom.createAttrMorph(element1, 'title');
          morphs[3] = dom.createElementMorph(element1);
          morphs[4] = dom.createUnsafeMorphAt(element1, 1, 1);
          morphs[5] = dom.createAttrMorph(element2, 'class');
          morphs[6] = dom.createAttrMorph(element2, 'title');
          morphs[7] = dom.createElementMorph(element2);
          morphs[8] = dom.createUnsafeMorphAt(element2, 1, 1);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "class", ["subexpr", "concat", ["lookup-field ", ["subexpr", "if", [["get", "autocomplete", ["loc", [null, [15, 40], [15, 52]]]], "prompt"], [], ["loc", [null, [15, 36], [15, 62]]]]], [], ["loc", [null, [15, 12], [15, 63]]]], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [16, 18], [16, 29]]]]], [], []], "value", ["subexpr", "@mut", [["get", "displayValue", ["loc", [null, [17, 12], [17, 24]]]]], [], []], "readonly", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [18, 23], [18, 31]]]], ["subexpr", "not", [["get", "autocomplete", ["loc", [null, [18, 37], [18, 49]]]]], [], ["loc", [null, [18, 32], [18, 50]]]]], [], ["loc", [null, [18, 19], [18, 51]]]], "readonly"], [], ["loc", [null, [18, 15], [18, 63]]]]], ["loc", [null, [13, 4], [19, 6]]]], ["attribute", "class", ["concat", ["ui ui-change ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [21, 35], [21, 43]]]], ["get", "isBlocked", ["loc", [null, [21, 44], [21, 53]]]]], [], ["loc", [null, [21, 31], [21, 54]]]], " disabled"], [], ["loc", [null, [21, 26], [21, 68]]]], " ", ["get", "chooseButtonClass", ["loc", [null, [21, 71], [21, 88]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "modalIsBeforeToShow", ["loc", [null, [21, 100], [21, 119]]]], ["get", "modalIsStartToShow", ["loc", [null, [21, 120], [21, 138]]]]], [], ["loc", [null, [21, 96], [21, 139]]]], " loading"], [], ["loc", [null, [21, 91], [21, 152]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-lookup.choose-button-text"], [], ["loc", [null, [22, 12], [22, 66]]]]], ["element", "action", ["choose", ["get", "chooseData", ["loc", [null, [23, 24], [23, 34]]]]], [], ["loc", [null, [23, 6], [23, 36]]]], ["content", "chooseText", ["loc", [null, [24, 6], [24, 22]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [27, 25], [27, 33]]]], ["get", "isBlocked", ["loc", [null, [27, 34], [27, 43]]]]], [], ["loc", [null, [27, 21], [27, 44]]]], " disabled"], [], ["loc", [null, [27, 16], [27, 58]]]], " ", ["get", "removeButtonClass", ["loc", [null, [27, 61], [27, 78]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-lookup.remove-button-text"], [], ["loc", [null, [28, 12], [28, 66]]]]], ["element", "action", ["remove", ["get", "removeData", ["loc", [null, [29, 24], [29, 34]]]]], [], ["loc", [null, [29, 6], [29, 36]]]], ["content", "removeText", ["loc", [null, [30, 6], [30, 22]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 34,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "results");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-lookup.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "dropdown", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [33, 7]]]], ["block", "if", [["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [34, 16], [34, 24]]]]], [], ["loc", [null, [34, 11], [34, 25]]]], ["get", "autocomplete", ["loc", [null, [34, 26], [34, 38]]]]], [], ["loc", [null, [34, 6], [34, 39]]]]], [], 2, null, ["loc", [null, [34, 0], [36, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("ember-app/templates/components/flexberry-menu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-menu.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-menuitem", [], ["tagName", "", "item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [2, 41], [2, 45]]]]], [], []]], ["loc", [null, [2, 4], [2, 47]]]]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-menu.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "items", ["loc", [null, [1, 8], [1, 13]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/components/flexberry-menuitem", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-menuitem.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "t", [["get", "item.localeKey", ["loc", [null, [3, 14], [3, 28]]]]], [], ["loc", [null, [3, 10], [3, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-menuitem.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "item.title", ["loc", [null, [5, 10], [5, 24]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "item.localeKey", ["loc", [null, [2, 8], [2, 22]]]]], [], 0, 1, ["loc", [null, [2, 2], [6, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "item.icon", ["loc", [null, [9, 14], [9, 23]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 2
              },
              "end": {
                "line": 14,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-menuitem.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["inline", "t", [["get", "item.localeKey", ["loc", [null, [13, 14], [13, 28]]]]], [], ["loc", [null, [13, 10], [13, 30]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 2
              },
              "end": {
                "line": 16,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-menuitem.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "item.title", ["loc", [null, [15, 10], [15, 24]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "item.localeKey", ["loc", [null, [12, 8], [12, 22]]]]], [], 0, 1, ["loc", [null, [12, 2], [16, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 4
              },
              "end": {
                "line": 22,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-menuitem.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-menuitem", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [21, 32], [21, 36]]]]], [], []]], ["loc", [null, [21, 6], [21, 38]]]]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-menuitem.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "item.itemsAlignment", ["loc", [null, [19, 19], [19, 38]]]], ["get", "item.itemsAlignment", ["loc", [null, [19, 39], [19, 58]]]]], [], ["loc", [null, [19, 14], [19, 60]]]], " menu"]]], ["block", "each", [["get", "item.items", ["loc", [null, [20, 12], [20, 22]]]]], [], 0, null, ["loc", [null, [20, 4], [22, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-menuitem.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "titleIsBeforeIcon", ["loc", [null, [1, 6], [1, 23]]]]], [], 0, null, ["loc", [null, [1, 0], [7, 7]]]], ["block", "if", [["get", "item.icon", ["loc", [null, [8, 6], [8, 15]]]]], [], 1, null, ["loc", [null, [8, 0], [10, 7]]]], ["block", "if", [["subexpr", "not", [["get", "titleIsBeforeIcon", ["loc", [null, [11, 11], [11, 28]]]]], [], ["loc", [null, [11, 6], [11, 29]]]]], [], 2, null, ["loc", [null, [11, 0], [17, 7]]]], ["block", "if", [["get", "hasSubitems", ["loc", [null, [18, 6], [18, 17]]]]], [], 3, null, ["loc", [null, [18, 0], [24, 7]]]], ["content", "yield", ["loc", [null, [25, 0], [25, 9]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("ember-app/templates/components/flexberry-objectlistview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 89,
                  "column": 8
                },
                "end": {
                  "line": 91,
                  "column": 8
                }
              },
              "moduleName": "ember-app/templates/components/flexberry-objectlistview.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "ui button");
              var el2 = dom.createTextNode("...");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 92,
                    "column": 10
                  },
                  "end": {
                    "line": 94,
                    "column": 10
                  }
                },
                "moduleName": "ember-app/templates/components/flexberry-objectlistview.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "ui active button");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["content", "page.number", ["loc", [null, [93, 45], [93, 60]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 94,
                    "column": 10
                  },
                  "end": {
                    "line": 96,
                    "column": 10
                  }
                },
                "moduleName": "ember-app/templates/components/flexberry-objectlistview.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("button");
                dom.setAttribute(el1, "class", "ui button");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element0);
                morphs[1] = dom.createMorphAt(element0, 0, 0);
                return morphs;
              },
              statements: [["element", "action", ["gotoPage", ["get", "this.attrs.gotoPage", ["loc", [null, [95, 58], [95, 77]]]], ["get", "page.number", ["loc", [null, [95, 78], [95, 89]]]]], [], ["loc", [null, [95, 38], [95, 91]]]], ["content", "page.number", ["loc", [null, [95, 92], [95, 107]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 91,
                  "column": 8
                },
                "end": {
                  "line": 97,
                  "column": 8
                }
              },
              "moduleName": "ember-app/templates/components/flexberry-objectlistview.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "page.isCurrent", ["loc", [null, [92, 16], [92, 30]]]]], [], 0, 1, ["loc", [null, [92, 10], [96, 17]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 88,
                "column": 6
              },
              "end": {
                "line": 98,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-objectlistview.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "page.isEllipsis", ["loc", [null, [89, 14], [89, 29]]]]], [], 0, 1, ["loc", [null, [89, 8], [97, 15]]]]],
          locals: ["page"],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 107,
                  "column": 6
                },
                "end": {
                  "line": 111,
                  "column": 6
                }
              },
              "moduleName": "ember-app/templates/components/flexberry-objectlistview.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "concat", [["subexpr", "t", ["components.flexberry-objectlistview.showing-entries.showing"], [], ["loc", [null, [109, 10], [109, 75]]]], ["get", "currentIntervalRecords", ["loc", [null, [109, 76], [109, 98]]]], ["subexpr", "t", ["components.flexberry-objectlistview.showing-entries.of"], [], ["loc", [null, [109, 99], [109, 159]]]], ["get", "recordsTotalCount", ["loc", [null, [109, 160], [109, 177]]]], ["subexpr", "t", ["components.flexberry-objectlistview.showing-entries.entries"], [], ["loc", [null, [109, 178], [109, 243]]]]], [], ["loc", [null, [108, 8], [110, 10]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 105,
                "column": 2
              },
              "end": {
                "line": 113,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/components/flexberry-objectlistview.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "showing-entries");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["subexpr", "and", [["get", "currentIntervalRecords", ["loc", [null, [107, 17], [107, 39]]]], ["get", "recordsTotalCount", ["loc", [null, [107, 40], [107, 57]]]]], [], ["loc", [null, [107, 12], [107, 58]]]]], [], 0, null, ["loc", [null, [107, 6], [111, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 84,
              "column": 0
            },
            "end": {
              "line": 114,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-objectlistview.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui secondary menu no-margin");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "ui basic buttons");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          var el4 = dom.createTextNode("«");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("button");
          var el4 = dom.createTextNode("»");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "right menu");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var element3 = dom.childAt(element2, [1]);
          var element4 = dom.childAt(element2, [5]);
          var morphs = new Array(7);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createElementMorph(element3);
          morphs[2] = dom.createMorphAt(element2, 3, 3);
          morphs[3] = dom.createAttrMorph(element4, 'class');
          morphs[4] = dom.createElementMorph(element4);
          morphs[5] = dom.createMorphAt(dom.childAt(element1, [3]), 1, 1);
          morphs[6] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["subexpr", "unless", [["get", "hasPreviousPage", ["loc", [null, [87, 33], [87, 48]]]], "disabled"], [], ["loc", [null, [87, 24], [87, 61]]]], " button prev-page-button"]]], ["element", "action", ["previousPage", ["get", "this.attrs.previousPage", ["loc", [null, [87, 111], [87, 134]]]]], [], ["loc", [null, [87, 87], [87, 136]]]], ["block", "each", [["get", "pages", ["loc", [null, [88, 14], [88, 19]]]]], [], 0, null, ["loc", [null, [88, 6], [98, 15]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "unless", [["get", "hasNextPage", ["loc", [null, [99, 33], [99, 44]]]], "disabled"], [], ["loc", [null, [99, 24], [99, 57]]]], " button next-page-button"]]], ["element", "action", ["nextPage", ["get", "this.attrs.nextPage", ["loc", [null, [99, 103], [99, 122]]]]], [], ["loc", [null, [99, 83], [99, 124]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [102, 33], [102, 46]]]]], [], []], "value", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [102, 53], [102, 65]]]]], [], []], "class", "compact selection", "onChange", ["subexpr", "action", ["perPageClick"], [], ["loc", [null, [102, 101], [102, 124]]]], "needChecksOnValue", false], ["loc", [null, [102, 6], [102, 150]]]], ["block", "if", [["get", "showShowingEntries", ["loc", [null, [105, 8], [105, 26]]]]], [], 1, null, ["loc", [null, [105, 2], [113, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 115,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-objectlistview.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "olv-toolbar", [], ["class", "ui secondary menu no-margin", "createNewButton", ["subexpr", "@mut", [["get", "createNewButton", ["loc", [null, [3, 18], [3, 33]]]]], [], []], "enableCreateNewButton", ["subexpr", "not", [["get", "readonly", ["loc", [null, [4, 29], [4, 37]]]]], [], ["loc", [null, [4, 24], [4, 38]]]], "refreshButton", ["subexpr", "@mut", [["get", "refreshButton", ["loc", [null, [5, 16], [5, 29]]]]], [], []], "deleteButton", ["subexpr", "@mut", [["get", "deleteButton", ["loc", [null, [6, 15], [6, 27]]]]], [], []], "colsConfigButton", ["subexpr", "@mut", [["get", "colsConfigButton", ["loc", [null, [7, 19], [7, 35]]]]], [], []], "enableFilters", ["subexpr", "@mut", [["get", "enableFilters", ["loc", [null, [8, 16], [8, 29]]]]], [], []], "exportExcelButton", ["subexpr", "@mut", [["get", "exportExcelButton", ["loc", [null, [9, 20], [9, 37]]]]], [], []], "showFilters", ["subexpr", "@mut", [["get", "_showFilters", ["loc", [null, [10, 14], [10, 26]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [11, 10], [11, 17]]]]], [], []], "toggleStateFilters", ["subexpr", "action", ["toggleStateFilters"], [], ["loc", [null, [12, 21], [12, 50]]]], "resetFilters", ["subexpr", "action", ["resetFilters", ["get", "this.attrs.resetFilters", ["loc", [null, [13, 38], [13, 61]]]]], [], ["loc", [null, [13, 15], [13, 62]]]], "filterButton", ["subexpr", "@mut", [["get", "filterButton", ["loc", [null, [14, 15], [14, 27]]]]], [], []], "filterText", ["subexpr", "@mut", [["get", "filterText", ["loc", [null, [15, 13], [15, 23]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [16, 14], [16, 25]]]]], [], []], "enableDeleteButton", ["subexpr", "not", [["get", "readonly", ["loc", [null, [17, 26], [17, 34]]]]], [], ["loc", [null, [17, 21], [17, 35]]]], "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [18, 16], [18, 29]]]]], [], []], "modelController", ["subexpr", "@mut", [["get", "currentController", ["loc", [null, [19, 18], [19, 35]]]]], [], []], "customButtonAction", "customButtonAction", "customButtons", ["subexpr", "@mut", [["get", "customButtons", ["loc", [null, [21, 16], [21, 29]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [22, 16], [22, 29]]]]], [], []], "showConfigDialog", "showConfigDialog", "confirmDeleteRows", ["subexpr", "@mut", [["get", "confirmDeleteRows", ["loc", [null, [24, 20], [24, 37]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "_inHierarchicalMode", ["loc", [null, [25, 21], [25, 40]]]]], [], []], "availableHierarchicalMode", ["subexpr", "@mut", [["get", "_availableHierarchicalMode", ["loc", [null, [26, 28], [26, 54]]]]], [], []], "switchHierarchicalMode", ["subexpr", "action", ["switchHierarchicalMode"], [], ["loc", [null, [27, 25], [27, 58]]]]], ["loc", [null, [1, 0], [28, 2]]]], ["inline", "object-list-view", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [30, 14], [30, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [31, 11], [31, 19]]]]], [], []], "buttonClass", ["subexpr", "@mut", [["get", "buttonClass", ["loc", [null, [32, 14], [32, 25]]]]], [], []], "tableStriped", ["subexpr", "@mut", [["get", "tableStriped", ["loc", [null, [33, 15], [33, 27]]]]], [], []], "customTableClass", ["subexpr", "@mut", [["get", "customTableClass", ["loc", [null, [34, 19], [34, 35]]]]], [], []], "cellComponent", ["subexpr", "@mut", [["get", "cellComponent", ["loc", [null, [35, 16], [35, 29]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [36, 28], [36, 53]]]]], [], []], "singleColumnHeaderTitle", ["subexpr", "@mut", [["get", "singleColumnHeaderTitle", ["loc", [null, [37, 26], [37, 49]]]]], [], []], "showValidationMessagesInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [38, 40], [38, 48]]]]], [], ["loc", [null, [38, 35], [38, 49]]]], ["get", "showValidationMessagesInRow", ["loc", [null, [38, 50], [38, 77]]]]], [], ["loc", [null, [38, 30], [38, 78]]]], "showAsteriskInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [39, 30], [39, 38]]]]], [], ["loc", [null, [39, 25], [39, 39]]]], ["get", "showAsteriskInRow", ["loc", [null, [39, 40], [39, 57]]]]], [], ["loc", [null, [39, 20], [39, 58]]]], "showCheckBoxInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [40, 30], [40, 38]]]]], [], ["loc", [null, [40, 25], [40, 39]]]], ["get", "showCheckBoxInRow", ["loc", [null, [40, 40], [40, 57]]]]], [], ["loc", [null, [40, 20], [40, 58]]]], "showDeleteButtonInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [41, 34], [41, 42]]]]], [], ["loc", [null, [41, 29], [41, 43]]]], ["get", "showDeleteButtonInRow", ["loc", [null, [41, 44], [41, 65]]]]], [], ["loc", [null, [41, 24], [41, 66]]]], "showEditMenuItemInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [42, 34], [42, 42]]]]], [], ["loc", [null, [42, 29], [42, 43]]]], ["get", "showEditMenuItemInRow", ["loc", [null, [42, 44], [42, 65]]]]], [], ["loc", [null, [42, 24], [42, 66]]]], "showDeleteMenuItemInRow", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [43, 36], [43, 44]]]]], [], ["loc", [null, [43, 31], [43, 45]]]], ["get", "showDeleteMenuItemInRow", ["loc", [null, [43, 46], [43, 69]]]]], [], ["loc", [null, [43, 26], [43, 70]]]], "sendMenuItemAction", ["subexpr", "action", ["sendMenuItemAction"], [], ["loc", [null, [44, 21], [44, 50]]]], "menuInRowAdditionalItems", ["subexpr", "@mut", [["get", "menuInRowAdditionalItems", ["loc", [null, [45, 27], [45, 51]]]]], [], []], "rowClickable", ["subexpr", "and", [["subexpr", "not", [["get", "readonly", ["loc", [null, [46, 25], [46, 33]]]]], [], ["loc", [null, [46, 20], [46, 34]]]], ["get", "rowClickable", ["loc", [null, [46, 35], [46, 47]]]]], [], ["loc", [null, [46, 15], [46, 48]]]], "orderable", ["subexpr", "@mut", [["get", "orderable", ["loc", [null, [47, 12], [47, 21]]]]], [], []], "sorting", ["subexpr", "@mut", [["get", "sorting", ["loc", [null, [48, 10], [48, 17]]]]], [], []], "immediateDelete", true, "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [50, 12], [50, 21]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [51, 18], [51, 33]]]]], [], []], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [52, 10], [52, 17]]]]], [], []], "sortByColumn", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.sortByColumn", ["loc", [null, [53, 27], [53, 50]]]], ["get", "this.attrs.sortByColumn", ["loc", [null, [53, 51], [53, 74]]]], "sortByColumn"], [], ["loc", [null, [53, 23], [53, 90]]]]], [], ["loc", [null, [53, 15], [53, 91]]]], "addColumnToSorting", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.addColumnToSorting", ["loc", [null, [54, 33], [54, 62]]]], ["get", "this.attrs.addColumnToSorting", ["loc", [null, [54, 63], [54, 92]]]], "addColumnToSorting"], [], ["loc", [null, [54, 29], [54, 114]]]]], [], ["loc", [null, [54, 21], [54, 115]]]], "enableFilters", ["subexpr", "@mut", [["get", "enableFilters", ["loc", [null, [55, 16], [55, 29]]]]], [], []], "showFilters", ["subexpr", "@mut", [["get", "_showFilters", ["loc", [null, [56, 14], [56, 26]]]]], [], []], "filters", ["subexpr", "@mut", [["get", "filters", ["loc", [null, [57, 10], [57, 17]]]]], [], []], "applyFilters", ["subexpr", "action", [["subexpr", "if", [["get", "applyFilters", ["loc", [null, [58, 27], [58, 39]]]], ["get", "applyFilters", ["loc", [null, [58, 40], [58, 52]]]], "applyFilters"], [], ["loc", [null, [58, 23], [58, 68]]]]], [], ["loc", [null, [58, 15], [58, 69]]]], "componentForFilter", ["subexpr", "@mut", [["get", "componentForFilter", ["loc", [null, [59, 21], [59, 39]]]]], [], []], "conditionsByType", ["subexpr", "@mut", [["get", "conditionsByType", ["loc", [null, [60, 19], [60, 35]]]]], [], []], "filterByAnyMatch", ["subexpr", "action", [["subexpr", "if", [["get", "this.attrs.filterByAnyMatch", ["loc", [null, [61, 31], [61, 58]]]], ["get", "this.attrs.filterByAnyMatch", ["loc", [null, [61, 59], [61, 86]]]], "filterByAnyMatch"], [], ["loc", [null, [61, 27], [61, 106]]]]], [], ["loc", [null, [61, 19], [61, 107]]]], "filterByAnyWord", ["subexpr", "@mut", [["get", "filterByAnyWord", ["loc", [null, [62, 18], [62, 33]]]]], [], []], "filterByAllWords", ["subexpr", "@mut", [["get", "filterByAllWords", ["loc", [null, [63, 19], [63, 35]]]]], [], []], "configurateRow", ["subexpr", "@mut", [["get", "this.attrs.configurateRow", ["loc", [null, [64, 17], [64, 42]]]]], [], []], "configurateSelectedRows", ["subexpr", "@mut", [["get", "this.attrs.configurateSelectedRows", ["loc", [null, [65, 26], [65, 60]]]]], [], []], "confirmDeleteRow", ["subexpr", "@mut", [["get", "confirmDeleteRow", ["loc", [null, [66, 19], [66, 35]]]]], [], []], "beforeDeleteRecord", ["subexpr", "@mut", [["get", "beforeDeleteRecord", ["loc", [null, [67, 21], [67, 39]]]]], [], []], "action", "objectListViewRowClick", "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [69, 16], [69, 29]]]]], [], []], "allowColumnResize", ["subexpr", "@mut", [["get", "allowColumnResize", ["loc", [null, [70, 20], [70, 37]]]]], [], []], "selectedRecord", ["subexpr", "@mut", [["get", "selectedRecord", ["loc", [null, [71, 17], [71, 31]]]]], [], []], "notUseUserSettings", ["subexpr", "@mut", [["get", "notUseUserSettings", ["loc", [null, [72, 21], [72, 39]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "hierarchicalIndent", ["loc", [null, [73, 21], [73, 39]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "_inHierarchicalMode", ["loc", [null, [74, 21], [74, 40]]]]], [], []], "disableHierarchicalMode", ["subexpr", "if", [["get", "hierarchyByAttribute", ["loc", [null, [75, 30], [75, 50]]]], true, ["get", "disableHierarchicalMode", ["loc", [null, [75, 56], [75, 79]]]]], [], ["loc", [null, [75, 26], [75, 80]]]], "loadRecords", ["subexpr", "action", ["loadRecords"], [], ["loc", [null, [76, 14], [76, 36]]]], "availableHierarchicalMode", ["subexpr", "action", ["availableHierarchicalMode"], [], ["loc", [null, [77, 28], [77, 64]]]], "useRowByRowLoading", ["subexpr", "@mut", [["get", "useRowByRowLoading", ["loc", [null, [78, 21], [78, 39]]]]], [], []], "useRowByRowLoadingProgress", ["subexpr", "@mut", [["get", "useRowByRowLoadingProgress", ["loc", [null, [79, 29], [79, 55]]]]], [], []], "eventsBus", ["subexpr", "@mut", [["get", "eventsBus", ["loc", [null, [80, 12], [80, 21]]]]], [], []], "onEditForm", ["subexpr", "@mut", [["get", "onEditForm", ["loc", [null, [81, 13], [81, 23]]]]], [], []], "defaultLeftPadding", ["subexpr", "@mut", [["get", "defaultLeftPadding", ["loc", [null, [82, 21], [82, 39]]]]], [], []]], ["loc", [null, [29, 0], [83, 2]]]], ["block", "unless", [["get", "_inHierarchicalMode", ["loc", [null, [84, 10], [84, 29]]]]], [], 0, null, ["loc", [null, [84, 0], [114, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/components/flexberry-simpledatetime", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-simpledatetime.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [2, 15], [2, 19]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonlyAttr", ["loc", [null, [2, 29], [2, 41]]]]], [], []], "value", ["subexpr", "@mut", [["get", "_valueAsString", ["loc", [null, [2, 48], [2, 62]]]]], [], []], "min", ["subexpr", "@mut", [["get", "_minAsString", ["loc", [null, [2, 67], [2, 79]]]]], [], []], "max", ["subexpr", "@mut", [["get", "_maxAsString", ["loc", [null, [2, 84], [2, 96]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [2, 109], [2, 120]]]]], [], []]], ["loc", [null, [2, 2], [2, 122]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-simpledatetime.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "text");
          dom.setAttribute(el1, "class", "flatpickr");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'placeholder');
          return morphs;
        },
        statements: [["attribute", "placeholder", ["get", "placeholder", ["loc", [null, [4, 53], [4, 64]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-simpledatetime.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["subexpr", "and", [["get", "currentTypeSupported", ["loc", [null, [1, 11], [1, 31]]]], ["get", "useBrowserInput", ["loc", [null, [1, 32], [1, 47]]]]], [], ["loc", [null, [1, 6], [1, 48]]]]], [], 0, 1, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-app/templates/components/flexberry-simpleolv",["exports"],function(exports){exports["default"] = Ember.HTMLBars.template((function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":2,"column":2},"end":{"line":9,"column":2}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("button");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element35=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element35,'class');morphs[1] = dom.createAttrMorph(element35,'title');morphs[2] = dom.createElementMorph(element35);morphs[3] = dom.createMorphAt(element35,1,1);return morphs;},statements:[["attribute","class",["concat",["ui refresh-button ",["get","buttonClass",["loc",[null,[4,33],[4,44]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.refresh-button-text"],[],["loc",[null,[5,12],[5,62]]]]],["element","action",["refresh"],[],["loc",[null,[6,6],[6,26]]]],["inline","t",["components.olv-toolbar.refresh-button-text"],[],["loc",[null,[7,8],[7,58]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":10,"column":2},"end":{"line":17,"column":2}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("button");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element34=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element34,'class');morphs[1] = dom.createAttrMorph(element34,'title');morphs[2] = dom.createElementMorph(element34);morphs[3] = dom.createMorphAt(element34,1,1);return morphs;},statements:[["attribute","class",["concat",["ui create-button ",["get","buttonClass",["loc",[null,[12,32],[12,43]]]]," ",["subexpr","if",[["get","enableCreateNewButton",["loc",[null,[12,51],[12,72]]]],"","disabled"],[],["loc",[null,[12,46],[12,88]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.add-button-text"],[],["loc",[null,[13,12],[13,58]]]]],["element","action",["createNew"],[],["loc",[null,[14,6],[14,28]]]],["inline","t",["components.olv-toolbar.add-button-text"],[],["loc",[null,[15,8],[15,54]]]]],locals:[],templates:[]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":18,"column":2},"end":{"line":25,"column":2}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("button");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element33=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element33,'class');morphs[1] = dom.createAttrMorph(element33,'title');morphs[2] = dom.createElementMorph(element33);morphs[3] = dom.createMorphAt(element33,1,1);return morphs;},statements:[["attribute","class",["concat",["ui delete-button ",["get","buttonClass",["loc",[null,[20,32],[20,43]]]]," ",["subexpr","if",[["get","isDeleteButtonEnabled",["loc",[null,[20,51],[20,72]]]],"","disabled"],[],["loc",[null,[20,46],[20,88]]]]," button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.delete-button-text"],[],["loc",[null,[21,12],[21,61]]]]],["element","action",["delete"],[],["loc",[null,[22,7],[22,26]]]],["inline","t",["components.olv-toolbar.delete-button-text"],[],["loc",[null,[23,8],[23,57]]]]],locals:[],templates:[]};})();var child3=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":26,"column":2},"end":{"line":33,"column":2}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("button");var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","sitemap icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element32=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element32,'class');morphs[1] = dom.createAttrMorph(element32,'title');morphs[2] = dom.createElementMorph(element32);return morphs;},statements:[["attribute","class",["concat",["ui button icon hierarchical-button ",["get","buttonClass",["loc",[null,[28,50],[28,61]]]]," ",["subexpr","if",[["get","inHierarchicalMode",["loc",[null,[28,69],[28,87]]]],"active"],[],["loc",[null,[28,64],[28,98]]]]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.hierarchy-button-text"],[],["loc",[null,[29,12],[29,64]]]]],["element","action",["switchHierarchicalMode"],[],["loc",[null,[30,6],[30,41]]]]],locals:[],templates:[]};})();var child4=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":42,"column":6},"end":{"line":50,"column":6}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","or");dom.setAttribute(el1,"data-text","•");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n        ");dom.appendChild(el0,el1);var el1=dom.createElement("button");var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","remove icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element29=dom.childAt(fragment,[3]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element29,'class');morphs[1] = dom.createAttrMorph(element29,'title');morphs[2] = dom.createElementMorph(element29);return morphs;},statements:[["attribute","class",["concat",["ui button removeFilter-button ",["get","buttonClass",["loc",[null,[45,49],[45,60]]]]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.remove-filter-button-text"],[],["loc",[null,[46,16],[46,72]]]]],["element","action",["resetFilters",["get","this.attrs.resetFilters",["loc",[null,[47,34],[47,57]]]]],[],["loc",[null,[47,10],[47,59]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":34,"column":2},"end":{"line":52,"column":2}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui icon buttons filter-active");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","filter icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element30=dom.childAt(fragment,[1]);var element31=dom.childAt(element30,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element31,'class');morphs[1] = dom.createAttrMorph(element31,'title');morphs[2] = dom.createElementMorph(element31);morphs[3] = dom.createMorphAt(element30,3,3);return morphs;},statements:[["attribute","class",["concat",["ui button ",["get","buttonClass",["loc",[null,[37,27],[37,38]]]]," ",["subexpr","if",[["get","showFilters",["loc",[null,[37,46],[37,57]]]],"active"],[],["loc",[null,[37,41],[37,68]]]]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.filter-button-text"],[],["loc",[null,[38,14],[38,63]]]]],["element","action",["toggleStateFilters"],[],["loc",[null,[39,8],[39,39]]]],["block","if",[["get","filters",["loc",[null,[42,12],[42,19]]]]],[],0,null,["loc",[null,[42,6],[50,13]]]]],locals:[],templates:[child0]};})();var child5=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":53,"column":2},"end":{"line":73,"column":2}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui action input");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","block-action-input");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","search icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","remove icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element26=dom.childAt(fragment,[1]);var element27=dom.childAt(element26,[3]);var element28=dom.childAt(element26,[5]);var morphs=new Array(7);morphs[0] = dom.createMorphAt(dom.childAt(element26,[1]),0,0);morphs[1] = dom.createAttrMorph(element27,'class');morphs[2] = dom.createAttrMorph(element27,'title');morphs[3] = dom.createElementMorph(element27);morphs[4] = dom.createAttrMorph(element28,'class');morphs[5] = dom.createAttrMorph(element28,'title');morphs[6] = dom.createElementMorph(element28);return morphs;},statements:[["inline","input",[],["type","text","placeholder",["subexpr","t",["components.olv-toolbar.filter-by-any-match-placeholder"],[],["loc",[null,[57,20],[57,80]]]],"value",["subexpr","@mut",[["get","filterByAnyMatchText",["loc",[null,[58,14],[58,34]]]]],[],[]],"enter","filterByAnyMatch"],["loc",[null,[55,38],[59,8]]]],["attribute","class",["concat",["ui ",["get","buttonClass",["loc",[null,[61,20],[61,31]]]]," icon button search-button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.search-button-text"],[],["loc",[null,[62,14],[62,63]]]]],["element","action",["filterByAnyMatch"],[],["loc",[null,[63,8],[63,37]]]],["attribute","class",["concat",["ui ",["get","buttonClass",["loc",[null,[67,20],[67,31]]]]," icon button clear-search-button"]]],["attribute","title",["subexpr","t",["components.olv-toolbar.clear-search-button-text"],[],["loc",[null,[68,14],[68,69]]]]],["element","action",["removeFilter"],[],["loc",[null,[69,8],[69,33]]]]],locals:[],templates:[]};})();var child6=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":74,"column":2},"end":{"line":87,"column":2}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui buttons");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","large file excel outline icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element24=dom.childAt(fragment,[1]);var element25=dom.childAt(element24,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element25,'class');morphs[1] = dom.createAttrMorph(element25,'title');morphs[2] = dom.createElementMorph(element25);morphs[3] = dom.createMorphAt(element24,3,3);return morphs;},statements:[["attribute","class",["concat",["ui button icon export-button ",["get","buttonClass",["loc",[null,[77,46],[77,57]]]]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.export-excel-button-text"],[],["loc",[null,[78,14],[78,69]]]]],["element","action",["showExportDialog"],[],["loc",[null,[79,8],[79,37]]]],["inline","flexberry-menu",[],["items",["subexpr","@mut",[["get","exportExcelItems",["loc",[null,[83,14],[83,30]]]]],[],[]],"onItemClick",["subexpr","action",["onExportMenuItemClick"],[],["loc",[null,[84,20],[84,52]]]]],["loc",[null,[82,6],[85,8]]]]],locals:[],templates:[]};})();var child7=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":96,"column":6},"end":{"line":101,"column":6}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","flexberry-menu",[],["items",["subexpr","@mut",[["get","colsSettingsItems",["loc",[null,[98,16],[98,33]]]]],[],[]],"onItemClick",["subexpr","action",["onMenuItemClick"],[],["loc",[null,[99,22],[99,48]]]]],["loc",[null,[97,8],[100,10]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":88,"column":2},"end":{"line":103,"column":2}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui buttons");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createElement("button");dom.setAttribute(el2,"class","ui icon button config-button");var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","large table icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n      ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element22=dom.childAt(fragment,[1]);var element23=dom.childAt(element22,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element23,'title');morphs[1] = dom.createElementMorph(element23);morphs[2] = dom.createMorphAt(element22,3,3);return morphs;},statements:[["attribute","title",["subexpr","t",["components.colsconfig-dialog-content.title"],[],["loc",[null,[92,14],[92,64]]]]],["element","action",["showConfigDialog"],[],["loc",[null,[93,8],[93,37]]]],["block","if",[["get","colsSettingsItems",["loc",[null,[96,12],[96,29]]]]],[],0,null,["loc",[null,[96,6],[101,13]]]]],locals:[],templates:[child0]};})();var child8=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":104,"column":2},"end":{"line":111,"column":2}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("    ");dom.appendChild(el0,el1);var el1=dom.createElement("button");var el2=dom.createTextNode("\n      ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element21=dom.childAt(fragment,[1]);var morphs=new Array(4);morphs[0] = dom.createAttrMorph(element21,'class');morphs[1] = dom.createAttrMorph(element21,'title');morphs[2] = dom.createElementMorph(element21);morphs[3] = dom.createMorphAt(element21,1,1);return morphs;},statements:[["attribute","class",["concat",["ui ",["subexpr","if",[["get","customButton.buttonClasses",["loc",[null,[106,21],[106,47]]]],["get","customButton.buttonClasses",["loc",[null,[106,48],[106,74]]]],""],[],["loc",[null,[106,16],[106,79]]]]," button"]]],["attribute","title",["subexpr","if",[["get","customButton.buttonTitle",["loc",[null,[107,17],[107,41]]]],["get","customButton.buttonTitle",["loc",[null,[107,42],[107,66]]]]],[],["loc",[null,[107,12],[107,68]]]]],["element","action",["customButtonAction",["get","customButton.buttonAction",["loc",[null,[108,36],[108,61]]]]],[],["loc",[null,[108,6],[108,63]]]],["inline","if",[["get","customButton.buttonName",["loc",[null,[109,11],[109,34]]]],["get","customButton.buttonName",["loc",[null,[109,35],[109,58]]]],["subexpr","t",["components.olv-toolbar.custom-button-text"],[],["loc",[null,[109,59],[109,106]]]]],[],["loc",[null,[109,6],[109,108]]]]],locals:["customButton"],templates:[]};})();var child9=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":143,"column":4},"end":{"line":151,"column":4}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","ui-message",[],["type","error","closeable",true,"visible",true,"title","Error occurred","message",["subexpr","@mut",[["get","currentError",["loc",[null,[149,16],[149,28]]]]],[],[]]],["loc",[null,[144,6],[150,8]]]]],locals:["currentError"],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":142,"column":2},"end":{"line":152,"column":2}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","errorMessages",["loc",[null,[143,12],[143,25]]]]],[],0,null,["loc",[null,[143,4],[151,13]]]]],locals:[],templates:[child0]};})();var child10=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":156,"column":8},"end":{"line":158,"column":8}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("th");dom.setAttribute(el1,"class","object-list-view-operations collapsing");dom.setAttribute(el1,"data-olv-header-property-name","OlvRowToolbar");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child11=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":164,"column":16},"end":{"line":166,"column":16}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","t",[["get","column.keyLocale",["loc",[null,[165,22],[165,38]]]]],[],["loc",[null,[165,18],[165,40]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":166,"column":16},"end":{"line":168,"column":16}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["content","column.header",["loc",[null,[167,18],[167,35]]]]],locals:[],templates:[]};})();var child2=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":172,"column":20},"end":{"line":176,"column":20}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                      ▲");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element18=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element18,'title');morphs[1] = dom.createMorphAt(element18,1,1);return morphs;},statements:[["attribute","title",["concat",[["subexpr","t",["components.object-list-view.sort-ascending"],[],["loc",[null,[173,34],[173,84]]]]]]],["content","column.sortNumber",["loc",[null,[174,23],[174,44]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":176,"column":20},"end":{"line":180,"column":20}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                      ");dom.appendChild(el0,el1);var el1=dom.createElement("div");var el2=dom.createTextNode("\n                      ▼");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                      ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element17=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element17,'title');morphs[1] = dom.createMorphAt(element17,1,1);return morphs;},statements:[["attribute","title",["concat",[["subexpr","t",["components.object-list-view.sort-descending"],[],["loc",[null,[177,34],[177,85]]]]]]],["content","column.sortNumber",["loc",[null,[178,23],[178,44]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":170,"column":16},"end":{"line":182,"column":16}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"style","float:right;");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["block","if",[["get","column.sortAscending",["loc",[null,[172,26],[172,46]]]]],[],0,1,["loc",[null,[172,20],[180,27]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":160,"column":10},"end":{"line":185,"column":10}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("th");dom.setAttribute(el1,"class","dt-head-left me class");var el2=dom.createTextNode("\n              ");dom.appendChild(el1,el2);var el2=dom.createElement("div");var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);var el3=dom.createElement("span");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("                ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("              ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element19=dom.childAt(fragment,[1]);var element20=dom.childAt(element19,[1]);var morphs=new Array(5);morphs[0] = dom.createAttrMorph(element19,'onclick');morphs[1] = dom.createAttrMorph(element20,'data-olv-header-property-name');morphs[2] = dom.createAttrMorph(element20,'title');morphs[3] = dom.createMorphAt(dom.childAt(element20,[1]),1,1);morphs[4] = dom.createMorphAt(element20,3,3);return morphs;},statements:[["attribute","onclick",["subexpr","action",["headerCellClick",["get","column",["loc",[null,[161,82],[161,88]]]]],[],["loc",[null,[161,54],[161,91]]]]],["attribute","data-olv-header-property-name",["get","column.propName",["loc",[null,[162,51],[162,66]]]]],["attribute","title",["get","sortTitleCompute",["loc",[null,[162,77],[162,93]]]]],["block","if",[["get","column.keyLocale",["loc",[null,[164,22],[164,38]]]]],[],0,1,["loc",[null,[164,16],[168,23]]]],["block","if",[["get","column.sorted",["loc",[null,[170,22],[170,35]]]]],[],2,null,["loc",[null,[170,16],[182,23]]]]],locals:[],templates:[child0,child1,child2]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":159,"column":8},"end":{"line":186,"column":8}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","column.hide",["loc",[null,[160,20],[160,31]]]]],[],0,null,["loc",[null,[160,10],[185,21]]]]],locals:["column"],templates:[child0]};})();var child12=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":187,"column":8},"end":{"line":189,"column":8}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("th");dom.setAttribute(el1,"class","object-list-view-menu collapsing");dom.setAttribute(el1,"data-olv-header-property-name","OlvRowMenu");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child13=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":195,"column":10},"end":{"line":197,"column":10}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"rowspan","1");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":201,"column":16},"end":{"line":209,"column":16}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","component",["flexberry-dropdown"],["value",["subexpr","@mut",[["get","column.filter.condition",["loc",[null,[203,26],[203,49]]]]],[],[]],"items",["subexpr","@mut",[["get","column.filter.conditions",["loc",[null,[204,26],[204,50]]]]],[],[]],"class","compact fluid","placeholder","","needChecksOnValue",false],["loc",[null,[202,18],[208,20]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":199,"column":12},"end":{"line":211,"column":12}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("td");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element14=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element14,'style');morphs[1] = dom.createMorphAt(element14,1,1);return morphs;},statements:[["attribute","style",["get","defaultPaddingStyle",["loc",[null,[200,26],[200,45]]]]],["block","if",[["get","column.filter.conditions",["loc",[null,[201,22],[201,46]]]]],[],0,null,["loc",[null,[201,16],[209,23]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":198,"column":10},"end":{"line":212,"column":10}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","column.hide",["loc",[null,[199,22],[199,33]]]]],[],0,null,["loc",[null,[199,12],[211,23]]]]],locals:["column"],templates:[child0]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":213,"column":10},"end":{"line":215,"column":10}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"rowspan","1");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child3=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":218,"column":10},"end":{"line":220,"column":10}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"rowspan","1");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child4=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":224,"column":16},"end":{"line":229,"column":16}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","component",[["get","column.filter.component.name",["loc",[null,[225,30],[225,58]]]]],["value",["subexpr","@mut",[["get","column.filter.pattern",["loc",[null,[226,26],[226,47]]]]],[],[]],"dynamicProperties",["subexpr","@mut",[["get","column.filter.component.properties",["loc",[null,[227,38],[227,72]]]]],[],[]]],["loc",[null,[225,18],[228,20]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":222,"column":12},"end":{"line":231,"column":12}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("td");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element13=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element13,'style');morphs[1] = dom.createMorphAt(element13,1,1);return morphs;},statements:[["attribute","style",["get","defaultPaddingStyle",["loc",[null,[223,26],[223,45]]]]],["block","if",[["get","column.filter.component.name",["loc",[null,[224,22],[224,50]]]]],[],0,null,["loc",[null,[224,16],[229,23]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":221,"column":10},"end":{"line":232,"column":10}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","column.hide",["loc",[null,[222,22],[222,33]]]]],[],0,null,["loc",[null,[222,12],[231,23]]]]],locals:["column"],templates:[child0]};})();var child5=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":233,"column":10},"end":{"line":235,"column":10}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("            ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"rowspan","1");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":193,"column":6},"end":{"line":237,"column":6}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n        ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element15=dom.childAt(fragment,[1]);var element16=dom.childAt(fragment,[3]);var morphs=new Array(6);morphs[0] = dom.createMorphAt(element15,1,1);morphs[1] = dom.createMorphAt(element15,2,2);morphs[2] = dom.createMorphAt(element15,3,3);morphs[3] = dom.createMorphAt(element16,1,1);morphs[4] = dom.createMorphAt(element16,2,2);morphs[5] = dom.createMorphAt(element16,3,3);return morphs;},statements:[["block","if",[["get","showHelperColumn",["loc",[null,[195,16],[195,32]]]]],[],0,null,["loc",[null,[195,10],[197,17]]]],["block","each",[["get","columns",["loc",[null,[198,18],[198,25]]]]],[],1,null,["loc",[null,[198,10],[212,19]]]],["block","if",[["get","showMenuColumn",["loc",[null,[213,16],[213,30]]]]],[],2,null,["loc",[null,[213,10],[215,17]]]],["block","if",[["get","showHelperColumn",["loc",[null,[218,16],[218,32]]]]],[],3,null,["loc",[null,[218,10],[220,17]]]],["block","each",[["get","columns",["loc",[null,[221,18],[221,25]]]]],[],4,null,["loc",[null,[221,10],[232,19]]]],["block","if",[["get","showMenuColumn",["loc",[null,[233,16],[233,30]]]]],[],5,null,["loc",[null,[233,10],[235,17]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5]};})();var child14=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":238,"column":6},"end":{"line":244,"column":6}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);var el2=dom.createElement("td");dom.setAttribute(el2,"style","text-align:center;");var el3=dom.createTextNode("\n            ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","ui active centered inline loader");dom.appendChild(el2,el3);var el3=dom.createTextNode(" ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n          ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element12=dom.childAt(fragment,[1,1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element12,'colspan');morphs[1] = dom.createMorphAt(element12,3,3);return morphs;},statements:[["attribute","colspan",["concat",[["get","colspan",["loc",[null,[240,25],[240,32]]]]]]],["inline","t",["components.object-list-view.loading-text"],[],["loc",[null,[241,65],[241,113]]]]],locals:[],templates:[]};})();var child15=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":245,"column":8},"end":{"line":251,"column":8}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n            ");dom.appendChild(el1,el2);var el2=dom.createElement("td");dom.setAttribute(el2,"style","text-align:center;");var el3=dom.createTextNode("\n                ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n            ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element11=dom.childAt(fragment,[1,1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element11,'colspan');morphs[1] = dom.createMorphAt(element11,1,1);return morphs;},statements:[["attribute","colspan",["concat",[["get","colspan",["loc",[null,[247,27],[247,34]]]]]]],["content","placeholder",["loc",[null,[248,16],[248,31]]]]],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":258,"column":22},"end":{"line":262,"column":22}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","cell");var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element7=dom.childAt(fragment,[1,1]);var morphs=new Array(1);morphs[0] = dom.createAttrMorph(element7,'class');return morphs;},statements:[["attribute","class",["concat",["asterisk small red icon ",["subexpr","unless",[["get","record.data.hasDirtyAttributes",["loc",[null,[260,69],[260,99]]]],"transparent"],[],["loc",[null,[260,60],[260,115]]]]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":263,"column":22},"end":{"line":270,"column":22}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","cell");var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["inline","flexberry-checkbox",[],["readonly",["subexpr","or",[["get","readonly",["loc",[null,[266,41],[266,49]]]],["subexpr","not",[["get","record.rowConfig.canBeSelected",["loc",[null,[266,55],[266,85]]]]],[],["loc",[null,[266,50],[266,86]]]]],[],["loc",[null,[266,37],[266,87]]]],"onChange",["subexpr","action",["selectRow",["get","record",["loc",[null,[267,57],[267,63]]]]],[],["loc",[null,[267,37],[267,64]]]]],["loc",[null,[265,26],[268,28]]]]],locals:[],templates:[]};})();var child2=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":271,"column":22},"end":{"line":277,"column":22}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","cell");var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createElement("button");var el3=dom.createTextNode("\n                            ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","minus icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                          ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element6=dom.childAt(fragment,[1,1]);var morphs=new Array(2);morphs[0] = dom.createAttrMorph(element6,'class');morphs[1] = dom.createElementMorph(element6);return morphs;},statements:[["attribute","class",["concat",["ui ui-delete ",["get","buttonClass",["loc",[null,[273,56],[273,67]]]]," ",["subexpr","if",[["subexpr","or",[["get","readonly",["loc",[null,[273,79],[273,87]]]],["subexpr","not",[["get","record.rowConfig.canBeDeleted",["loc",[null,[273,93],[273,122]]]]],[],["loc",[null,[273,88],[273,123]]]]],[],["loc",[null,[273,75],[273,124]]]],"disabled"],[],["loc",[null,[273,70],[273,137]]]]," button"]]],["element","action",["deleteRow",["get","record",["loc",[null,[273,167],[273,173]]]]],[],["loc",[null,[273,146],[273,175]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":256,"column":18},"end":{"line":279,"column":18}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                    ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","object-list-view-helper-column-cell");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element8=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createMorphAt(element8,1,1);morphs[1] = dom.createMorphAt(element8,2,2);morphs[2] = dom.createMorphAt(element8,3,3);return morphs;},statements:[["block","if",[["get","showAsteriskInRow",["loc",[null,[258,28],[258,45]]]]],[],0,null,["loc",[null,[258,22],[262,29]]]],["block","if",[["get","showCheckBoxInRow",["loc",[null,[263,28],[263,45]]]]],[],1,null,["loc",[null,[263,22],[270,29]]]],["block","if",[["get","showDeleteButtonInRow",["loc",[null,[271,28],[271,49]]]]],[],2,null,["loc",[null,[271,22],[277,29]]]]],locals:[],templates:[child0,child1,child2]};})();var child1=(function(){var child0=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":284,"column":22},"end":{"line":292,"column":22}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","component",[["get","column.cellComponent.componentName",["loc",[null,[285,36],[285,70]]]]],["dynamicProperties",["subexpr","@mut",[["get","column.cellComponent.componentProperties",["loc",[null,[286,44],[286,84]]]]],[],[]],"relatedModel",["subexpr","@mut",[["get","record.data",["loc",[null,[287,39],[287,50]]]]],[],[]],"value",["subexpr","mut",[["subexpr","get",[["get","record.data",["loc",[null,[288,42],[288,53]]]],["get","column.propName",["loc",[null,[288,54],[288,69]]]]],[],["loc",[null,[288,37],[288,70]]]]],[],["loc",[null,[288,32],[288,71]]]],"readonly",["subexpr","readonly-cell",[["get","record.rowConfig.readonlyColumns",["loc",[null,[289,50],[289,82]]]],["get","column.propName",["loc",[null,[289,83],[289,98]]]],["get","readonly",["loc",[null,[289,99],[289,107]]]]],[],["loc",[null,[289,35],[289,108]]]],"required",["subexpr","@mut",[["get","required",["loc",[null,[290,35],[290,43]]]]],[],[]]],["loc",[null,[285,24],[291,26]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":292,"column":22},"end":{"line":299,"column":22}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","oveflow-text");var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                        ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["inline","get-formatted",[["get","record.data",["loc",[null,[294,42],[294,53]]]],["get","column.propName",["loc",[null,[294,54],[294,69]]]]],["dateFormat",["subexpr","@mut",[["get","dateFormat",["loc",[null,[295,39],[295,49]]]]],[],[]],"moment",["subexpr","@mut",[["get","moment",["loc",[null,[296,35],[296,41]]]]],[],[]]],["loc",[null,[294,26],[297,28]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":282,"column":18},"end":{"line":301,"column":18}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                    ");dom.appendChild(el0,el1);var el1=dom.createElement("td");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("                    ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element5=dom.childAt(fragment,[1]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element5,'style');morphs[1] = dom.createElementMorph(element5);morphs[2] = dom.createMorphAt(element5,1,1);return morphs;},statements:[["attribute","style",["get","defaultPaddingStyle",["loc",[null,[283,96],[283,115]]]]],["element","action",["objectListViewRowClick",["get","record",["loc",[null,[283,58],[283,64]]]]],["preventDefault",false],["loc",[null,[283,24],[283,87]]]],["block","if",[["get","column.cellComponent.componentName",["loc",[null,[284,28],[284,62]]]]],[],0,1,["loc",[null,[284,22],[299,29]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":281,"column":16},"end":{"line":302,"column":16}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","column.hide",["loc",[null,[282,28],[282,39]]]]],[],0,null,["loc",[null,[282,18],[301,29]]]]],locals:["column"],templates:[child0]};})();var child2=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":308,"column":24},"end":{"line":313,"column":24}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                          ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","item");var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","edit icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element2=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element2);morphs[1] = dom.createMorphAt(dom.childAt(element2,[3]),0,0);return morphs;},statements:[["element","action",["objectListViewRowClick",["get","record",["loc",[null,[309,79],[309,85]]]]],[],["loc",[null,[309,44],[309,88]]]],["inline","t",["components.object-list-view.menu-in-row.edit-menu-item-title"],[],["loc",[null,[311,34],[311,102]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":314,"column":24},"end":{"line":319,"column":24}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                          ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","item");var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);var el2=dom.createElement("i");dom.setAttribute(el2,"class","trash icon");dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                            ");dom.appendChild(el1,el2);var el2=dom.createElement("span");var el3=dom.createComment("");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                          ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element1=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element1);morphs[1] = dom.createMorphAt(dom.childAt(element1,[3]),0,0);return morphs;},statements:[["element","action",["deleteRow",["get","record",["loc",[null,[315,66],[315,72]]]]],[],["loc",[null,[315,44],[315,75]]]],["inline","t",["components.object-list-view.menu-in-row.delete-menu-item-title"],[],["loc",[null,[317,34],[317,104]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":303,"column":16},"end":{"line":323,"column":16}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("                  ");dom.appendChild(el0,el1);var el1=dom.createElement("td");dom.setAttribute(el1,"class","object-list-view-menu");var el2=dom.createTextNode("\n                    ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","basic right pointing ui icon dropdown button");var el3=dom.createTextNode("\n                      ");dom.appendChild(el2,el3);var el3=dom.createElement("i");dom.setAttribute(el3,"class","list layout icon");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                      ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","left menu");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("                      ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n                    ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n                  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element3=dom.childAt(fragment,[1]);var element4=dom.childAt(element3,[1,3]);var morphs=new Array(3);morphs[0] = dom.createAttrMorph(element3,'style');morphs[1] = dom.createMorphAt(element4,1,1);morphs[2] = dom.createMorphAt(element4,2,2);return morphs;},statements:[["attribute","style",["get","defaultPaddingStyle",["loc",[null,[304,60],[304,79]]]]],["block","if",[["subexpr","and",[["get","showEditMenuItemInRow",["loc",[null,[308,35],[308,56]]]],["get","record.rowConfig.canBeSelected",["loc",[null,[308,57],[308,87]]]]],[],["loc",[null,[308,30],[308,88]]]]],[],0,null,["loc",[null,[308,24],[313,31]]]],["block","if",[["subexpr","and",[["get","showDeleteMenuItemInRow",["loc",[null,[314,35],[314,58]]]],["get","record.rowConfig.canBeDeleted",["loc",[null,[314,59],[314,88]]]]],[],["loc",[null,[314,30],[314,89]]]]],[],1,null,["loc",[null,[314,24],[319,31]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":252,"column":10},"end":{"line":325,"column":10}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("              ");dom.appendChild(el0,el1);var el1=dom.createElement("tr");var el2=dom.createTextNode("\n                ");dom.appendChild(el1,el2);var el2=dom.createElement("td");var el3=dom.createTextNode("\n                  ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","hidden");var el4=dom.createComment("");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("                ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("              ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element9=dom.childAt(fragment,[1]);var element10=dom.childAt(element9,[1]);var morphs=new Array(7);morphs[0] = dom.createAttrMorph(element9,'class');morphs[1] = dom.createAttrMorph(element10,'class');morphs[2] = dom.createAttrMorph(element10,'style');morphs[3] = dom.createMorphAt(dom.childAt(element10,[1]),0,0);morphs[4] = dom.createMorphAt(element10,3,3);morphs[5] = dom.createMorphAt(element9,3,3);morphs[6] = dom.createMorphAt(element9,4,4);return morphs;},statements:[["attribute","class",["concat",[["get","record.rowConfig.customClass",["loc",[null,[253,27],[253,55]]]]]]],["attribute","class",["concat",["object-list-view-helper-column ",["subexpr","unless",[["get","showHelperColumn",["loc",[null,[254,67],[254,83]]]],"hidden"],[],["loc",[null,[254,58],[254,94]]]]]]],["attribute","style",["get","defaultPaddingStyle",["loc",[null,[254,104],[254,123]]]]],["content","record.key",["loc",[null,[255,38],[255,52]]]],["block","if",[["get","showHelperColumn",["loc",[null,[256,24],[256,40]]]]],[],0,null,["loc",[null,[256,18],[279,25]]]],["block","each",[["get","columns",["loc",[null,[281,24],[281,31]]]]],[],1,null,["loc",[null,[281,16],[302,25]]]],["block","if",[["get","showMenuColumn",["loc",[null,[303,22],[303,36]]]]],[],2,null,["loc",[null,[303,16],[323,23]]]]],locals:["record"],templates:[child0,child1,child2]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":251,"column":8},"end":{"line":326,"column":8}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","each",[["get","contentWithKeys",["loc",[null,[252,18],[252,33]]]]],["key","key"],0,null,["loc",[null,[252,10],[325,19]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":244,"column":6},"end":{"line":327,"column":6}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","unless",[["get","content",["loc",[null,[245,18],[245,25]]]]],[],0,1,["loc",[null,[245,8],[326,19]]]]],locals:[],templates:[child0,child1]};})();var child16=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":335,"column":6},"end":{"line":337,"column":6}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("        ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui button");var el2=dom.createTextNode("...");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(){return [];},statements:[],locals:[],templates:[]};})();var child1=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":338,"column":8},"end":{"line":340,"column":8}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui active button");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),0,0);return morphs;},statements:[["content","page.number",["loc",[null,[339,40],[339,55]]]]],locals:[],templates:[]};})();var child1=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":340,"column":8},"end":{"line":342,"column":8}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("          ");dom.appendChild(el0,el1);var el1=dom.createElement("button");dom.setAttribute(el1,"class","ui button");var el2=dom.createComment("");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element0=dom.childAt(fragment,[1]);var morphs=new Array(2);morphs[0] = dom.createElementMorph(element0);morphs[1] = dom.createMorphAt(element0,0,0);return morphs;},statements:[["element","action",["gotoPage",["get","this.attrs.gotoPage",["loc",[null,[341,56],[341,75]]]],["get","page.number",["loc",[null,[341,76],[341,87]]]]],[],["loc",[null,[341,36],[341,89]]]],["content","page.number",["loc",[null,[341,90],[341,105]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":337,"column":6},"end":{"line":343,"column":6}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","page.isCurrent",["loc",[null,[338,14],[338,28]]]]],[],0,1,["loc",[null,[338,8],[342,15]]]]],locals:[],templates:[child0,child1]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":334,"column":4},"end":{"line":344,"column":4}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:1,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,0,0,contextualElement);dom.insertBoundary(fragment,0);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","page.isEllipsis",["loc",[null,[335,12],[335,27]]]]],[],0,1,["loc",[null,[335,6],[343,13]]]]],locals:["page"],templates:[child0,child1]};})();var child17=(function(){var child0=(function(){return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":353,"column":4},"end":{"line":357,"column":4}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("      ");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(fragment,1,1,contextualElement);return morphs;},statements:[["inline","concat",[["subexpr","t",["components.flexberry-objectlistview.showing-entries.showing"],[],["loc",[null,[355,8],[355,73]]]],["get","currentIntervalRecords",["loc",[null,[355,74],[355,96]]]],["subexpr","t",["components.flexberry-objectlistview.showing-entries.of"],[],["loc",[null,[355,97],[355,157]]]],["get","recordsTotalCount",["loc",[null,[355,158],[355,175]]]],["subexpr","t",["components.flexberry-objectlistview.showing-entries.entries"],[],["loc",[null,[355,176],[355,241]]]]],[],["loc",[null,[354,6],[356,8]]]]],locals:[],templates:[]};})();return {meta:{"fragmentReason":false,"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":351,"column":0},"end":{"line":359,"column":0}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createTextNode("  ");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","showing-entries");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var morphs=new Array(1);morphs[0] = dom.createMorphAt(dom.childAt(fragment,[1]),1,1);return morphs;},statements:[["block","if",[["subexpr","and",[["get","currentIntervalRecords",["loc",[null,[353,15],[353,37]]]],["get","recordsTotalCount",["loc",[null,[353,38],[353,55]]]]],[],["loc",[null,[353,10],[353,56]]]]],[],0,null,["loc",[null,[353,4],[357,11]]]]],locals:[],templates:[child0]};})();return {meta:{"fragmentReason":{"name":"missing-wrapper","problems":["multiple-nodes","wrong-type"]},"revision":"Ember@2.4.6","loc":{"source":null,"start":{"line":1,"column":0},"end":{"line":360,"column":0}},"moduleName":"ember-app/templates/components/flexberry-simpleolv.hbs"},isEmpty:false,arity:0,cachedFragment:null,hasRendered:false,buildFragment:function buildFragment(dom){var el0=dom.createDocumentFragment();var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui secondary menu no-margin ");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","olv-toolbar-info-modal-dialog ui small basic modal");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","ui icon header");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("i");dom.setAttribute(el4,"class","olvt icon");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","center aligned ui grid");var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);var el4=dom.createElement("button");dom.setAttribute(el4,"class","ui icon button");dom.setAttribute(el4,"id","OLVToolbarInfoCopyButton");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("i");dom.setAttribute(el5,"class","copy icon");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("\n    ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","actions");var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);var el5=dom.createElement("div");dom.setAttribute(el5,"class","olv-toolbar-info-modal-dialog-ok-button ui approve green inverted button");var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);var el6=dom.createElement("i");dom.setAttribute(el6,"class","remove icon");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n        ");dom.appendChild(el5,el6);var el6=dom.createComment("");dom.appendChild(el5,el6);var el6=dom.createTextNode("\n      ");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n    ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("div");dom.setAttribute(el3,"class","ui form");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("div");dom.setAttribute(el4,"class","olv-toolbar-info-modal-dialog-content center aligned ui field");var el5=dom.createTextNode("\n        ");dom.appendChild(el4,el5);var el5=dom.createElement("textarea");dom.setAttribute(el5,"id","OLVToolbarInfoContent");dom.setAttribute(el5,"cols","80");dom.setAttribute(el5,"rows","20");var el6=dom.createComment("");dom.appendChild(el5,el6);dom.appendChild(el4,el5);var el5=dom.createTextNode("\n      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n\n");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","object-list-view-container");var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);var el2=dom.createComment("");dom.appendChild(el1,el2);var el2=dom.createTextNode("  ");dom.appendChild(el1,el2);var el2=dom.createElement("table");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("thead");var el4=dom.createTextNode("\n      ");dom.appendChild(el3,el4);var el4=dom.createElement("tr");var el5=dom.createTextNode("\n");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createComment("");dom.appendChild(el4,el5);var el5=dom.createTextNode("      ");dom.appendChild(el4,el5);dom.appendChild(el3,el4);var el4=dom.createTextNode("\n    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("tbody");var el4=dom.createTextNode("\n");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createComment("");dom.appendChild(el3,el4);var el4=dom.createTextNode("    ");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createElement("div");dom.setAttribute(el1,"class","ui secondary menu no-margin");var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","ui basic buttons");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createElement("button");var el4=dom.createTextNode("«");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("    ");dom.appendChild(el2,el3);var el3=dom.createElement("button");var el4=dom.createTextNode("»");dom.appendChild(el3,el4);dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n  ");dom.appendChild(el1,el2);var el2=dom.createElement("div");dom.setAttribute(el2,"class","right menu");var el3=dom.createTextNode("\n    ");dom.appendChild(el2,el3);var el3=dom.createComment("");dom.appendChild(el2,el3);var el3=dom.createTextNode("\n  ");dom.appendChild(el2,el3);dom.appendChild(el1,el2);var el2=dom.createTextNode("\n");dom.appendChild(el1,el2);dom.appendChild(el0,el1);var el1=dom.createTextNode("\n");dom.appendChild(el0,el1);var el1=dom.createComment("");dom.appendChild(el0,el1);return el0;},buildRenderNodes:function buildRenderNodes(dom,fragment,contextualElement){var element36=dom.childAt(fragment,[0]);var element37=dom.childAt(element36,[11]);var element38=dom.childAt(element37,[3]);var element39=dom.childAt(element38,[1]);var element40=dom.childAt(fragment,[2]);var element41=dom.childAt(element40,[3]);var element42=dom.childAt(element41,[1,1]);var element43=dom.childAt(element41,[3]);var element44=dom.childAt(fragment,[4]);var element45=dom.childAt(element44,[1]);var element46=dom.childAt(element45,[1]);var element47=dom.childAt(element45,[5]);var morphs=new Array(30);morphs[0] = dom.createMorphAt(element36,1,1);morphs[1] = dom.createMorphAt(element36,2,2);morphs[2] = dom.createMorphAt(element36,3,3);morphs[3] = dom.createMorphAt(element36,4,4);morphs[4] = dom.createMorphAt(element36,5,5);morphs[5] = dom.createMorphAt(element36,6,6);morphs[6] = dom.createMorphAt(element36,7,7);morphs[7] = dom.createMorphAt(element36,8,8);morphs[8] = dom.createMorphAt(element36,9,9);morphs[9] = dom.createMorphAt(dom.childAt(element37,[1]),3,3);morphs[10] = dom.createAttrMorph(element39,'title');morphs[11] = dom.createElementMorph(element39);morphs[12] = dom.createMorphAt(element39,3,3);morphs[13] = dom.createMorphAt(dom.childAt(element38,[3,1]),3,3);morphs[14] = dom.createMorphAt(dom.childAt(element37,[5,1,1]),0,0);morphs[15] = dom.createMorphAt(element40,1,1);morphs[16] = dom.createAttrMorph(element41,'class');morphs[17] = dom.createMorphAt(element42,1,1);morphs[18] = dom.createMorphAt(element42,2,2);morphs[19] = dom.createMorphAt(element42,3,3);morphs[20] = dom.createAttrMorph(element43,'class');morphs[21] = dom.createMorphAt(element43,1,1);morphs[22] = dom.createMorphAt(element43,2,2);morphs[23] = dom.createAttrMorph(element46,'class');morphs[24] = dom.createElementMorph(element46);morphs[25] = dom.createMorphAt(element45,3,3);morphs[26] = dom.createAttrMorph(element47,'class');morphs[27] = dom.createElementMorph(element47);morphs[28] = dom.createMorphAt(dom.childAt(element44,[3]),1,1);morphs[29] = dom.createMorphAt(fragment,6,6,contextualElement);dom.insertBoundary(fragment,null);return morphs;},statements:[["block","if",[["get","refreshButton",["loc",[null,[2,8],[2,21]]]]],[],0,null,["loc",[null,[2,2],[9,9]]]],["block","if",[["get","createNewButton",["loc",[null,[10,8],[10,23]]]]],[],1,null,["loc",[null,[10,2],[17,9]]]],["block","if",[["get","deleteButton",["loc",[null,[18,8],[18,20]]]]],[],2,null,["loc",[null,[18,2],[25,9]]]],["block","if",[["get","availableHierarchicalMode",["loc",[null,[26,8],[26,33]]]]],[],3,null,["loc",[null,[26,2],[33,9]]]],["block","if",[["get","enableFilters",["loc",[null,[34,8],[34,21]]]]],[],4,null,["loc",[null,[34,2],[52,9]]]],["block","if",[["get","filterButton",["loc",[null,[53,8],[53,20]]]]],[],5,null,["loc",[null,[53,2],[73,9]]]],["block","if",[["get","exportExcelButton",["loc",[null,[74,8],[74,25]]]]],[],6,null,["loc",[null,[74,2],[87,9]]]],["block","if",[["get","colsConfigButton",["loc",[null,[88,8],[88,24]]]]],[],7,null,["loc",[null,[88,2],[103,9]]]],["block","each",[["get","customButtons",["loc",[null,[104,10],[104,23]]]]],[],8,null,["loc",[null,[104,2],[111,11]]]],["content","_infoModalDialogCaption",["loc",[null,[115,6],[115,33]]]],["attribute","title",["subexpr","t",["components.olv-toolbar.copy"],[],["loc",[null,[120,12],[120,47]]]]],["element","action",["copyJSONContent"],[],["loc",[null,[121,6],[121,34]]]],["inline","t",["components.olv-toolbar.copy"],[],["loc",[null,[124,8],[124,43]]]],["inline","t",["components.olv-toolbar.close"],[],["loc",[null,[129,8],[129,44]]]],["content","_infoModalDialogContent",["loc",[null,[135,65],[135,92]]]],["block","if",[["get","errorMessages",["loc",[null,[142,8],[142,21]]]]],[],9,null,["loc",[null,[142,2],[152,9]]]],["attribute","class",["concat",["object-list-view ui unstackable celled ",["subexpr","if",[["get","readonly",["loc",[null,[153,60],[153,68]]]],"readonly"],[],["loc",[null,[153,55],[153,81]]]]," ",["get","tableClass",["loc",[null,[153,84],[153,94]]]]," table"]]],["block","if",[["get","showHelperColumn",["loc",[null,[156,14],[156,30]]]]],[],10,null,["loc",[null,[156,8],[158,15]]]],["block","each",[["get","columns",["loc",[null,[159,16],[159,23]]]]],[],11,null,["loc",[null,[159,8],[186,17]]]],["block","if",[["get","showMenuColumn",["loc",[null,[187,14],[187,28]]]]],[],12,null,["loc",[null,[187,8],[189,15]]]],["attribute","class",["concat",[["subexpr","if",[["get","showLoadingTbodyClass",["loc",[null,[192,23],[192,44]]]],"ui loading form",""],[],["loc",[null,[192,18],[192,67]]]]]]],["block","if",[["get","showFilters",["loc",[null,[193,12],[193,23]]]]],[],13,null,["loc",[null,[193,6],[237,13]]]],["block","if",[["get","rowsInLoadingState",["loc",[null,[238,12],[238,30]]]]],[],14,15,["loc",[null,[238,6],[327,13]]]],["attribute","class",["concat",["ui ",["subexpr","unless",[["get","hasPreviousPage",["loc",[null,[333,31],[333,46]]]],"disabled"],[],["loc",[null,[333,22],[333,59]]]]," button prev-page-button"]]],["element","action",["previousPage",["get","this.attrs.previousPage",["loc",[null,[333,109],[333,132]]]]],[],["loc",[null,[333,85],[333,134]]]],["block","each",[["get","pages",["loc",[null,[334,12],[334,17]]]]],[],16,null,["loc",[null,[334,4],[344,13]]]],["attribute","class",["concat",["ui ",["subexpr","unless",[["get","hasNextPage",["loc",[null,[345,31],[345,42]]]],"disabled"],[],["loc",[null,[345,22],[345,55]]]]," button next-page-button"]]],["element","action",["nextPage",["get","this.attrs.nextPage",["loc",[null,[345,101],[345,120]]]]],[],["loc",[null,[345,81],[345,122]]]],["inline","flexberry-dropdown",[],["items",["subexpr","@mut",[["get","perPageValues",["loc",[null,[348,31],[348,44]]]]],[],[]],"value",["subexpr","@mut",[["get","perPageValue",["loc",[null,[348,51],[348,63]]]]],[],[]],"class","compact selection","onChange",["subexpr","action",["perPageClick"],[],["loc",[null,[348,99],[348,122]]]],"needChecksOnValue",false],["loc",[null,[348,4],[348,148]]]],["block","if",[["get","showShowingEntries",["loc",[null,[351,6],[351,24]]]]],[],17,null,["loc",[null,[351,0],[359,7]]]]],locals:[],templates:[child0,child1,child2,child3,child4,child5,child6,child7,child8,child9,child10,child11,child12,child13,child14,child15,child16,child17]};})());});
define("ember-app/templates/components/flexberry-textarea", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-textarea.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "textarea", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [3, 15], [3, 23]]]], "readonly"], [], ["loc", [null, [3, 11], [3, 35]]]], "required", ["subexpr", "if", [["get", "required", ["loc", [null, [4, 15], [4, 23]]]], "required"], [], ["loc", [null, [4, 11], [4, 35]]]], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [5, 14], [5, 25]]]]], [], []], "rows", ["subexpr", "@mut", [["get", "rows", ["loc", [null, [6, 7], [6, 11]]]]], [], []], "cols", ["subexpr", "@mut", [["get", "cols", ["loc", [null, [7, 7], [7, 11]]]]], [], []], "disabled", ["subexpr", "if", [["get", "disabled", ["loc", [null, [8, 15], [8, 23]]]], "disabled"], [], ["loc", [null, [8, 11], [8, 35]]]], "maxlength", ["subexpr", "@mut", [["get", "maxlength", ["loc", [null, [9, 12], [9, 21]]]]], [], []], "selectionEnd", ["subexpr", "@mut", [["get", "selectionEnd", ["loc", [null, [10, 15], [10, 27]]]]], [], []], "selectionStart", ["subexpr", "@mut", [["get", "selectionStart", ["loc", [null, [11, 17], [11, 31]]]]], [], []], "selectionDirection", ["subexpr", "@mut", [["get", "selectionDirection", ["loc", [null, [12, 21], [12, 39]]]]], [], []], "wrap", ["subexpr", "@mut", [["get", "wrap", ["loc", [null, [13, 7], [13, 11]]]]], [], []], "autofocus", ["subexpr", "if", [["get", "autofocus", ["loc", [null, [14, 16], [14, 25]]]], "autofocus"], [], ["loc", [null, [14, 12], [14, 38]]]], "spellcheck", ["subexpr", "if", [["get", "spellcheck", ["loc", [null, [15, 17], [15, 27]]]], "spellcheck"], [], ["loc", [null, [15, 13], [15, 41]]]]], ["loc", [null, [1, 0], [16, 2]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/components/flexberry-textbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-textbox.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [3, 9], [3, 13]]]]], [], []], "value", ["subexpr", "get", [["get", "this", ["loc", [null, [4, 15], [4, 19]]]], "value"], [], ["loc", [null, [4, 10], [4, 28]]]], "readonly", "readonly", "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [6, 13], [6, 21]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [7, 16], [7, 27]]]]], [], []]], ["loc", [null, [2, 2], [8, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-textbox.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", ["subexpr", "@mut", [["get", "type", ["loc", [null, [11, 9], [11, 13]]]]], [], []], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [13, 13], [13, 21]]]]], [], []], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [14, 16], [14, 27]]]]], [], []]], ["loc", [null, [10, 2], [15, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-textbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "readonly", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [16, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-app/templates/components/flexberry-toggler", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-toggler.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("i");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.setAttribute(el2, "class", "flexberry-toggler-caption");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(fragment, [2]);
        var morphs = new Array(5);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createAttrMorph(element1, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [2]), 0, 0);
        morphs[3] = dom.createAttrMorph(element2, 'class');
        morphs[4] = dom.createMorphAt(element2, 0, 0);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["title ", ["subexpr", "if", [["get", "expanded", ["loc", [null, [1, 23], [1, 31]]]], "active"], [], ["loc", [null, [1, 18], [1, 42]]]]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "iconClass", ["loc", [null, [2, 17], [2, 26]]]], ["get", "iconClass", ["loc", [null, [2, 27], [2, 36]]]], "dropdown icon"], [], ["loc", [null, [2, 12], [2, 55]]]]]]], ["content", "currentCaption", ["loc", [null, [2, 101], [2, 119]]]], ["attribute", "class", ["concat", ["content flexberry-toggler-content ", ["subexpr", "if", [["get", "expanded", ["loc", [null, [4, 51], [4, 59]]]], "active"], [], ["loc", [null, [4, 46], [4, 70]]]]]]], ["content", "yield", ["loc", [null, [4, 72], [4, 81]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/components/flexberry-validationmessage", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-validationmessage.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "error", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/components/flexberry-validationsummary", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/components/flexberry-validationsummary.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "message", ["loc", [null, [3, 8], [3, 19]]]]],
        locals: ["message"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 5
          }
        },
        "moduleName": "ember-app/templates/components/flexberry-validationsummary.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "list");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["block", "each", [["get", "messages", ["loc", [null, [2, 10], [2, 18]]]]], [], 0, null, ["loc", [null, [2, 2], [4, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/components/form-load-time-tracker", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/form-load-time-tracker.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(": ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(": ");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("br");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 10, 10, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "t", ["components.form-load-time-tracker.load-time"], [], ["loc", [null, [1, 0], [1, 51]]]], ["content", "loadTime", ["loc", [null, [1, 53], [1, 65]]]], ["inline", "t", ["components.form-load-time-tracker.render-time"], [], ["loc", [null, [2, 0], [2, 53]]]], ["content", "renderTime", ["loc", [null, [2, 55], [2, 69]]]], ["content", "yield", ["loc", [null, [3, 0], [3, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/components/groupedit-toolbar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "modifiers",
            "modifiers": ["action"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/groupedit-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "plus icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createAttrMorph(element1, 'title');
          morphs[2] = dom.createAttrMorph(element1, 'disabled');
          morphs[3] = dom.createElementMorph(element1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ui-add ", ["get", "buttonClass", ["loc", [null, [3, 23], [3, 34]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.groupedit-toolbar.add-button-text"], [], ["loc", [null, [4, 10], [4, 62]]]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [5, 15], [5, 23]]]]], ["element", "action", ["addRow"], [], ["loc", [null, [5, 26], [5, 45]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/groupedit-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "minus icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'title');
          morphs[2] = dom.createAttrMorph(element0, 'disabled');
          morphs[3] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ui-delete ", ["subexpr", "if", [["get", "_isDeleteRowsEnabled", ["loc", [null, [11, 29], [11, 49]]]], "", "disabled"], [], ["loc", [null, [11, 24], [11, 65]]]], " ", ["get", "buttonClass", ["loc", [null, [11, 68], [11, 79]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.groupedit-toolbar.delete-button-text"], [], ["loc", [null, [12, 10], [12, 65]]]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [13, 15], [13, 23]]]]], ["element", "action", ["deleteRows"], [], ["loc", [null, [13, 26], [13, 49]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/groupedit-toolbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "createNewButton", ["loc", [null, [1, 6], [1, 21]]]]], [], 0, null, ["loc", [null, [1, 0], [8, 7]]]], ["block", "if", [["get", "deleteButton", ["loc", [null, [9, 6], [9, 18]]]]], [], 1, null, ["loc", [null, [9, 0], [16, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-app/templates/components/map-tools/draw-suggestion", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 4
                }
              },
              "moduleName": "ember-app/templates/components/map-tools/draw-suggestion.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "map-tools/base", [], ["class", ["subexpr", "concat", [["get", "flexberryClassNames.drawMarker", ["loc", [null, [11, 22], [11, 52]]]], " ", ["get", "drawMarkerClass", ["loc", [null, [11, 57], [11, 72]]]]], [], ["loc", [null, [11, 14], [11, 73]]]], "name", "draw-suggestion-marker", "caption", ["subexpr", "@mut", [["get", "drawMarkerCaption", ["loc", [null, [13, 16], [13, 33]]]]], [], []], "iconClass", ["subexpr", "@mut", [["get", "drawMarkerIconClass", ["loc", [null, [14, 18], [14, 37]]]]], [], []], "mapToolProperties", ["subexpr", "@mut", [["get", "_drawToolProperties", ["loc", [null, [15, 26], [15, 45]]]]], [], []], "activate", ["subexpr", "action", ["onMapToolActivate"], [], ["loc", [null, [16, 17], [16, 45]]]]], ["loc", [null, [10, 6], [17, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 4
                },
                "end": {
                  "line": 28,
                  "column": 4
                }
              },
              "moduleName": "ember-app/templates/components/map-tools/draw-suggestion.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "map-tools/base", [], ["class", ["subexpr", "concat", [["get", "flexberryClassNames.drawPolyline", ["loc", [null, [21, 22], [21, 54]]]], " ", ["get", "drawPolylineClass", ["loc", [null, [21, 59], [21, 76]]]]], [], ["loc", [null, [21, 14], [21, 77]]]], "name", "draw-suggestion-polyline", "caption", ["subexpr", "@mut", [["get", "drawPolylineCaption", ["loc", [null, [23, 16], [23, 35]]]]], [], []], "iconClass", ["subexpr", "@mut", [["get", "drawPolylineIconClass", ["loc", [null, [24, 18], [24, 39]]]]], [], []], "mapToolProperties", ["subexpr", "@mut", [["get", "_drawToolProperties", ["loc", [null, [25, 26], [25, 45]]]]], [], []], "activate", ["subexpr", "action", ["onMapToolActivate"], [], ["loc", [null, [26, 17], [26, 45]]]]], ["loc", [null, [20, 6], [27, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 4
                },
                "end": {
                  "line": 38,
                  "column": 4
                }
              },
              "moduleName": "ember-app/templates/components/map-tools/draw-suggestion.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "map-tools/base", [], ["class", ["subexpr", "concat", [["get", "flexberryClassNames.drawRectangle", ["loc", [null, [31, 22], [31, 55]]]], " ", ["get", "drawRectangleClass", ["loc", [null, [31, 60], [31, 78]]]]], [], ["loc", [null, [31, 14], [31, 79]]]], "name", "draw-suggestion-rectangle", "caption", ["subexpr", "@mut", [["get", "drawRectangleCaption", ["loc", [null, [33, 16], [33, 36]]]]], [], []], "iconClass", ["subexpr", "@mut", [["get", "drawRectangleIconClass", ["loc", [null, [34, 18], [34, 40]]]]], [], []], "mapToolProperties", ["subexpr", "@mut", [["get", "_drawToolProperties", ["loc", [null, [35, 26], [35, 45]]]]], [], []], "activate", ["subexpr", "action", ["onMapToolActivate"], [], ["loc", [null, [36, 17], [36, 45]]]]], ["loc", [null, [30, 6], [37, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 39,
                  "column": 4
                },
                "end": {
                  "line": 48,
                  "column": 4
                }
              },
              "moduleName": "ember-app/templates/components/map-tools/draw-suggestion.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "map-tools/base", [], ["class", ["subexpr", "concat", [["get", "flexberryClassNames.drawPolygon", ["loc", [null, [41, 22], [41, 53]]]], " ", ["get", "drawPolygonClass", ["loc", [null, [41, 58], [41, 74]]]]], [], ["loc", [null, [41, 14], [41, 75]]]], "name", "draw-suggestion-polygon", "caption", ["subexpr", "@mut", [["get", "drawPolygonCaption", ["loc", [null, [43, 16], [43, 34]]]]], [], []], "iconClass", ["subexpr", "@mut", [["get", "drawPolygonIconClass", ["loc", [null, [44, 18], [44, 38]]]]], [], []], "mapToolProperties", ["subexpr", "@mut", [["get", "_drawToolProperties", ["loc", [null, [45, 26], [45, 45]]]]], [], []], "activate", ["subexpr", "action", ["onMapToolActivate"], [], ["loc", [null, [46, 17], [46, 45]]]]], ["loc", [null, [40, 6], [47, 8]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 49,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/components/map-tools/draw-suggestion.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "drawMarker", ["loc", [null, [9, 10], [9, 20]]]]], [], 0, null, ["loc", [null, [9, 4], [18, 11]]]], ["block", "if", [["get", "drawPolyline", ["loc", [null, [19, 10], [19, 22]]]]], [], 1, null, ["loc", [null, [19, 4], [28, 11]]]], ["block", "if", [["get", "drawRectangle", ["loc", [null, [29, 10], [29, 23]]]]], [], 2, null, ["loc", [null, [29, 4], [38, 11]]]], ["block", "if", [["get", "drawPolygon", ["loc", [null, [39, 10], [39, 21]]]]], [], 3, null, ["loc", [null, [39, 4], [48, 11]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 50,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/map-tools/draw-suggestion.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "block-slot", ["submenu"], [], 0, null, ["loc", [null, [8, 2], [49, 17]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 51,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/map-tools/draw-suggestion.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "map-tools/base", [], ["class", ["subexpr", "concat", [["get", "flexberryClassNames.wrapper", ["loc", [null, [2, 16], [2, 43]]]], " ", ["get", "class", ["loc", [null, [2, 48], [2, 53]]]]], [], ["loc", [null, [2, 8], [2, 54]]]], "name", "draw-suggestion", "caption", ["subexpr", "@mut", [["get", "caption", ["loc", [null, [4, 10], [4, 17]]]]], [], []], "tooltip", ["subexpr", "@mut", [["get", "tooltip", ["loc", [null, [5, 10], [5, 17]]]]], [], []], "iconClass", ["subexpr", "@mut", [["get", "iconClass", ["loc", [null, [6, 12], [6, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [50, 19]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/components/modal-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/components/modal-dialog.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "ui centered image");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [9, 8], [9, 17]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/components/modal-dialog.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "description");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["content", "yield", ["loc", [null, [13, 8], [13, 17]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 23,
                  "column": 6
                }
              },
              "moduleName": "ember-app/templates/components/modal-dialog.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "ui cancel button");
              dom.setAttribute(el1, "data-dismiss", "modal");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element1, 'title');
              morphs[1] = dom.createMorphAt(element1, 1, 1);
              return morphs;
            },
            statements: [["attribute", "title", ["subexpr", "t", ["components.modal-dialog.close-button-text"], [], ["loc", [null, [20, 82], [20, 131]]]]], ["inline", "t", ["components.modal-dialog.close-button-text"], [], ["loc", [null, [21, 10], [21, 59]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 24,
                  "column": 6
                },
                "end": {
                  "line": 28,
                  "column": 6
                }
              },
              "moduleName": "ember-app/templates/components/modal-dialog.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "type", "button");
              dom.setAttribute(el1, "class", "ui positive button");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'title');
              morphs[1] = dom.createMorphAt(element0, 1, 1);
              return morphs;
            },
            statements: [["attribute", "title", ["subexpr", "t", ["components.modal-dialog.ok-button-text"], [], ["loc", [null, [25, 63], [25, 109]]]]], ["inline", "t", ["components.modal-dialog.ok-button-text"], [], ["loc", [null, [26, 10], [26, 56]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 2
              },
              "end": {
                "line": 30,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/components/modal-dialog.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "actions");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element2, 1, 1);
            morphs[1] = dom.createMorphAt(element2, 2, 2);
            return morphs;
          },
          statements: [["block", "if", [["get", "useCloseButton", ["loc", [null, [19, 12], [19, 26]]]]], [], 0, null, ["loc", [null, [19, 6], [23, 13]]]], ["block", "if", [["get", "useOkButton", ["loc", [null, [24, 12], [24, 23]]]]], [], 1, null, ["loc", [null, [24, 6], [28, 13]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 31,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/modal-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "close icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [5]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          morphs[1] = dom.createAttrMorph(element3, 'class');
          morphs[2] = dom.createMorphAt(element3, 1, 1);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [4, 4], [4, 13]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "viewImageContent", ["loc", [null, [6, 19], [6, 35]]]], "image", ""], [], ["loc", [null, [6, 14], [6, 48]]]], " content"]]], ["block", "if", [["get", "viewImageContent", ["loc", [null, [7, 10], [7, 26]]]]], [], 0, 1, ["loc", [null, [7, 4], [15, 11]]]], ["block", "if", [["get", "toolbarVisible", ["loc", [null, [17, 8], [17, 22]]]]], [], 2, null, ["loc", [null, [17, 2], [30, 9]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/modal-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "ui-modal", [], ["class", ["subexpr", "concat", ["flexberry-modal ", ["get", "sizeClass", ["loc", [null, [1, 45], [1, 54]]]]], [], ["loc", [null, [1, 18], [1, 55]]]]], 0, null, ["loc", [null, [1, 0], [31, 13]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/components/object-list-view-cell", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/object-list-view-cell.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "oveflow-text");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 0, 0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 26], [1, 35]]]], ["content", "formattedValue", ["loc", [null, [1, 35], [1, 53]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/components/object-list-view-row", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 10
                },
                "end": {
                  "line": 11,
                  "column": 10
                }
              },
              "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cell asterisk-cell");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element13 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(1);
              morphs[0] = dom.createAttrMorph(element13, 'class');
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["asterisk small red icon ", ["subexpr", "unless", [["get", "record.data.hasDirtyAttributes", ["loc", [null, [9, 57], [9, 87]]]], "transparent"], [], ["loc", [null, [9, 48], [9, 103]]]]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 10
                },
                "end": {
                  "line": 19,
                  "column": 10
                }
              },
              "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cell");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "or", [["get", "readonly", ["loc", [null, [15, 29], [15, 37]]]], ["subexpr", "not", [["get", "record.rowConfig.canBeSelected", ["loc", [null, [15, 43], [15, 73]]]]], [], ["loc", [null, [15, 38], [15, 74]]]]], [], ["loc", [null, [15, 25], [15, 75]]]], "onChange", ["subexpr", "action", [["get", "selectRow", ["loc", [null, [16, 33], [16, 42]]]], ["get", "record", ["loc", [null, [16, 43], [16, 49]]]]], [], ["loc", [null, [16, 25], [16, 50]]]]], ["loc", [null, [14, 14], [17, 16]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 10
                },
                "end": {
                  "line": 29,
                  "column": 10
                }
              },
              "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cell");
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("button");
              var el3 = dom.createTextNode("\n                ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("i");
              dom.setAttribute(el3, "class", "minus icon");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n              ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element12 = dom.childAt(fragment, [1, 1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element12, 'class');
              morphs[1] = dom.createAttrMorph(element12, 'title');
              morphs[2] = dom.createElementMorph(element12);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["ui ui-delete object-list-view-row-delete-button ", ["get", "buttonClass", ["loc", [null, [23, 73], [23, 84]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [23, 96], [23, 104]]]], ["subexpr", "not", [["get", "record.rowConfig.canBeDeleted", ["loc", [null, [23, 110], [23, 139]]]]], [], ["loc", [null, [23, 105], [23, 140]]]]], [], ["loc", [null, [23, 92], [23, 141]]]], "disabled"], [], ["loc", [null, [23, 87], [23, 154]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.object-list-view.menu-in-row.delete-menu-item-title"], [], ["loc", [null, [24, 22], [24, 92]]]]], ["element", "action", [["get", "deleteRow", ["loc", [null, [25, 25], [25, 34]]]], ["get", "record", ["loc", [null, [25, 35], [25, 41]]]]], [], ["loc", [null, [25, 16], [25, 43]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 31,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "object-list-view-helper-column-cell");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element14 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element14, 1, 1);
            morphs[1] = dom.createMorphAt(element14, 2, 2);
            morphs[2] = dom.createMorphAt(element14, 3, 3);
            return morphs;
          },
          statements: [["block", "if", [["get", "showAsteriskInRow", ["loc", [null, [7, 16], [7, 33]]]]], [], 0, null, ["loc", [null, [7, 10], [11, 17]]]], ["block", "if", [["get", "showCheckBoxInRow", ["loc", [null, [12, 16], [12, 33]]]]], [], 1, null, ["loc", [null, [12, 10], [19, 17]]]], ["block", "if", [["get", "showDeleteButtonInRow", ["loc", [null, [20, 16], [20, 37]]]]], [], 2, null, ["loc", [null, [20, 10], [29, 17]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "fragmentReason": false,
                      "revision": "Ember@2.4.6",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 48,
                          "column": 16
                        },
                        "end": {
                          "line": 52,
                          "column": 16
                        }
                      },
                      "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createTextNode("                  ");
                      dom.appendChild(el0, el1);
                      var el1 = dom.createElement("button");
                      var el2 = dom.createTextNode("\n                    ");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createElement("i");
                      dom.appendChild(el1, el2);
                      var el2 = dom.createTextNode("\n                  ");
                      dom.appendChild(el1, el2);
                      dom.appendChild(el0, el1);
                      var el1 = dom.createTextNode("\n");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var element9 = dom.childAt(fragment, [1]);
                      var element10 = dom.childAt(element9, [1]);
                      var morphs = new Array(3);
                      morphs[0] = dom.createAttrMorph(element9, 'class');
                      morphs[1] = dom.createElementMorph(element9);
                      morphs[2] = dom.createAttrMorph(element10, 'class');
                      return morphs;
                    },
                    statements: [["attribute", "class", ["concat", ["ui button hierarchy-expand icon mini compact ", ["get", "buttonClass", ["loc", [null, [49, 80], [49, 91]]]]]]], ["element", "action", ["expand"], ["bubbles", false], ["loc", [null, [49, 95], [49, 128]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "_expanded", ["loc", [null, [50, 35], [50, 44]]]], "minus", "plus"], [], ["loc", [null, [50, 30], [50, 61]]]], " hierarchy-expand icon"]]]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "fragmentReason": false,
                    "revision": "Ember@2.4.6",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 47,
                        "column": 14
                      },
                      "end": {
                        "line": 53,
                        "column": 14
                      }
                    },
                    "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                    dom.insertBoundary(fragment, 0);
                    dom.insertBoundary(fragment, null);
                    return morphs;
                  },
                  statements: [["block", "if", [["get", "hasRecords", ["loc", [null, [48, 22], [48, 32]]]]], [], 0, null, ["loc", [null, [48, 16], [52, 23]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 40,
                      "column": 12
                    },
                    "end": {
                      "line": 54,
                      "column": 12
                    }
                  },
                  "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["subexpr", "and", [["subexpr", "not", [["get", "index", ["loc", [null, [47, 30], [47, 35]]]]], [], ["loc", [null, [47, 25], [47, 36]]]], ["get", "inHierarchicalMode", ["loc", [null, [47, 37], [47, 55]]]]], [], ["loc", [null, [47, 20], [47, 56]]]]], [], 0, null, ["loc", [null, [47, 14], [53, 21]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 39,
                    "column": 10
                  },
                  "end": {
                    "line": 55,
                    "column": 10
                  }
                },
                "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "component", [["get", "column.cellComponent.componentName", ["loc", [null, [40, 25], [40, 59]]]]], ["dynamicProperties", ["subexpr", "@mut", [["get", "column.cellComponent.componentProperties", ["loc", [null, [41, 32], [41, 72]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "record.data", ["loc", [null, [42, 27], [42, 38]]]]], [], []], "value", ["subexpr", "mut", [["subexpr", "get", [["get", "record.data", ["loc", [null, [43, 30], [43, 41]]]], ["get", "column.propName", ["loc", [null, [43, 42], [43, 57]]]]], [], ["loc", [null, [43, 25], [43, 58]]]]], [], ["loc", [null, [43, 20], [43, 59]]]], "readonly", ["subexpr", "readonly-cell", [["get", "record.rowConfig.readonlyColumns", ["loc", [null, [44, 38], [44, 70]]]], ["get", "column.propName", ["loc", [null, [44, 71], [44, 86]]]], ["get", "readonly", ["loc", [null, [44, 87], [44, 95]]]]], [], ["loc", [null, [44, 23], [44, 96]]]], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [45, 23], [45, 31]]]]], [], []]], 0, null, ["loc", [null, [40, 12], [54, 26]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 63,
                      "column": 12
                    },
                    "end": {
                      "line": 68,
                      "column": 12
                    }
                  },
                  "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("              ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "get", [["get", "record.data", ["loc", [null, [65, 27], [65, 38]]]], ["subexpr", "concat", ["errors.", ["get", "column.propName", ["loc", [null, [65, 57], [65, 72]]]]], [], ["loc", [null, [65, 39], [65, 73]]]]], [], ["loc", [null, [65, 22], [65, 74]]]], "pointing", "pointing"], ["loc", [null, [64, 14], [67, 16]]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 55,
                    "column": 10
                  },
                  "end": {
                    "line": 69,
                    "column": 10
                  }
                },
                "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "component", [["get", "column.cellComponent.componentName", ["loc", [null, [56, 24], [56, 58]]]]], ["dynamicProperties", ["subexpr", "@mut", [["get", "column.cellComponent.componentProperties", ["loc", [null, [57, 32], [57, 72]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "record.data", ["loc", [null, [58, 27], [58, 38]]]]], [], []], "value", ["subexpr", "mut", [["subexpr", "get", [["get", "record.data", ["loc", [null, [59, 30], [59, 41]]]], ["get", "column.propName", ["loc", [null, [59, 42], [59, 57]]]]], [], ["loc", [null, [59, 25], [59, 58]]]]], [], ["loc", [null, [59, 20], [59, 59]]]], "readonly", ["subexpr", "readonly-cell", [["get", "record.rowConfig.readonlyColumns", ["loc", [null, [60, 38], [60, 70]]]], ["get", "column.propName", ["loc", [null, [60, 71], [60, 86]]]], ["get", "readonly", ["loc", [null, [60, 87], [60, 95]]]]], [], ["loc", [null, [60, 23], [60, 96]]]], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [61, 23], [61, 31]]]]], [], []]], ["loc", [null, [56, 12], [62, 14]]]], ["block", "if", [["get", "showValidationMessages", ["loc", [null, [63, 18], [63, 40]]]]], [], 0, null, ["loc", [null, [63, 12], [68, 19]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 8
                },
                "end": {
                  "line": 70,
                  "column": 8
                }
              },
              "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "inHierarchicalMode", ["loc", [null, [39, 16], [39, 34]]]]], [], 0, 1, ["loc", [null, [39, 10], [69, 17]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "fragmentReason": false,
                  "revision": "Ember@2.4.6",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 73,
                      "column": 14
                    },
                    "end": {
                      "line": 81,
                      "column": 14
                    }
                  },
                  "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("i");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element6 = dom.childAt(fragment, [1]);
                  var element7 = dom.childAt(element6, [1]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createAttrMorph(element6, 'class');
                  morphs[1] = dom.createAttrMorph(element6, 'title');
                  morphs[2] = dom.createElementMorph(element6);
                  morphs[3] = dom.createAttrMorph(element7, 'class');
                  return morphs;
                },
                statements: [["attribute", "class", ["concat", ["ui button hierarchy-expand icon mini compact ", ["get", "buttonClass", ["loc", [null, [75, 72], [75, 83]]]]]]], ["attribute", "title", ["subexpr", "if", [["get", "_expanded", ["loc", [null, [76, 29], [76, 38]]]], ["subexpr", "t", ["components.object-list-view.hierarchy-buttons.minus-button-title"], [], ["loc", [null, [76, 39], [76, 109]]]], ["subexpr", "t", ["components.object-list-view.hierarchy-buttons.plus-button-title"], [], ["loc", [null, [77, 19], [77, 88]]]]], [], ["loc", [null, [76, 24], [77, 90]]]]], ["element", "action", ["expand"], ["bubbles", false], ["loc", [null, [78, 18], [78, 51]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "_expanded", ["loc", [null, [79, 35], [79, 44]]]], "minus", "plus"], [], ["loc", [null, [79, 30], [79, 61]]]], " hierarchy-expand icon"]]]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 72,
                    "column": 12
                  },
                  "end": {
                    "line": 82,
                    "column": 12
                  }
                },
                "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "hasRecords", ["loc", [null, [73, 20], [73, 30]]]]], [], 0, null, ["loc", [null, [73, 14], [81, 21]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 70,
                  "column": 8
                },
                "end": {
                  "line": 88,
                  "column": 8
                }
              },
              "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "oveflow-text");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element8 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(element8, 1, 1);
              morphs[1] = dom.createMorphAt(element8, 3, 3);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "and", [["subexpr", "not", [["get", "index", ["loc", [null, [72, 28], [72, 33]]]]], [], ["loc", [null, [72, 23], [72, 34]]]], ["get", "inHierarchicalMode", ["loc", [null, [72, 35], [72, 53]]]]], [], ["loc", [null, [72, 18], [72, 54]]]]], [], 0, null, ["loc", [null, [72, 12], [82, 19]]]], ["inline", "get-formatted", [["get", "record.data", ["loc", [null, [83, 28], [83, 39]]]], ["get", "column.propName", ["loc", [null, [83, 40], [83, 55]]]]], ["dateFormat", ["subexpr", "@mut", [["get", "dateFormat", ["loc", [null, [84, 25], [84, 35]]]]], [], []], "moment", ["subexpr", "@mut", [["get", "moment", ["loc", [null, [85, 21], [85, 27]]]]], [], []]], ["loc", [null, [83, 12], [86, 14]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 33,
                "column": 4
              },
              "end": {
                "line": 90,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 2,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element11 = dom.childAt(fragment, [1]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element11, 'onclick');
            morphs[1] = dom.createAttrMorph(element11, 'class');
            morphs[2] = dom.createAttrMorph(element11, 'style');
            morphs[3] = dom.createMorphAt(element11, 1, 1);
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", ["onRowClick", ["get", "record", ["loc", [null, [35, 38], [35, 44]]]], ["subexpr", "hash", [], ["column", ["get", "column", ["loc", [null, [35, 58], [35, 64]]]], "columnIndex", ["get", "index", ["loc", [null, [35, 77], [35, 82]]]]], ["loc", [null, [35, 45], [35, 83]]]]], ["preventDefault", false], ["loc", [null, [35, 16], [35, 106]]]]], ["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["subexpr", "and", [["get", "showValidationMessages", ["loc", [null, [36, 31], [36, 53]]]], ["subexpr", "get", [["get", "record.data", ["loc", [null, [36, 59], [36, 70]]]], ["subexpr", "concat", ["errors.", ["get", "column.propName", ["loc", [null, [36, 89], [36, 104]]]], ".length"], [], ["loc", [null, [36, 71], [36, 115]]]]], [], ["loc", [null, [36, 54], [36, 116]]]]], [], ["loc", [null, [36, 26], [36, 117]]]], "error"], [], ["loc", [null, [36, 21], [36, 127]]]]]]], ["attribute", "style", ["subexpr", "if", [["subexpr", "and", [["subexpr", "not", [["get", "index", ["loc", [null, [37, 29], [37, 34]]]]], [], ["loc", [null, [37, 24], [37, 35]]]], ["get", "inHierarchicalMode", ["loc", [null, [37, 36], [37, 54]]]]], [], ["loc", [null, [37, 19], [37, 55]]]], ["get", "hierarchicalIndentStyle", ["loc", [null, [37, 56], [37, 79]]]], ["get", "defaultPaddingStyle", ["loc", [null, [37, 80], [37, 99]]]]], [], ["loc", [null, [37, 14], [37, 101]]]]], ["block", "if", [["get", "column.cellComponent.componentName", ["loc", [null, [38, 14], [38, 48]]]]], [], 0, 1, ["loc", [null, [38, 8], [88, 15]]]]],
          locals: ["column", "index"],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 96,
                  "column": 12
                },
                "end": {
                  "line": 101,
                  "column": 12
                }
              },
              "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "item");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "edit icon");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element3);
              morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]), 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["onRowClick", ["get", "record", ["loc", [null, [97, 54], [97, 60]]]], ["subexpr", "hash", [], ["column", null, "columnIndex", null], ["loc", [null, [97, 61], [97, 96]]]]], [], ["loc", [null, [97, 32], [97, 98]]]], ["inline", "t", ["components.object-list-view.menu-in-row.edit-menu-item-title"], [], ["loc", [null, [99, 22], [99, 90]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 102,
                  "column": 12
                },
                "end": {
                  "line": 107,
                  "column": 12
                }
              },
              "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "item");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "trash icon");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element2);
              morphs[1] = dom.createMorphAt(dom.childAt(element2, [3]), 0, 0);
              return morphs;
            },
            statements: [["element", "action", [["get", "deleteRow", ["loc", [null, [103, 42], [103, 51]]]], ["get", "record", ["loc", [null, [103, 52], [103, 58]]]]], [], ["loc", [null, [103, 32], [103, 61]]]], ["inline", "t", ["components.object-list-view.menu-in-row.delete-menu-item-title"], [], ["loc", [null, [105, 22], [105, 92]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 108,
                  "column": 12
                },
                "end": {
                  "line": 113,
                  "column": 12
                }
              },
              "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "item");
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n              ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createElementMorph(element0);
              morphs[1] = dom.createAttrMorph(element1, 'class');
              morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
              return morphs;
            },
            statements: [["element", "action", [["get", "sendMenuItemAction", ["loc", [null, [109, 41], [109, 59]]]], ["get", "menuItem.actionName", ["loc", [null, [109, 60], [109, 79]]]], ["get", "record.data", ["loc", [null, [109, 80], [109, 91]]]]], [], ["loc", [null, [109, 32], [109, 93]]]], ["attribute", "class", ["concat", [["get", "menuItem.icon", ["loc", [null, [110, 28], [110, 41]]]]]]], ["content", "menuItem.title", ["loc", [null, [111, 22], [111, 40]]]]],
            locals: ["menuItem"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 91,
                "column": 4
              },
              "end": {
                "line": 117,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "class", "object-list-view-menu");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "basic right pointing ui icon dropdown button");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "list layout icon");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "left menu");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("          ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var element5 = dom.childAt(element4, [1, 3]);
            var morphs = new Array(4);
            morphs[0] = dom.createAttrMorph(element4, 'style');
            morphs[1] = dom.createMorphAt(element5, 1, 1);
            morphs[2] = dom.createMorphAt(element5, 2, 2);
            morphs[3] = dom.createMorphAt(element5, 3, 3);
            return morphs;
          },
          statements: [["attribute", "style", ["get", "defaultPaddingStyle", ["loc", [null, [92, 48], [92, 67]]]]], ["block", "if", [["get", "showEditMenuItemInRow", ["loc", [null, [96, 18], [96, 39]]]]], [], 0, null, ["loc", [null, [96, 12], [101, 19]]]], ["block", "if", [["get", "showDeleteMenuItemInRow", ["loc", [null, [102, 18], [102, 41]]]]], [], 1, null, ["loc", [null, [102, 12], [107, 19]]]], ["block", "each", [["get", "menuInRowAdditionalItems", ["loc", [null, [108, 20], [108, 44]]]]], [], 2, null, ["loc", [null, [108, 12], [113, 21]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      var child3 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 120,
                  "column": 4
                },
                "end": {
                  "line": 145,
                  "column": 4
                }
              },
              "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [122, 15], [122, 21]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [123, 16], [123, 23]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [124, 17], [124, 25]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [125, 17], [125, 25]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [126, 23], [126, 37]]]]], [], []], "sendMenuItemAction", ["subexpr", "@mut", [["get", "sendMenuItemAction", ["loc", [null, [127, 27], [127, 45]]]]], [], []], "menuInRowAdditionalItems", ["subexpr", "@mut", [["get", "menuInRowAdditionalItems", ["loc", [null, [128, 33], [128, 57]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [129, 25], [129, 41]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [130, 25], [130, 41]]]]], [], []], "showValidationMessages", ["subexpr", "@mut", [["get", "showValidationMessages", ["loc", [null, [131, 31], [131, 53]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [132, 26], [132, 43]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [133, 26], [133, 43]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [134, 30], [134, 51]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [135, 27], [135, 45]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [136, 20], [136, 31]]]]], [], []], "doRenderData", ["subexpr", "@mut", [["get", "record.doRenderData", ["loc", [null, [137, 21], [137, 40]]]]], [], []], "rowClick", ["subexpr", "@mut", [["get", "rowClick", ["loc", [null, [138, 17], [138, 25]]]]], [], []], "selectRow", ["subexpr", "@mut", [["get", "selectRow", ["loc", [null, [139, 18], [139, 27]]]]], [], []], "deleteRow", ["subexpr", "@mut", [["get", "deleteRow", ["loc", [null, [140, 18], [140, 27]]]]], [], []], "_currentLevel", ["subexpr", "@mut", [["get", "_currentLevel", ["loc", [null, [141, 22], [141, 35]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "_hierarchicalIndent", ["loc", [null, [142, 27], [142, 46]]]]], [], []], "defaultLeftPadding", ["subexpr", "@mut", [["get", "defaultLeftPadding", ["loc", [null, [143, 27], [143, 45]]]]], [], []]], ["loc", [null, [121, 6], [144, 8]]]]],
            locals: ["record"],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 119,
                "column": 2
              },
              "end": {
                "line": 146,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "records", ["loc", [null, [120, 12], [120, 19]]]]], ["key", "key"], 0, null, ["loc", [null, [120, 4], [145, 13]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["multiple-nodes", "wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 147,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "hidden");
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element15 = dom.childAt(fragment, [1]);
          var element16 = dom.childAt(element15, [1]);
          var morphs = new Array(8);
          morphs[0] = dom.createAttrMorph(element15, 'class');
          morphs[1] = dom.createAttrMorph(element16, 'class');
          morphs[2] = dom.createAttrMorph(element16, 'style');
          morphs[3] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
          morphs[4] = dom.createMorphAt(element16, 3, 3);
          morphs[5] = dom.createMorphAt(element15, 3, 3);
          morphs[6] = dom.createMorphAt(element15, 4, 4);
          morphs[7] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "record.rowConfig.customClass", ["loc", [null, [2, 15], [2, 43]]]]]]], ["attribute", "class", ["concat", ["object-list-view-helper-column ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [3, 55], [3, 71]]]], "hidden"], [], ["loc", [null, [3, 46], [3, 82]]]]]]], ["attribute", "style", ["get", "defaultPaddingStyle", ["loc", [null, [3, 92], [3, 111]]]]], ["content", "record.key", ["loc", [null, [4, 26], [4, 40]]]], ["block", "if", [["get", "showHelperColumn", ["loc", [null, [5, 12], [5, 28]]]]], [], 0, null, ["loc", [null, [5, 6], [31, 13]]]], ["block", "each", [["get", "columns", ["loc", [null, [33, 12], [33, 19]]]]], [], 1, null, ["loc", [null, [33, 4], [90, 13]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [91, 10], [91, 24]]]]], [], 2, null, ["loc", [null, [91, 4], [117, 11]]]], ["block", "if", [["subexpr", "and", [["get", "_expanded", ["loc", [null, [119, 13], [119, 22]]]], ["get", "inHierarchicalMode", ["loc", [null, [119, 23], [119, 41]]]]], [], ["loc", [null, [119, 8], [119, 42]]]]], [], 3, null, ["loc", [null, [119, 2], [146, 9]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 148,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/object-list-view-row.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "doRenderData", ["loc", [null, [1, 6], [1, 18]]]]], [], 0, null, ["loc", [null, [1, 0], [147, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/components/object-list-view-single-column-cell", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 6
              },
              "end": {
                "line": 13,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view-single-column-cell.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "component", [["get", "column.cellComponent.componentName", ["loc", [null, [6, 20], [6, 54]]]]], ["dynamicProperties", ["subexpr", "@mut", [["get", "column.cellComponent.componentProperties", ["loc", [null, [7, 28], [7, 68]]]]], [], []], "relatedModel", ["subexpr", "@mut", [["get", "model", ["loc", [null, [8, 23], [8, 28]]]]], [], []], "value", ["subexpr", "mut", [["subexpr", "get", [["get", "model", ["loc", [null, [9, 26], [9, 31]]]], ["get", "column.propName", ["loc", [null, [9, 32], [9, 47]]]]], [], ["loc", [null, [9, 21], [9, 48]]]]], [], ["loc", [null, [9, 16], [9, 49]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [10, 19], [10, 27]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [11, 19], [11, 27]]]]], [], []]], ["loc", [null, [6, 8], [12, 10]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 6
              },
              "end": {
                "line": 20,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view-single-column-cell.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "oveflow-text");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "get-formatted", [["get", "model", ["loc", [null, [15, 26], [15, 31]]]], ["get", "column.propName", ["loc", [null, [15, 32], [15, 47]]]]], ["dateFormat", ["subexpr", "@mut", [["get", "dateFormat", ["loc", [null, [16, 23], [16, 33]]]]], [], []], "moment", ["subexpr", "@mut", [["get", "moment", ["loc", [null, [17, 19], [17, 25]]]]], [], []]], ["loc", [null, [15, 10], [18, 12]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 6
              },
              "end": {
                "line": 26,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view-single-column-cell.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "get", [["get", "model", ["loc", [null, [23, 21], [23, 26]]]], ["subexpr", "concat", ["errors.", ["get", "column.propName", ["loc", [null, [23, 45], [23, 60]]]]], [], ["loc", [null, [23, 27], [23, 61]]]]], [], ["loc", [null, [23, 16], [23, 62]]]], "pointing", "left pointing"], ["loc", [null, [22, 8], [25, 10]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/object-list-view-single-column-cell.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(":");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[2] = dom.createAttrMorph(element1, 'class');
          morphs[3] = dom.createMorphAt(element1, 1, 1);
          morphs[4] = dom.createMorphAt(element1, 2, 2);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["field ", ["subexpr", "if", [["subexpr", "and", [["get", "showValidationMessages", ["loc", [null, [2, 30], [2, 52]]]], ["subexpr", "get", [["get", "model", ["loc", [null, [2, 58], [2, 63]]]], ["subexpr", "concat", ["errors.", ["get", "column.propName", ["loc", [null, [2, 82], [2, 97]]]], ".length"], [], ["loc", [null, [2, 64], [2, 108]]]]], [], ["loc", [null, [2, 53], [2, 109]]]]], [], ["loc", [null, [2, 25], [2, 110]]]], "error"], [], ["loc", [null, [2, 20], [2, 120]]]]]]], ["content", "column.header", ["loc", [null, [3, 11], [3, 28]]]], ["attribute", "class", ["concat", ["inline fields ", ["subexpr", "if", [["subexpr", "not", [["get", "hasEditableValues", ["loc", [null, [4, 40], [4, 57]]]]], [], ["loc", [null, [4, 35], [4, 58]]]], "readonly"], [], ["loc", [null, [4, 30], [4, 71]]]]]]], ["block", "if", [["get", "column.cellComponent.componentName", ["loc", [null, [5, 12], [5, 46]]]]], [], 0, 1, ["loc", [null, [5, 6], [20, 13]]]], ["block", "if", [["get", "showValidationMessages", ["loc", [null, [21, 12], [21, 34]]]]], [], 2, null, ["loc", [null, [21, 6], [26, 13]]]]],
        locals: ["column"],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/object-list-view-single-column-cell.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "columns", ["loc", [null, [1, 8], [1, 15]]]]], [], 0, null, ["loc", [null, [1, 0], [29, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/components/object-list-view", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [8, 14], [8, 26]]]]], [], []]], ["loc", [null, [3, 4], [9, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [2, 10], [2, 23]]]]], [], 0, null, ["loc", [null, [2, 2], [10, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 6
            },
            "end": {
              "line": 17,
              "column": 6
            }
          },
          "moduleName": "ember-app/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          dom.setAttribute(el1, "class", "object-list-view-operations collapsing");
          dom.setAttribute(el1, "data-olv-header-property-name", "OlvRowToolbar");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 12
              },
              "end": {
                "line": 24,
                "column": 12
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "t", [["get", "column.keyLocale", ["loc", [null, [23, 18], [23, 34]]]]], [], ["loc", [null, [23, 14], [23, 36]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 12
              },
              "end": {
                "line": 26,
                "column": 12
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "column.header", ["loc", [null, [25, 14], [25, 31]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 30,
                  "column": 16
                },
                "end": {
                  "line": 34,
                  "column": 16
                }
              },
              "moduleName": "ember-app/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                  ▲");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element8 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element8, 'title');
              morphs[1] = dom.createMorphAt(element8, 1, 1);
              return morphs;
            },
            statements: [["attribute", "title", ["concat", [["subexpr", "t", ["components.object-list-view.sort-ascending"], [], ["loc", [null, [31, 30], [31, 80]]]]]]], ["content", "column.sortNumber", ["loc", [null, [32, 19], [32, 40]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 34,
                  "column": 16
                },
                "end": {
                  "line": 38,
                  "column": 16
                }
              },
              "moduleName": "ember-app/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              var el2 = dom.createTextNode("\n                  ▼");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n                  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element7 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element7, 'title');
              morphs[1] = dom.createMorphAt(element7, 1, 1);
              return morphs;
            },
            statements: [["attribute", "title", ["concat", [["subexpr", "t", ["components.object-list-view.sort-descending"], [], ["loc", [null, [35, 30], [35, 81]]]]]]], ["content", "column.sortNumber", ["loc", [null, [36, 19], [36, 40]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 12
              },
              "end": {
                "line": 40,
                "column": 12
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("              ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "object-list-view-order-icon");
            dom.setAttribute(el1, "style", "float:right;");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("              ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "if", [["get", "column.sortAscending", ["loc", [null, [30, 22], [30, 42]]]]], [], 0, 1, ["loc", [null, [30, 16], [38, 23]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 6
            },
            "end": {
              "line": 43,
              "column": 6
            }
          },
          "moduleName": "ember-app/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          dom.setAttribute(el1, "class", "dt-head-left me class");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("            ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("          ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element9 = dom.childAt(fragment, [1]);
          var element10 = dom.childAt(element9, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element9, 'onclick');
          morphs[1] = dom.createAttrMorph(element10, 'data-olv-header-property-name');
          morphs[2] = dom.createAttrMorph(element10, 'title');
          morphs[3] = dom.createMorphAt(dom.childAt(element10, [1]), 1, 1);
          morphs[4] = dom.createMorphAt(element10, 3, 3);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["headerCellClick", ["get", "column", ["loc", [null, [19, 77], [19, 83]]]]], [], ["loc", [null, [19, 50], [19, 86]]]]], ["attribute", "data-olv-header-property-name", ["get", "column.propName", ["loc", [null, [20, 47], [20, 62]]]]], ["attribute", "title", ["get", "sortTitleCompute", ["loc", [null, [20, 73], [20, 89]]]]], ["block", "if", [["get", "column.keyLocale", ["loc", [null, [22, 18], [22, 34]]]]], [], 0, 1, ["loc", [null, [22, 12], [26, 19]]]], ["block", "if", [["get", "column.sorted", ["loc", [null, [28, 18], [28, 31]]]]], [], 2, null, ["loc", [null, [28, 12], [40, 19]]]]],
        locals: ["column"],
        templates: [child0, child1, child2]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 6
            },
            "end": {
              "line": 46,
              "column": 6
            }
          },
          "moduleName": "ember-app/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("th");
          dom.setAttribute(el1, "class", "object-list-view-menu collapsing");
          dom.setAttribute(el1, "data-olv-header-property-name", "OlvRowMenu");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 52,
                "column": 8
              },
              "end": {
                "line": 54,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "rowspan", "1");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 57,
                  "column": 12
                },
                "end": {
                  "line": 65,
                  "column": 12
                }
              },
              "moduleName": "ember-app/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "component", ["flexberry-dropdown"], ["value", ["subexpr", "@mut", [["get", "column.filter.condition", ["loc", [null, [59, 22], [59, 45]]]]], [], []], "items", ["subexpr", "@mut", [["get", "column.filter.conditions", ["loc", [null, [60, 22], [60, 46]]]]], [], []], "class", "compact fluid", "placeholder", "", "needChecksOnValue", false], ["loc", [null, [58, 14], [64, 16]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 8
              },
              "end": {
                "line": 67,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element4, 'style');
            morphs[1] = dom.createMorphAt(element4, 1, 1);
            return morphs;
          },
          statements: [["attribute", "style", ["get", "defaultPaddingStyle", ["loc", [null, [56, 22], [56, 41]]]]], ["block", "if", [["get", "column.filter.conditions", ["loc", [null, [57, 18], [57, 42]]]]], [], 0, null, ["loc", [null, [57, 12], [65, 19]]]]],
          locals: ["column"],
          templates: [child0]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 68,
                "column": 8
              },
              "end": {
                "line": 70,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "rowspan", "1");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 73,
                "column": 8
              },
              "end": {
                "line": 75,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "rowspan", "1");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 78,
                  "column": 12
                },
                "end": {
                  "line": 83,
                  "column": 12
                }
              },
              "moduleName": "ember-app/templates/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("              ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "component", [["get", "column.filter.component.name", ["loc", [null, [79, 26], [79, 54]]]]], ["value", ["subexpr", "@mut", [["get", "column.filter.pattern", ["loc", [null, [80, 22], [80, 43]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "column.filter.component.properties", ["loc", [null, [81, 34], [81, 68]]]]], [], []]], ["loc", [null, [79, 14], [82, 16]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 76,
                "column": 8
              },
              "end": {
                "line": 85,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element3, 'style');
            morphs[1] = dom.createMorphAt(element3, 1, 1);
            return morphs;
          },
          statements: [["attribute", "style", ["get", "defaultPaddingStyle", ["loc", [null, [77, 22], [77, 41]]]]], ["block", "if", [["get", "column.filter.component.name", ["loc", [null, [78, 18], [78, 46]]]]], [], 0, null, ["loc", [null, [78, 12], [83, 19]]]]],
          locals: ["column"],
          templates: [child0]
        };
      })();
      var child5 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 86,
                "column": 8
              },
              "end": {
                "line": 88,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "rowspan", "1");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 50,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 4
            }
          },
          "moduleName": "ember-app/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var element6 = dom.childAt(fragment, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(element5, 1, 1);
          morphs[1] = dom.createMorphAt(element5, 2, 2);
          morphs[2] = dom.createMorphAt(element5, 3, 3);
          morphs[3] = dom.createMorphAt(element6, 1, 1);
          morphs[4] = dom.createMorphAt(element6, 2, 2);
          morphs[5] = dom.createMorphAt(element6, 3, 3);
          return morphs;
        },
        statements: [["block", "if", [["get", "showHelperColumn", ["loc", [null, [52, 14], [52, 30]]]]], [], 0, null, ["loc", [null, [52, 8], [54, 15]]]], ["block", "each", [["get", "columns", ["loc", [null, [55, 16], [55, 23]]]]], [], 1, null, ["loc", [null, [55, 8], [67, 17]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [68, 14], [68, 28]]]]], [], 2, null, ["loc", [null, [68, 8], [70, 15]]]], ["block", "if", [["get", "showHelperColumn", ["loc", [null, [73, 14], [73, 30]]]]], [], 3, null, ["loc", [null, [73, 8], [75, 15]]]], ["block", "each", [["get", "columns", ["loc", [null, [76, 16], [76, 23]]]]], [], 4, null, ["loc", [null, [76, 8], [85, 17]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [86, 14], [86, 28]]]]], [], 5, null, ["loc", [null, [86, 8], [88, 15]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4, child5]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 91,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 4
            }
          },
          "moduleName": "ember-app/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "style", "text-align:center;");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ui active centered inline loader");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element2, 'colspan');
          morphs[1] = dom.createMorphAt(element2, 3, 3);
          return morphs;
        },
        statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [93, 23], [93, 30]]]]]]], ["inline", "t", ["components.object-list-view.loading-text"], [], ["loc", [null, [94, 63], [94, 111]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 98,
              "column": 4
            },
            "end": {
              "line": 104,
              "column": 4
            }
          },
          "moduleName": "ember-app/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "style", "text-align:center;");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'colspan');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [100, 23], [100, 30]]]]]]], ["content", "placeholder", ["loc", [null, [101, 12], [101, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 105,
                "column": 6
              },
              "end": {
                "line": 131,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [107, 17], [107, 23]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [108, 18], [108, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [109, 19], [109, 27]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [110, 19], [110, 27]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [111, 25], [111, 39]]]]], [], []], "sendMenuItemAction", ["subexpr", "@mut", [["get", "sendMenuItemAction", ["loc", [null, [112, 29], [112, 47]]]]], [], []], "menuInRowAdditionalItems", ["subexpr", "@mut", [["get", "menuInRowAdditionalItems", ["loc", [null, [113, 35], [113, 59]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [114, 27], [114, 43]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [115, 27], [115, 43]]]]], [], []], "showValidationMessages", ["subexpr", "@mut", [["get", "showValidationMessagesInRow", ["loc", [null, [116, 33], [116, 60]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [117, 28], [117, 45]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [118, 28], [118, 45]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [119, 32], [119, 53]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [120, 34], [120, 57]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [121, 32], [121, 53]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "hierarchicalIndent", ["loc", [null, [122, 29], [122, 47]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [123, 29], [123, 47]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [124, 22], [124, 33]]]]], [], []], "doRenderData", ["subexpr", "@mut", [["get", "record.doRenderData", ["loc", [null, [125, 23], [125, 42]]]]], [], []], "rowClick", ["subexpr", "action", ["rowClick"], [], ["loc", [null, [126, 19], [126, 38]]]], "selectRow", ["subexpr", "action", ["selectRow"], [], ["loc", [null, [127, 20], [127, 40]]]], "deleteRow", ["subexpr", "action", ["deleteRow"], [], ["loc", [null, [128, 20], [128, 40]]]], "defaultLeftPadding", ["subexpr", "@mut", [["get", "defaultLeftPadding", ["loc", [null, [129, 29], [129, 47]]]]], [], []]], ["loc", [null, [106, 8], [130, 10]]]]],
          locals: ["record"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 132,
                "column": 6
              },
              "end": {
                "line": 139,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "style", "text-align:center;");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ui active centered inline loader");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'colspan');
            morphs[1] = dom.createMorphAt(element0, 3, 3);
            return morphs;
          },
          statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [134, 25], [134, 32]]]]]]], ["inline", "t", ["components.object-list-view.loading-text"], [], ["loc", [null, [136, 12], [136, 60]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 140,
              "column": 4
            }
          },
          "moduleName": "ember-app/templates/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "contentWithKeys", ["loc", [null, [105, 14], [105, 29]]]]], ["key", "key"], 0, null, ["loc", [null, [105, 6], [131, 15]]]], ["block", "if", [["get", "rowByRowLoadingProgress", ["loc", [null, [132, 12], [132, 35]]]]], [], 1, null, ["loc", [null, [132, 6], [139, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 143,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/object-list-view.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("thead");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("tr");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element11 = dom.childAt(fragment, [1]);
        var element12 = dom.childAt(element11, [1, 1]);
        var element13 = dom.childAt(element11, [3]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element11, 'class');
        morphs[2] = dom.createMorphAt(element12, 1, 1);
        morphs[3] = dom.createMorphAt(element12, 2, 2);
        morphs[4] = dom.createMorphAt(element12, 3, 3);
        morphs[5] = dom.createAttrMorph(element13, 'class');
        morphs[6] = dom.createMorphAt(element13, 1, 1);
        morphs[7] = dom.createMorphAt(element13, 2, 2);
        morphs[8] = dom.createMorphAt(element13, 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMessages", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["attribute", "class", ["concat", ["object-list-view ui unstackable celled ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [12, 58], [12, 66]]]], "readonly"], [], ["loc", [null, [12, 53], [12, 79]]]], " ", ["get", "tableClass", ["loc", [null, [12, 82], [12, 92]]]], " table"]]], ["block", "if", [["get", "showHelperColumn", ["loc", [null, [15, 12], [15, 28]]]]], [], 1, null, ["loc", [null, [15, 6], [17, 13]]]], ["block", "each", [["get", "columns", ["loc", [null, [18, 14], [18, 21]]]]], [], 2, null, ["loc", [null, [18, 6], [43, 15]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [44, 12], [44, 26]]]]], [], 3, null, ["loc", [null, [44, 6], [46, 13]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "showLoadingTbodyClass", ["loc", [null, [49, 21], [49, 42]]]], "ui loading form", ""], [], ["loc", [null, [49, 16], [49, 65]]]]]]], ["block", "if", [["get", "showFilters", ["loc", [null, [50, 10], [50, 21]]]]], [], 4, null, ["loc", [null, [50, 4], [90, 11]]]], ["block", "if", [["get", "rowsInLoadingState", ["loc", [null, [91, 10], [91, 28]]]]], [], 5, null, ["loc", [null, [91, 4], [97, 11]]]], ["block", "unless", [["get", "content", ["loc", [null, [98, 14], [98, 21]]]]], [], 6, 7, ["loc", [null, [98, 4], [140, 15]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7]
    };
  })());
});
define("ember-app/templates/components/olv-setconfigdialogbutton", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "modifiers",
          "modifiers": ["action"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/olv-setconfigdialogbutton.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "ui button");
        var el2 = dom.createElement("i");
        dom.setAttribute(el2, "class", "large setting icon");
        dom.setAttribute(el2, "title", "customize column views");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(1);
        morphs[0] = dom.createElementMorph(element0);
        return morphs;
      },
      statements: [["element", "action", ["choose", ["get", "chooseData", ["loc", [null, [1, 44], [1, 54]]]]], [], ["loc", [null, [1, 26], [1, 56]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/components/olv-toolbar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "modifiers",
            "modifiers": ["action"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element14 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element14, 'class');
          morphs[1] = dom.createAttrMorph(element14, 'title');
          morphs[2] = dom.createElementMorph(element14);
          morphs[3] = dom.createMorphAt(element14, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui refresh-button ", ["get", "buttonClass", ["loc", [null, [3, 31], [3, 42]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.refresh-button-text"], [], ["loc", [null, [4, 10], [4, 60]]]]], ["element", "action", ["refresh"], [], ["loc", [null, [5, 4], [5, 24]]]], ["inline", "t", ["components.olv-toolbar.refresh-button-text"], [], ["loc", [null, [6, 6], [6, 56]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element13 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element13, 'class');
          morphs[1] = dom.createAttrMorph(element13, 'title');
          morphs[2] = dom.createElementMorph(element13);
          morphs[3] = dom.createMorphAt(element13, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui create-button ", ["get", "buttonClass", ["loc", [null, [11, 30], [11, 41]]]], " ", ["subexpr", "if", [["get", "enableCreateNewButton", ["loc", [null, [11, 49], [11, 70]]]], "", "disabled"], [], ["loc", [null, [11, 44], [11, 86]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.add-button-text"], [], ["loc", [null, [12, 10], [12, 56]]]]], ["element", "action", ["createNew"], [], ["loc", [null, [13, 4], [13, 26]]]], ["inline", "t", ["components.olv-toolbar.add-button-text"], [], ["loc", [null, [14, 6], [14, 52]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 24,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element12 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element12, 'class');
          morphs[1] = dom.createAttrMorph(element12, 'title');
          morphs[2] = dom.createElementMorph(element12);
          morphs[3] = dom.createMorphAt(element12, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui delete-button ", ["get", "buttonClass", ["loc", [null, [19, 30], [19, 41]]]], " ", ["subexpr", "if", [["get", "isDeleteButtonEnabled", ["loc", [null, [19, 49], [19, 70]]]], "", "disabled"], [], ["loc", [null, [19, 44], [19, 86]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.delete-button-text"], [], ["loc", [null, [20, 10], [20, 59]]]]], ["element", "action", ["delete"], [], ["loc", [null, [21, 5], [21, 24]]]], ["inline", "t", ["components.olv-toolbar.delete-button-text"], [], ["loc", [null, [22, 6], [22, 55]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 0
            },
            "end": {
              "line": 32,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.setAttribute(el2, "class", "sitemap icon");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element11 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element11, 'class');
          morphs[1] = dom.createAttrMorph(element11, 'title');
          morphs[2] = dom.createElementMorph(element11);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button icon hierarchical-button ", ["get", "buttonClass", ["loc", [null, [27, 48], [27, 59]]]], " ", ["subexpr", "if", [["get", "inHierarchicalMode", ["loc", [null, [27, 67], [27, 85]]]], "active"], [], ["loc", [null, [27, 62], [27, 96]]]]]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.hierarchy-button-text"], [], ["loc", [null, [28, 10], [28, 62]]]]], ["element", "action", [["get", "switchHierarchicalMode", ["loc", [null, [29, 13], [29, 35]]]]], [], ["loc", [null, [29, 4], [29, 37]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 41,
                "column": 4
              },
              "end": {
                "line": 49,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "or");
            dom.setAttribute(el1, "data-text", "•");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "remove icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element8 = dom.childAt(fragment, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element8, 'class');
            morphs[1] = dom.createAttrMorph(element8, 'title');
            morphs[2] = dom.createElementMorph(element8);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui button removeFilter-button ", ["get", "buttonClass", ["loc", [null, [44, 47], [44, 58]]]]]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.remove-filter-button-text"], [], ["loc", [null, [45, 14], [45, 70]]]]], ["element", "action", [["get", "resetFilters", ["loc", [null, [46, 17], [46, 29]]]]], [], ["loc", [null, [46, 8], [46, 31]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 33,
              "column": 0
            },
            "end": {
              "line": 51,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui icon buttons filter-active");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "filter icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element9 = dom.childAt(fragment, [1]);
          var element10 = dom.childAt(element9, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element10, 'class');
          morphs[1] = dom.createAttrMorph(element10, 'title');
          morphs[2] = dom.createElementMorph(element10);
          morphs[3] = dom.createMorphAt(element9, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button ", ["get", "buttonClass", ["loc", [null, [36, 25], [36, 36]]]], " ", ["subexpr", "if", [["get", "showFilters", ["loc", [null, [36, 44], [36, 55]]]], "active"], [], ["loc", [null, [36, 39], [36, 66]]]]]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.filter-button-text"], [], ["loc", [null, [37, 12], [37, 61]]]]], ["element", "action", [["get", "toggleStateFilters", ["loc", [null, [38, 15], [38, 33]]]]], [], ["loc", [null, [38, 6], [38, 35]]]], ["block", "if", [["get", "filters", ["loc", [null, [41, 10], [41, 17]]]]], [], 0, null, ["loc", [null, [41, 4], [49, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 52,
              "column": 0
            },
            "end": {
              "line": 72,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui action input");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "block-action-input");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "search icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "remove icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var element6 = dom.childAt(element5, [3]);
          var element7 = dom.childAt(element5, [5]);
          var morphs = new Array(7);
          morphs[0] = dom.createMorphAt(dom.childAt(element5, [1]), 0, 0);
          morphs[1] = dom.createAttrMorph(element6, 'class');
          morphs[2] = dom.createAttrMorph(element6, 'title');
          morphs[3] = dom.createElementMorph(element6);
          morphs[4] = dom.createAttrMorph(element7, 'class');
          morphs[5] = dom.createAttrMorph(element7, 'title');
          morphs[6] = dom.createElementMorph(element7);
          return morphs;
        },
        statements: [["inline", "input", [], ["type", "text", "placeholder", ["subexpr", "t", ["components.olv-toolbar.filter-by-any-match-placeholder"], [], ["loc", [null, [56, 18], [56, 78]]]], "value", ["subexpr", "@mut", [["get", "filterByAnyMatchText", ["loc", [null, [57, 12], [57, 32]]]]], [], []], "enter", "filterByAnyMatch"], ["loc", [null, [54, 36], [58, 6]]]], ["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [60, 18], [60, 29]]]], " icon button search-button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.search-button-text"], [], ["loc", [null, [61, 12], [61, 61]]]]], ["element", "action", ["filterByAnyMatch"], [], ["loc", [null, [62, 6], [62, 35]]]], ["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [66, 18], [66, 29]]]], " icon button clear-search-button"]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.clear-search-button-text"], [], ["loc", [null, [67, 12], [67, 67]]]]], ["element", "action", ["removeFilter"], [], ["loc", [null, [68, 6], [68, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 73,
              "column": 0
            },
            "end": {
              "line": 86,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui buttons");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "large file excel outline icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element4, 'class');
          morphs[1] = dom.createAttrMorph(element4, 'title');
          morphs[2] = dom.createElementMorph(element4);
          morphs[3] = dom.createMorphAt(element3, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button icon export-button ", ["get", "buttonClass", ["loc", [null, [76, 44], [76, 55]]]]]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.export-excel-button-text"], [], ["loc", [null, [77, 12], [77, 67]]]]], ["element", "action", ["showExportDialog"], [], ["loc", [null, [78, 6], [78, 35]]]], ["inline", "flexberry-menu", [], ["items", ["subexpr", "@mut", [["get", "exportExcelItems", ["loc", [null, [82, 12], [82, 28]]]]], [], []], "onItemClick", ["subexpr", "action", ["onExportMenuItemClick"], [], ["loc", [null, [83, 18], [83, 50]]]]], ["loc", [null, [81, 4], [84, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 95,
                "column": 4
              },
              "end": {
                "line": 100,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/components/olv-toolbar.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-menu", [], ["items", ["subexpr", "@mut", [["get", "colsSettingsItems", ["loc", [null, [97, 14], [97, 31]]]]], [], []], "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [98, 20], [98, 46]]]]], ["loc", [null, [96, 6], [99, 8]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 87,
              "column": 0
            },
            "end": {
              "line": 102,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui buttons");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          dom.setAttribute(el2, "class", "ui icon button config-button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "large table icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element2, 'title');
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["attribute", "title", ["subexpr", "t", ["components.colsconfig-dialog-content.title"], [], ["loc", [null, [91, 12], [91, 62]]]]], ["element", "action", ["showConfigDialog"], [], ["loc", [null, [92, 6], [92, 35]]]], ["block", "if", [["get", "colsSettingsItems", ["loc", [null, [95, 10], [95, 27]]]]], [], 0, null, ["loc", [null, [95, 4], [100, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 103,
              "column": 0
            },
            "end": {
              "line": 110,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/olv-toolbar.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(4);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createAttrMorph(element0, 'title');
          morphs[2] = dom.createElementMorph(element0);
          morphs[3] = dom.createMorphAt(element0, 1, 1);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "customButton.buttonClasses", ["loc", [null, [105, 19], [105, 45]]]], ["get", "customButton.buttonClasses", ["loc", [null, [105, 46], [105, 72]]]], ""], [], ["loc", [null, [105, 14], [105, 77]]]], " button"]]], ["attribute", "title", ["subexpr", "if", [["get", "customButton.buttonTitle", ["loc", [null, [106, 15], [106, 39]]]], ["get", "customButton.buttonTitle", ["loc", [null, [106, 40], [106, 64]]]]], [], ["loc", [null, [106, 10], [106, 66]]]]], ["element", "action", ["customButtonAction", ["get", "customButton.buttonAction", ["loc", [null, [107, 34], [107, 59]]]]], [], ["loc", [null, [107, 4], [107, 61]]]], ["inline", "if", [["get", "customButton.buttonName", ["loc", [null, [108, 11], [108, 34]]]], ["get", "customButton.buttonName", ["loc", [null, [108, 35], [108, 58]]]], ["subexpr", "t", ["components.olv-toolbar.custom-button-text"], [], ["loc", [null, [108, 59], [108, 106]]]]], [], ["loc", [null, [108, 6], [108, 108]]]]],
        locals: ["customButton"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 138,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/olv-toolbar.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "olv-toolbar-info-modal-dialog ui small basic modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui icon header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("i");
        dom.setAttribute(el3, "class", "olvt icon");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "center aligned ui grid");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "ui icon button");
        dom.setAttribute(el3, "id", "OLVToolbarInfoCopyButton");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("i");
        dom.setAttribute(el4, "class", "copy icon");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "actions");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "olv-toolbar-info-modal-dialog-ok-button ui approve green inverted button");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "remove icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui form");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "olv-toolbar-info-modal-dialog-content center aligned ui field");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("textarea");
        dom.setAttribute(el4, "id", "OLVToolbarInfoContent");
        dom.setAttribute(el4, "cols", "80");
        dom.setAttribute(el4, "rows", "20");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element15 = dom.childAt(fragment, [9]);
        var element16 = dom.childAt(element15, [3]);
        var element17 = dom.childAt(element16, [1]);
        var morphs = new Array(15);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        morphs[4] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[5] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        morphs[6] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[7] = dom.createMorphAt(fragment, 7, 7, contextualElement);
        morphs[8] = dom.createMorphAt(fragment, 8, 8, contextualElement);
        morphs[9] = dom.createMorphAt(dom.childAt(element15, [1]), 3, 3);
        morphs[10] = dom.createAttrMorph(element17, 'title');
        morphs[11] = dom.createElementMorph(element17);
        morphs[12] = dom.createMorphAt(element17, 3, 3);
        morphs[13] = dom.createMorphAt(dom.childAt(element16, [3, 1]), 3, 3);
        morphs[14] = dom.createMorphAt(dom.childAt(element15, [5, 1, 1]), 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "refreshButton", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [8, 7]]]], ["block", "if", [["get", "createNewButton", ["loc", [null, [9, 6], [9, 21]]]]], [], 1, null, ["loc", [null, [9, 0], [16, 7]]]], ["block", "if", [["get", "deleteButton", ["loc", [null, [17, 6], [17, 18]]]]], [], 2, null, ["loc", [null, [17, 0], [24, 7]]]], ["block", "if", [["get", "availableHierarchicalMode", ["loc", [null, [25, 6], [25, 31]]]]], [], 3, null, ["loc", [null, [25, 0], [32, 7]]]], ["block", "if", [["get", "enableFilters", ["loc", [null, [33, 6], [33, 19]]]]], [], 4, null, ["loc", [null, [33, 0], [51, 7]]]], ["block", "if", [["get", "filterButton", ["loc", [null, [52, 6], [52, 18]]]]], [], 5, null, ["loc", [null, [52, 0], [72, 7]]]], ["block", "if", [["get", "exportExcelButton", ["loc", [null, [73, 6], [73, 23]]]]], [], 6, null, ["loc", [null, [73, 0], [86, 7]]]], ["block", "if", [["get", "colsConfigButton", ["loc", [null, [87, 6], [87, 22]]]]], [], 7, null, ["loc", [null, [87, 0], [102, 7]]]], ["block", "each", [["get", "customButtons", ["loc", [null, [103, 8], [103, 21]]]]], [], 8, null, ["loc", [null, [103, 0], [110, 9]]]], ["content", "_infoModalDialogCaption", ["loc", [null, [114, 4], [114, 31]]]], ["attribute", "title", ["subexpr", "t", ["components.olv-toolbar.copy"], [], ["loc", [null, [119, 10], [119, 45]]]]], ["element", "action", ["copyJSONContent"], [], ["loc", [null, [120, 4], [120, 32]]]], ["inline", "t", ["components.olv-toolbar.copy"], [], ["loc", [null, [123, 6], [123, 41]]]], ["inline", "t", ["components.olv-toolbar.close"], [], ["loc", [null, [128, 6], [128, 42]]]], ["content", "_infoModalDialogContent", ["loc", [null, [134, 63], [134, 90]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8]
    };
  })());
});
define("ember-app/templates/components/ui-checkbox", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/ui-checkbox.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        if (this.cachedFragment) {
          dom.repairClonedNode(element0, [], true);
        }
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element0, 'type');
        morphs[1] = dom.createAttrMorph(element0, 'name');
        morphs[2] = dom.createAttrMorph(element0, 'checked');
        morphs[3] = dom.createAttrMorph(element0, 'disabled');
        morphs[4] = dom.createAttrMorph(element0, 'data-id');
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "type", ["get", "type", ["loc", [null, [1, 14], [1, 18]]]]], ["attribute", "name", ["get", "name", ["loc", [null, [1, 28], [1, 32]]]]], ["attribute", "checked", ["get", "checked", ["loc", [null, [1, 45], [1, 52]]]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [1, 66], [1, 74]]]]], ["attribute", "data-id", ["get", "data-id", ["loc", [null, [1, 87], [1, 94]]]]], ["content", "label", ["loc", [null, [2, 7], [2, 16]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/components/ui-dropdown", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/ui-dropdown.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/components/ui-message-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/ui-message-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "header");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "caption", ["loc", [null, [2, 22], [2, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/ui-message-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "message", ["loc", [null, [5, 5], [5, 16]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/ui-message-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "caption", ["loc", [null, [1, 6], [1, 13]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "message", ["loc", [null, [4, 6], [4, 13]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["content", "yield", ["loc", [null, [7, 0], [7, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-app/templates/components/ui-message", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "icon", ["loc", [null, [2, 14], [2, 18]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("i");
          dom.setAttribute(el1, "class", "close icon");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "content");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "partial", ["components/ui-message-content"], [], ["loc", [null, [9, 4], [9, 47]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/components/ui-message.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["components/ui-message-content"], [], ["loc", [null, [12, 2], [12, 45]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/ui-message.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "icon", ["loc", [null, [1, 6], [1, 10]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "closeable", ["loc", [null, [4, 6], [4, 15]]]]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["block", "if", [["get", "icon", ["loc", [null, [7, 6], [7, 10]]]]], [], 2, 3, ["loc", [null, [7, 0], [13, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("ember-app/templates/components/ui-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/ui-modal.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/components/ui-radio", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/components/ui-radio.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        if (this.cachedFragment) {
          dom.repairClonedNode(element0, [], true);
        }
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element0, 'type');
        morphs[1] = dom.createAttrMorph(element0, 'name');
        morphs[2] = dom.createAttrMorph(element0, 'checked');
        morphs[3] = dom.createAttrMorph(element0, 'disabled');
        morphs[4] = dom.createAttrMorph(element0, 'data-id');
        morphs[5] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "type", ["get", "type", ["loc", [null, [1, 14], [1, 18]]]]], ["attribute", "name", ["get", "name", ["loc", [null, [1, 28], [1, 32]]]]], ["attribute", "checked", ["get", "checked", ["loc", [null, [1, 45], [1, 52]]]]], ["attribute", "disabled", ["get", "readonly", ["loc", [null, [1, 66], [1, 74]]]]], ["attribute", "data-id", ["get", "data-id", ["loc", [null, [1, 87], [1, 94]]]]], ["content", "label", ["loc", [null, [2, 7], [2, 16]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/flexberry-ember-demo-application-user-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/flexberry-ember-demo-application-user-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/flexberry-ember-demo-application-user-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/flexberry-ember-demo-application-user-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "ember-app/templates/flexberry-ember-demo-application-user-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 211,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/flexberry-ember-demo-application-user-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var element7 = dom.childAt(element2, [9]);
        var element8 = dom.childAt(element2, [11]);
        var element9 = dom.childAt(element2, [13]);
        var element10 = dom.childAt(element2, [15]);
        var element11 = dom.childAt(element2, [17]);
        var element12 = dom.childAt(element2, [19]);
        var element13 = dom.childAt(element2, [21]);
        var element14 = dom.childAt(element2, [23]);
        var element15 = dom.childAt(element2, [25]);
        var element16 = dom.childAt(element2, [27]);
        var element17 = dom.childAt(element2, [29]);
        var element18 = dom.childAt(element2, [31]);
        var morphs = new Array(39);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createAttrMorph(element2, 'class');
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[4] = dom.createMorphAt(element3, 1, 1);
        morphs[5] = dom.createElementMorph(element4);
        morphs[6] = dom.createMorphAt(element4, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 1, 1);
        morphs[8] = dom.createMorphAt(element5, 3, 3);
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createMorphAt(element7, 1, 1);
        morphs[12] = dom.createMorphAt(element7, 3, 3);
        morphs[13] = dom.createMorphAt(element8, 1, 1);
        morphs[14] = dom.createMorphAt(element8, 3, 3);
        morphs[15] = dom.createMorphAt(element9, 1, 1);
        morphs[16] = dom.createMorphAt(element9, 3, 3);
        morphs[17] = dom.createMorphAt(element10, 1, 1);
        morphs[18] = dom.createMorphAt(element10, 3, 3);
        morphs[19] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[20] = dom.createMorphAt(element11, 3, 3);
        morphs[21] = dom.createMorphAt(element11, 5, 5);
        morphs[22] = dom.createMorphAt(element12, 1, 1);
        morphs[23] = dom.createMorphAt(element12, 3, 3);
        morphs[24] = dom.createMorphAt(element13, 1, 1);
        morphs[25] = dom.createMorphAt(element13, 3, 3);
        morphs[26] = dom.createMorphAt(element14, 1, 1);
        morphs[27] = dom.createMorphAt(element14, 3, 3);
        morphs[28] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[29] = dom.createMorphAt(element15, 3, 3);
        morphs[30] = dom.createMorphAt(element15, 5, 5);
        morphs[31] = dom.createMorphAt(dom.childAt(element16, [1]), 0, 0);
        morphs[32] = dom.createMorphAt(element16, 3, 3);
        morphs[33] = dom.createMorphAt(element16, 5, 5);
        morphs[34] = dom.createMorphAt(dom.childAt(element17, [1]), 0, 0);
        morphs[35] = dom.createMorphAt(element17, 3, 3);
        morphs[36] = dom.createMorphAt(element17, 5, 5);
        morphs[37] = dom.createMorphAt(element18, 1, 1);
        morphs[38] = dom.createMorphAt(element18, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.flexberry-ember-demo-application-user-e.caption"], [], ["loc", [null, [1, 22], [1, 83]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["attribute", "class", ["concat", ["ui ", ["get", "state", ["loc", [null, [14, 18], [14, 23]]]], " form flexberry-vertical-form"]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [40, 16], [40, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [41, 13], [41, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [43, 10], [43, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [44, 14], [44, 31]]]], "error", ""], [], ["loc", [null, [44, 10], [44, 43]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-application-user-e.name-caption"], [], ["loc", [null, [45, 10], [45, 74]]]]], ["loc", [null, [38, 2], [46, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [47, 38], [47, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [47, 2], [47, 77]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [53, 16], [53, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 13], [54, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.login", ["loc", [null, [56, 10], [56, 21]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.login", ["loc", [null, [57, 14], [57, 32]]]], "error", ""], [], ["loc", [null, [57, 10], [57, 44]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-application-user-e.login-caption"], [], ["loc", [null, [58, 10], [58, 75]]]]], ["loc", [null, [51, 2], [59, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.login", ["loc", [null, [60, 38], [60, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [60, 2], [60, 78]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [66, 16], [66, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [67, 13], [67, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.eMail", ["loc", [null, [69, 10], [69, 21]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.eMail", ["loc", [null, [70, 14], [70, 32]]]], "error", ""], [], ["loc", [null, [70, 10], [70, 44]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-application-user-e.eMail-caption"], [], ["loc", [null, [71, 10], [71, 75]]]]], ["loc", [null, [64, 2], [72, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.eMail", ["loc", [null, [73, 38], [73, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [73, 2], [73, 78]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [79, 16], [79, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [80, 13], [80, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone1", ["loc", [null, [82, 10], [82, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone1", ["loc", [null, [83, 14], [83, 33]]]], "error", ""], [], ["loc", [null, [83, 10], [83, 45]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-application-user-e.phone1-caption"], [], ["loc", [null, [84, 10], [84, 76]]]]], ["loc", [null, [77, 2], [85, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone1", ["loc", [null, [86, 38], [86, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [86, 2], [86, 79]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [92, 16], [92, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [93, 13], [93, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone2", ["loc", [null, [95, 10], [95, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone2", ["loc", [null, [96, 14], [96, 33]]]], "error", ""], [], ["loc", [null, [96, 10], [96, 45]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-application-user-e.phone2-caption"], [], ["loc", [null, [97, 10], [97, 76]]]]], ["loc", [null, [90, 2], [98, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone2", ["loc", [null, [99, 38], [99, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [99, 2], [99, 79]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [105, 16], [105, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [106, 13], [106, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.phone3", ["loc", [null, [108, 10], [108, 22]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.phone3", ["loc", [null, [109, 14], [109, 33]]]], "error", ""], [], ["loc", [null, [109, 10], [109, 45]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-application-user-e.phone3-caption"], [], ["loc", [null, [110, 10], [110, 76]]]]], ["loc", [null, [103, 2], [111, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.phone3", ["loc", [null, [112, 38], [112, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [112, 2], [112, 79]]]], ["inline", "t", ["forms.flexberry-ember-demo-application-user-e.activated-caption"], [], ["loc", [null, [116, 9], [116, 80]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [119, 13], [119, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.activated", ["loc", [null, [120, 10], [120, 25]]]]], [], []]], ["loc", [null, [117, 2], [121, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.activated", ["loc", [null, [122, 38], [122, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [122, 2], [122, 82]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [128, 16], [128, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [129, 13], [129, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.vK", ["loc", [null, [131, 10], [131, 18]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.vK", ["loc", [null, [132, 14], [132, 29]]]], "error", ""], [], ["loc", [null, [132, 10], [132, 41]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-application-user-e.vK-caption"], [], ["loc", [null, [133, 10], [133, 72]]]]], ["loc", [null, [126, 2], [134, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.vK", ["loc", [null, [135, 38], [135, 53]]]]], [], []], "pointing", "pointing"], ["loc", [null, [135, 2], [135, 75]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [141, 16], [141, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [142, 13], [142, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.facebook", ["loc", [null, [144, 10], [144, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.facebook", ["loc", [null, [145, 14], [145, 35]]]], "error", ""], [], ["loc", [null, [145, 10], [145, 47]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-application-user-e.facebook-caption"], [], ["loc", [null, [146, 10], [146, 78]]]]], ["loc", [null, [139, 2], [147, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.facebook", ["loc", [null, [148, 38], [148, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [148, 2], [148, 81]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [154, 16], [154, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [155, 13], [155, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.twitter", ["loc", [null, [157, 10], [157, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.twitter", ["loc", [null, [158, 14], [158, 34]]]], "error", ""], [], ["loc", [null, [158, 10], [158, 46]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-application-user-e.twitter-caption"], [], ["loc", [null, [159, 10], [159, 77]]]]], ["loc", [null, [152, 2], [160, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.twitter", ["loc", [null, [161, 38], [161, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [161, 2], [161, 80]]]], ["inline", "t", ["forms.flexberry-ember-demo-application-user-e.birthday-caption"], [], ["loc", [null, [165, 9], [165, 79]]]], ["inline", "flexberry-datepicker", [], ["placeholder", "(no value)", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [169, 13], [169, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.birthday", ["loc", [null, [170, 10], [170, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.birthday", ["loc", [null, [171, 14], [171, 35]]]], "error", ""], [], ["loc", [null, [171, 10], [171, 47]]]]], ["loc", [null, [166, 2], [172, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.birthday", ["loc", [null, [173, 38], [173, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [173, 2], [173, 81]]]], ["inline", "t", ["forms.flexberry-ember-demo-application-user-e.gender-caption"], [], ["loc", [null, [177, 9], [177, 77]]]], ["inline", "flexberry-dropdown", [], ["items", ["subexpr", "flexberry-enum", ["flexberry-ember-demo-gender"], [], ["loc", [null, [180, 10], [180, 56]]]], "value", ["subexpr", "@mut", [["get", "model.gender", ["loc", [null, [181, 10], [181, 22]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [182, 13], [182, 21]]]]], [], []]], ["loc", [null, [178, 2], [183, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.gender", ["loc", [null, [184, 38], [184, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [184, 2], [184, 79]]]], ["inline", "t", ["forms.flexberry-ember-demo-application-user-e.vip-caption"], [], ["loc", [null, [188, 9], [188, 74]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [191, 13], [191, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.vip", ["loc", [null, [192, 10], [192, 19]]]]], [], []]], ["loc", [null, [189, 2], [193, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.vip", ["loc", [null, [194, 38], [194, 54]]]]], [], []], "pointing", "pointing"], ["loc", [null, [194, 2], [194, 76]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [200, 16], [200, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [201, 13], [201, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.karma", ["loc", [null, [203, 10], [203, 21]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.karma", ["loc", [null, [204, 14], [204, 32]]]], "error", ""], [], ["loc", [null, [204, 10], [204, 44]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-application-user-e.karma-caption"], [], ["loc", [null, [205, 10], [205, 75]]]]], ["loc", [null, [198, 2], [206, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.karma", ["loc", [null, [207, 38], [207, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [207, 2], [207, 78]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-app/templates/flexberry-ember-demo-application-user-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/flexberry-ember-demo-application-user-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.flexberry-ember-demo-application-user-l.caption"], [], ["loc", [null, [1, 4], [1, 65]]]], ["attribute", "class", ["concat", ["ui ", ["get", "state", ["loc", [null, [2, 17], [2, 22]]]], " row form"]]], ["inline", "flexberry-objectlistview", [], ["modelName", "flexberry-ember-demo-application-user", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [17, 22], [17, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [18, 20], [18, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [19, 16], [19, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [20, 17], [20, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "componentName", "FlexberryEmberDemoApplicationUserL"], ["loc", [null, [3, 2], [24, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/flexberry-ember-demo-application-user-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/flexberry-ember-demo-application-user-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/flexberry-ember-demo-localization-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/flexberry-ember-demo-localization-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/flexberry-ember-demo-localization-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/flexberry-ember-demo-localization-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "ember-app/templates/flexberry-ember-demo-localization-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 51,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/flexberry-ember-demo-localization-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var morphs = new Array(9);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createAttrMorph(element2, 'class');
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[4] = dom.createMorphAt(element3, 1, 1);
        morphs[5] = dom.createElementMorph(element4);
        morphs[6] = dom.createMorphAt(element4, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 1, 1);
        morphs[8] = dom.createMorphAt(element5, 3, 3);
        return morphs;
      },
      statements: [["inline", "t", ["forms.flexberry-ember-demo-localization-e.caption"], [], ["loc", [null, [1, 22], [1, 79]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["attribute", "class", ["concat", ["ui ", ["get", "state", ["loc", [null, [14, 18], [14, 23]]]], " form flexberry-vertical-form"]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [40, 16], [40, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [41, 13], [41, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [43, 10], [43, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [44, 14], [44, 31]]]], "error", ""], [], ["loc", [null, [44, 10], [44, 43]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-localization-e.name-caption"], [], ["loc", [null, [45, 10], [45, 70]]]]], ["loc", [null, [38, 2], [46, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [47, 38], [47, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [47, 2], [47, 77]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-app/templates/flexberry-ember-demo-localization-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/flexberry-ember-demo-localization-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.flexberry-ember-demo-localization-l.caption"], [], ["loc", [null, [1, 4], [1, 61]]]], ["attribute", "class", ["concat", ["ui ", ["get", "state", ["loc", [null, [2, 17], [2, 22]]]], " row form"]]], ["inline", "flexberry-objectlistview", [], ["modelName", "flexberry-ember-demo-localization", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [17, 22], [17, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [18, 20], [18, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [19, 16], [19, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [20, 17], [20, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "componentName", "FlexberryEmberDemoLocalizationL"], ["loc", [null, [3, 2], [24, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/flexberry-ember-demo-localization-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/flexberry-ember-demo-localization-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/flexberry-ember-demo-suggestion-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 186,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var element7 = dom.childAt(element2, [9]);
        var element8 = dom.childAt(element2, [11]);
        var element9 = dom.childAt(element2, [13]);
        var element10 = dom.childAt(element2, [15]);
        var element11 = dom.childAt(element2, [17]);
        var element12 = dom.childAt(element2, [19]);
        var element13 = dom.childAt(element2, [21]);
        var element14 = dom.childAt(element2, [23]);
        var element15 = dom.childAt(element2, [25]);
        var morphs = new Array(36);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createAttrMorph(element2, 'class');
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[4] = dom.createMorphAt(element3, 1, 1);
        morphs[5] = dom.createElementMorph(element4);
        morphs[6] = dom.createMorphAt(element4, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 1, 1);
        morphs[8] = dom.createMorphAt(element5, 3, 3);
        morphs[9] = dom.createMorphAt(element6, 1, 1);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createMorphAt(element7, 1, 1);
        morphs[12] = dom.createMorphAt(element7, 3, 3);
        morphs[13] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[14] = dom.createMorphAt(element8, 3, 3);
        morphs[15] = dom.createMorphAt(element8, 5, 5);
        morphs[16] = dom.createMorphAt(element9, 1, 1);
        morphs[17] = dom.createMorphAt(element9, 3, 3);
        morphs[18] = dom.createMorphAt(dom.childAt(element10, [1]), 0, 0);
        morphs[19] = dom.createMorphAt(element10, 3, 3);
        morphs[20] = dom.createMorphAt(element10, 5, 5);
        morphs[21] = dom.createMorphAt(dom.childAt(element11, [1]), 0, 0);
        morphs[22] = dom.createMorphAt(element11, 3, 3);
        morphs[23] = dom.createMorphAt(element11, 5, 5);
        morphs[24] = dom.createMorphAt(dom.childAt(element12, [1]), 0, 0);
        morphs[25] = dom.createMorphAt(element12, 3, 3);
        morphs[26] = dom.createMorphAt(element12, 5, 5);
        morphs[27] = dom.createMorphAt(dom.childAt(element13, [1]), 0, 0);
        morphs[28] = dom.createMorphAt(element13, 3, 3);
        morphs[29] = dom.createMorphAt(element13, 5, 5);
        morphs[30] = dom.createMorphAt(dom.childAt(element14, [1]), 0, 0);
        morphs[31] = dom.createMorphAt(element14, 3, 3);
        morphs[32] = dom.createMorphAt(element14, 5, 5);
        morphs[33] = dom.createMorphAt(dom.childAt(element15, [1]), 0, 0);
        morphs[34] = dom.createMorphAt(element15, 3, 3);
        morphs[35] = dom.createMorphAt(element15, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.flexberry-ember-demo-suggestion-e.caption"], [], ["loc", [null, [1, 22], [1, 77]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["attribute", "class", ["concat", ["ui ", ["get", "state", ["loc", [null, [14, 18], [14, 23]]]], " form flexberry-vertical-form"]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [40, 16], [40, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [41, 13], [41, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.address", ["loc", [null, [43, 10], [43, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.address", ["loc", [null, [44, 14], [44, 34]]]], "error", ""], [], ["loc", [null, [44, 10], [44, 46]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-suggestion-e.address-caption"], [], ["loc", [null, [45, 10], [45, 71]]]]], ["loc", [null, [38, 2], [46, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.address", ["loc", [null, [47, 38], [47, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [47, 2], [47, 80]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [53, 16], [53, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 13], [54, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.text", ["loc", [null, [56, 10], [56, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.text", ["loc", [null, [57, 14], [57, 31]]]], "error", ""], [], ["loc", [null, [57, 10], [57, 43]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-suggestion-e.text-caption"], [], ["loc", [null, [58, 10], [58, 68]]]]], ["loc", [null, [51, 2], [59, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.text", ["loc", [null, [60, 38], [60, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [60, 2], [60, 77]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [66, 16], [66, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [67, 13], [67, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.polygon", ["loc", [null, [69, 10], [69, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.polygon", ["loc", [null, [70, 14], [70, 34]]]], "error", ""], [], ["loc", [null, [70, 10], [70, 46]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-suggestion-e.polygon-caption"], [], ["loc", [null, [71, 10], [71, 71]]]]], ["loc", [null, [64, 2], [72, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.polygon", ["loc", [null, [73, 38], [73, 58]]]]], [], []], "pointing", "pointing"], ["loc", [null, [73, 2], [73, 80]]]], ["inline", "t", ["forms.flexberry-ember-demo-suggestion-e.date-caption"], [], ["loc", [null, [77, 9], [77, 69]]]], ["inline", "flexberry-datepicker", [], ["placeholder", "(no value)", "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [81, 13], [81, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.date", ["loc", [null, [82, 10], [82, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.date", ["loc", [null, [83, 14], [83, 31]]]], "error", ""], [], ["loc", [null, [83, 10], [83, 43]]]]], ["loc", [null, [78, 2], [84, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.date", ["loc", [null, [85, 38], [85, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [85, 2], [85, 77]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [91, 16], [91, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [92, 13], [92, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.votes", ["loc", [null, [94, 10], [94, 21]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.votes", ["loc", [null, [95, 14], [95, 32]]]], "error", ""], [], ["loc", [null, [95, 10], [95, 44]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-suggestion-e.votes-caption"], [], ["loc", [null, [96, 10], [96, 69]]]]], ["loc", [null, [89, 2], [97, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.votes", ["loc", [null, [98, 38], [98, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [98, 2], [98, 78]]]], ["inline", "t", ["forms.flexberry-ember-demo-suggestion-e.moderated-caption"], [], ["loc", [null, [102, 9], [102, 74]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [105, 13], [105, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [106, 10], [106, 25]]]]], [], []]], ["loc", [null, [103, 2], [107, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [108, 38], [108, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [108, 2], [108, 82]]]], ["inline", "t", ["forms.flexberry-ember-demo-suggestion-e.type-caption"], [], ["loc", [null, [112, 9], [112, 69]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.type", ["loc", [null, [117, 10], [117, 20]]]]], [], []], "displayAttributeName", "name", "relationName", "type", "projection", "SuggestionTypeL", "title", ["subexpr", "t", ["forms.flexberry-ember-demo-suggestion-e.type-caption"], [], ["loc", [null, [121, 10], [121, 68]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [122, 13], [122, 21]]]]], [], []]], ["loc", [null, [113, 2], [123, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.type", ["loc", [null, [124, 38], [124, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [124, 2], [124, 77]]]], ["inline", "t", ["forms.flexberry-ember-demo-suggestion-e.author-caption"], [], ["loc", [null, [128, 9], [128, 71]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.author", ["loc", [null, [133, 10], [133, 22]]]]], [], []], "displayAttributeName", "name", "relationName", "author", "projection", "ApplicationUserL", "title", ["subexpr", "t", ["forms.flexberry-ember-demo-suggestion-e.author-caption"], [], ["loc", [null, [137, 10], [137, 70]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [138, 13], [138, 21]]]]], [], []]], ["loc", [null, [129, 2], [139, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.author", ["loc", [null, [140, 38], [140, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [140, 2], [140, 79]]]], ["inline", "t", ["forms.flexberry-ember-demo-suggestion-e.comments-caption"], [], ["loc", [null, [144, 9], [144, 73]]]], ["inline", "flexberry-groupedit", [], ["componentName", "commentsGroupEdit", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.comments", ["loc", [null, [148, 20], [148, 55]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model.comments", ["loc", [null, [149, 12], [149, 26]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [150, 13], [150, 21]]]]], [], []], "orderable", false, "class", ["subexpr", "if", [["get", "model.errors.comments", ["loc", [null, [152, 14], [152, 35]]]], "error", ""], [], ["loc", [null, [152, 10], [152, 47]]]]], ["loc", [null, [145, 2], [153, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.comments", ["loc", [null, [154, 38], [154, 59]]]]], [], []], "pointing", "pointing"], ["loc", [null, [154, 2], [154, 81]]]], ["inline", "t", ["forms.flexberry-ember-demo-suggestion-e.files-caption"], [], ["loc", [null, [158, 9], [158, 70]]]], ["inline", "flexberry-groupedit", [], ["componentName", "filesGroupEdit", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.files", ["loc", [null, [162, 20], [162, 52]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model.files", ["loc", [null, [163, 12], [163, 23]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [164, 13], [164, 21]]]]], [], []], "orderable", false, "class", ["subexpr", "if", [["get", "model.errors.files", ["loc", [null, [166, 14], [166, 32]]]], "error", ""], [], ["loc", [null, [166, 10], [166, 44]]]]], ["loc", [null, [159, 2], [167, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.files", ["loc", [null, [168, 38], [168, 56]]]]], [], []], "pointing", "pointing"], ["loc", [null, [168, 2], [168, 78]]]], ["inline", "t", ["forms.flexberry-ember-demo-suggestion-e.userVotes-caption"], [], ["loc", [null, [172, 9], [172, 74]]]], ["inline", "flexberry-groupedit", [], ["componentName", "userVotesGroupEdit", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.userVotes", ["loc", [null, [176, 20], [176, 56]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model.userVotes", ["loc", [null, [177, 12], [177, 27]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [178, 13], [178, 21]]]]], [], []], "orderable", false, "class", ["subexpr", "if", [["get", "model.errors.userVotes", ["loc", [null, [180, 14], [180, 36]]]], "error", ""], [], ["loc", [null, [180, 10], [180, 48]]]]], ["loc", [null, [173, 2], [181, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.userVotes", ["loc", [null, [182, 38], [182, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [182, 2], [182, 82]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-app/templates/flexberry-ember-demo-suggestion-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.flexberry-ember-demo-suggestion-l.caption"], [], ["loc", [null, [1, 4], [1, 59]]]], ["attribute", "class", ["concat", ["ui ", ["get", "state", ["loc", [null, [2, 17], [2, 22]]]], " row form"]]], ["inline", "flexberry-objectlistview", [], ["modelName", "flexberry-ember-demo-suggestion", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [17, 22], [17, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [18, 20], [18, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [19, 16], [19, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [20, 17], [20, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "componentName", "FlexberryEmberDemoSuggestionL"], ["loc", [null, [3, 2], [24, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/flexberry-ember-demo-suggestion-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/flexberry-ember-demo-suggestion-type-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-type-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [10, 14], [10, 26]]]]], [], []]], ["loc", [null, [5, 4], [11, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-type-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [4, 10], [4, 23]]]]], [], 0, null, ["loc", [null, [4, 2], [12, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 8
              },
              "end": {
                "line": 30,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-type-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui negative button");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [27, 59], [27, 78]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [28, 12], [28, 54]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 22,
              "column": 6
            },
            "end": {
              "line": 31,
              "column": 6
            }
          },
          "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-type-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "type", "submit");
          dom.setAttribute(el1, "class", "ui positive button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createElementMorph(element1);
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["element", "action", ["save"], [], ["loc", [null, [23, 57], [23, 74]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [24, 10], [24, 50]]]], ["block", "unless", [["get", "model.isNew", ["loc", [null, [26, 18], [26, 29]]]]], [], 0, null, ["loc", [null, [26, 8], [30, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 91,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-type-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "sixteen wide");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [3]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [5]);
        var element6 = dom.childAt(element2, [7]);
        var element7 = dom.childAt(element2, [9]);
        var element8 = dom.childAt(element2, [11]);
        var morphs = new Array(18);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createAttrMorph(element2, 'class');
        morphs[3] = dom.createMorphAt(dom.childAt(element2, [1, 1]), 1, 1);
        morphs[4] = dom.createMorphAt(element3, 1, 1);
        morphs[5] = dom.createElementMorph(element4);
        morphs[6] = dom.createMorphAt(element4, 1, 1);
        morphs[7] = dom.createMorphAt(element5, 1, 1);
        morphs[8] = dom.createMorphAt(element5, 3, 3);
        morphs[9] = dom.createMorphAt(dom.childAt(element6, [1]), 0, 0);
        morphs[10] = dom.createMorphAt(element6, 3, 3);
        morphs[11] = dom.createMorphAt(element6, 5, 5);
        morphs[12] = dom.createMorphAt(dom.childAt(element7, [1]), 0, 0);
        morphs[13] = dom.createMorphAt(element7, 3, 3);
        morphs[14] = dom.createMorphAt(element7, 5, 5);
        morphs[15] = dom.createMorphAt(dom.childAt(element8, [1]), 0, 0);
        morphs[16] = dom.createMorphAt(element8, 3, 3);
        morphs[17] = dom.createMorphAt(element8, 5, 5);
        return morphs;
      },
      statements: [["inline", "t", ["forms.flexberry-ember-demo-suggestion-type-e.caption"], [], ["loc", [null, [1, 22], [1, 82]]]], ["block", "if", [["get", "errorMessages", ["loc", [null, [3, 6], [3, 19]]]]], [], 0, null, ["loc", [null, [3, 0], [13, 7]]]], ["attribute", "class", ["concat", ["ui ", ["get", "state", ["loc", [null, [14, 18], [14, 23]]]], " form flexberry-vertical-form"]]], ["inline", "flexberry-validationsummary", [], ["errors", ["subexpr", "@mut", [["get", "model.errors", ["loc", [null, [17, 43], [17, 55]]]]], [], []]], ["loc", [null, [17, 6], [17, 57]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [22, 16], [22, 24]]]]], [], 1, null, ["loc", [null, [22, 6], [31, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [32, 46], [32, 64]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [33, 8], [33, 49]]]], ["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [40, 16], [40, 60]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [41, 13], [41, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [43, 10], [43, 20]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.name", ["loc", [null, [44, 14], [44, 31]]]], "error", ""], [], ["loc", [null, [44, 10], [44, 43]]]], "label", ["subexpr", "t", ["forms.flexberry-ember-demo-suggestion-type-e.name-caption"], [], ["loc", [null, [45, 10], [45, 73]]]]], ["loc", [null, [38, 2], [46, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.name", ["loc", [null, [47, 38], [47, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [47, 2], [47, 77]]]], ["inline", "t", ["forms.flexberry-ember-demo-suggestion-type-e.moderated-caption"], [], ["loc", [null, [51, 9], [51, 79]]]], ["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [54, 13], [54, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.moderated", ["loc", [null, [55, 10], [55, 25]]]]], [], []]], ["loc", [null, [52, 2], [56, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.moderated", ["loc", [null, [57, 38], [57, 60]]]]], [], []], "pointing", "pointing"], ["loc", [null, [57, 2], [57, 82]]]], ["inline", "t", ["forms.flexberry-ember-demo-suggestion-type-e.parent-caption"], [], ["loc", [null, [61, 9], [61, 76]]]], ["inline", "flexberry-lookup", [], ["choose", "showLookupDialog", "remove", "removeLookupValue", "value", ["subexpr", "@mut", [["get", "model.parent", ["loc", [null, [66, 10], [66, 22]]]]], [], []], "displayAttributeName", "name", "relationName", "parent", "projection", "SuggestionTypeL", "title", ["subexpr", "t", ["forms.flexberry-ember-demo-suggestion-type-e.parent-caption"], [], ["loc", [null, [70, 10], [70, 75]]]], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [71, 13], [71, 21]]]]], [], []]], ["loc", [null, [62, 2], [72, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.parent", ["loc", [null, [73, 38], [73, 57]]]]], [], []], "pointing", "pointing"], ["loc", [null, [73, 2], [73, 79]]]], ["inline", "t", ["forms.flexberry-ember-demo-suggestion-type-e.localizedTypes-caption"], [], ["loc", [null, [77, 9], [77, 84]]]], ["inline", "flexberry-groupedit", [], ["componentName", "localizedTypesGroupEdit", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection.attributes.localizedTypes", ["loc", [null, [81, 20], [81, 61]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model.localizedTypes", ["loc", [null, [82, 12], [82, 32]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [83, 13], [83, 21]]]]], [], []], "orderable", false, "class", ["subexpr", "if", [["get", "model.errors.localizedTypes", ["loc", [null, [85, 14], [85, 41]]]], "error", ""], [], ["loc", [null, [85, 10], [85, 53]]]]], ["loc", [null, [78, 2], [86, 4]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "model.errors.localizedTypes", ["loc", [null, [87, 38], [87, 65]]]]], [], []], "pointing", "pointing"], ["loc", [null, [87, 2], [87, 87]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-app/templates/flexberry-ember-demo-suggestion-type-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-type-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.flexberry-ember-demo-suggestion-type-l.caption"], [], ["loc", [null, [1, 4], [1, 64]]]], ["attribute", "class", ["concat", ["ui ", ["get", "state", ["loc", [null, [2, 17], [2, 22]]]], " row form"]]], ["inline", "flexberry-objectlistview", [], ["modelName", "flexberry-ember-demo-suggestion-type", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [5, 20], [5, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [6, 18], [6, 31]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [7, 12], [7, 17]]]]], [], []], "createNewButton", true, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [12, 17], [12, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [13, 23], [13, 52]]]], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [14, 10], [14, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [15, 17], [15, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [16, 18], [16, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [17, 22], [17, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [18, 20], [18, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [19, 16], [19, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [20, 17], [20, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "componentName", "FlexberryEmberDemoSuggestionTypeL"], ["loc", [null, [3, 2], [24, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/flexberry-ember-demo-suggestion-type-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/flexberry-ember-demo-suggestion-type-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/flexberry-file-view-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "triple-curlies"
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/flexberry-file-view-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("img");
          dom.setAttribute(el1, "class", "flexberry-file-view-dialog");
          dom.setAttribute(el1, "alt", "LoadedImage");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(1);
          morphs[0] = dom.createAttrMorph(element0, 'src');
          return morphs;
        },
        statements: [["attribute", "src", ["concat", [["get", "imageSrc", ["loc", [null, [8, 49], [8, 57]]]]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/flexberry-file-view-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "useOkButton", false, "close", "removeModalDialog", "created", "createdModalDialog", "viewImageContent", true, "sizeClass", ["subexpr", "@mut", [["get", "sizeClass", ["loc", [null, [7, 12], [7, 21]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [9, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [8, 14], [8, 26]]]]], [], []]], ["loc", [null, [4, 4], [9, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [3, 10], [3, 23]]]]], [], 0, null, ["loc", [null, [3, 2], [10, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 8
              },
              "end": {
                "line": 19,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element2 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element2);
            morphs[1] = dom.createMorphAt(element2, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["save"], [], ["loc", [null, [18, 62], [18, 79]]]], ["inline", "t", ["forms.edit-form.save-button-text"], [], ["loc", [null, [18, 80], [18, 120]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 8
              },
              "end": {
                "line": 22,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-close-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["saveAndClose"], [], ["loc", [null, [21, 68], [21, 93]]]], ["inline", "t", ["forms.edit-form.saveAndClose-button-text"], [], ["loc", [null, [21, 94], [21, 142]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 8
              },
              "end": {
                "line": 25,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "type", "submit");
            dom.setAttribute(el1, "class", "ui button save-del-button");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["delete"], [], ["loc", [null, [24, 66], [24, 85]]]], ["inline", "t", ["forms.edit-form.delete-button-text"], [], ["loc", [null, [24, 86], [24, 128]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 6
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [17, 23], [17, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [17, 43], [17, 63]]]]], [], ["loc", [null, [17, 38], [17, 64]]]]], [], ["loc", [null, [17, 18], [17, 65]]]]], [], 0, null, ["loc", [null, [17, 8], [19, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [20, 23], [20, 37]]]], ["subexpr", "not", [["get", "saveBeforeRouteLeave", ["loc", [null, [20, 43], [20, 63]]]]], [], ["loc", [null, [20, 38], [20, 64]]]]], [], ["loc", [null, [20, 18], [20, 65]]]]], [], 1, null, ["loc", [null, [20, 8], [22, 19]]]], ["block", "unless", [["subexpr", "and", [["get", "model.isNew", ["loc", [null, [23, 23], [23, 34]]]], ["subexpr", "or", [["subexpr", "not", [["get", "hasParentRoute", ["loc", [null, [23, 44], [23, 58]]]]], [], ["loc", [null, [23, 39], [23, 59]]]], ["subexpr", "and", [["get", "hasParentRoute", ["loc", [null, [23, 65], [23, 79]]]], ["get", "saveBeforeRouteLeave", ["loc", [null, [23, 80], [23, 100]]]]], [], ["loc", [null, [23, 60], [23, 101]]]]], [], ["loc", [null, [23, 35], [23, 102]]]]], [], ["loc", [null, [23, 18], [23, 103]]]]], [], 2, null, ["loc", [null, [23, 8], [25, 19]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 32,
              "column": 2
            },
            "end": {
              "line": 36,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.category", ["loc", [null, [34, 6], [34, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 47,
              "column": 2
            },
            "end": {
              "line": 51,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.eventId", ["loc", [null, [49, 6], [49, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 62,
              "column": 2
            },
            "end": {
              "line": 66,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.priority", ["loc", [null, [64, 6], [64, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 77,
              "column": 2
            },
            "end": {
              "line": 81,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.severity", ["loc", [null, [79, 6], [79, 31]]]]],
        locals: [],
        templates: []
      };
    })();
    var child6 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 92,
              "column": 2
            },
            "end": {
              "line": 96,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.title", ["loc", [null, [94, 6], [94, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    var child7 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 108,
              "column": 2
            },
            "end": {
              "line": 110,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "model.errors.timestamp", ["loc", [null, [109, 28], [109, 54]]]]],
        locals: [],
        templates: []
      };
    })();
    var child8 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 119,
              "column": 2
            },
            "end": {
              "line": 123,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.machineName", ["loc", [null, [121, 6], [121, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    var child9 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 134,
              "column": 2
            },
            "end": {
              "line": 138,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.appDomainName", ["loc", [null, [136, 6], [136, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    var child10 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 149,
              "column": 2
            },
            "end": {
              "line": 153,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.processId", ["loc", [null, [151, 6], [151, 32]]]]],
        locals: [],
        templates: []
      };
    })();
    var child11 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 164,
              "column": 2
            },
            "end": {
              "line": 168,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.processName", ["loc", [null, [166, 6], [166, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    var child12 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 179,
              "column": 2
            },
            "end": {
              "line": 183,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.threadName", ["loc", [null, [181, 6], [181, 33]]]]],
        locals: [],
        templates: []
      };
    })();
    var child13 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 194,
              "column": 2
            },
            "end": {
              "line": 198,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.win32ThreadId", ["loc", [null, [196, 6], [196, 36]]]]],
        locals: [],
        templates: []
      };
    })();
    var child14 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 209,
              "column": 2
            },
            "end": {
              "line": 213,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.message", ["loc", [null, [211, 6], [211, 30]]]]],
        locals: [],
        templates: []
      };
    })();
    var child15 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 224,
              "column": 2
            },
            "end": {
              "line": 228,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "style", "color:red");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["content", "model.errors.formattedMessage", ["loc", [null, [226, 6], [226, 39]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 239,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-e.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "class", "ui form flexberry-vertical-form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "field");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flexberry-edit-panel");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("button");
        dom.setAttribute(el5, "type", "submit");
        dom.setAttribute(el5, "class", "ui button close-button");
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n  ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("Timestamp");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [3]);
        var element4 = dom.childAt(element3, [1, 1, 1]);
        var element5 = dom.childAt(element4, [3]);
        var element6 = dom.childAt(element3, [3]);
        var element7 = dom.childAt(element3, [5]);
        var element8 = dom.childAt(element3, [7]);
        var element9 = dom.childAt(element3, [9]);
        var element10 = dom.childAt(element3, [11]);
        var element11 = dom.childAt(element3, [13]);
        var element12 = dom.childAt(element3, [15]);
        var element13 = dom.childAt(element3, [17]);
        var element14 = dom.childAt(element3, [19]);
        var element15 = dom.childAt(element3, [21]);
        var element16 = dom.childAt(element3, [23]);
        var element17 = dom.childAt(element3, [25]);
        var element18 = dom.childAt(element3, [27]);
        var element19 = dom.childAt(element3, [29]);
        var morphs = new Array(32);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(element4, 1, 1);
        morphs[2] = dom.createElementMorph(element5);
        morphs[3] = dom.createMorphAt(element5, 0, 0);
        morphs[4] = dom.createMorphAt(element6, 1, 1);
        morphs[5] = dom.createMorphAt(element6, 3, 3);
        morphs[6] = dom.createMorphAt(element7, 1, 1);
        morphs[7] = dom.createMorphAt(element7, 3, 3);
        morphs[8] = dom.createMorphAt(element8, 1, 1);
        morphs[9] = dom.createMorphAt(element8, 3, 3);
        morphs[10] = dom.createMorphAt(element9, 1, 1);
        morphs[11] = dom.createMorphAt(element9, 3, 3);
        morphs[12] = dom.createMorphAt(element10, 1, 1);
        morphs[13] = dom.createMorphAt(element10, 3, 3);
        morphs[14] = dom.createMorphAt(element11, 3, 3);
        morphs[15] = dom.createMorphAt(element11, 5, 5);
        morphs[16] = dom.createMorphAt(element12, 1, 1);
        morphs[17] = dom.createMorphAt(element12, 3, 3);
        morphs[18] = dom.createMorphAt(element13, 1, 1);
        morphs[19] = dom.createMorphAt(element13, 3, 3);
        morphs[20] = dom.createMorphAt(element14, 1, 1);
        morphs[21] = dom.createMorphAt(element14, 3, 3);
        morphs[22] = dom.createMorphAt(element15, 1, 1);
        morphs[23] = dom.createMorphAt(element15, 3, 3);
        morphs[24] = dom.createMorphAt(element16, 1, 1);
        morphs[25] = dom.createMorphAt(element16, 3, 3);
        morphs[26] = dom.createMorphAt(element17, 1, 1);
        morphs[27] = dom.createMorphAt(element17, 3, 3);
        morphs[28] = dom.createMorphAt(element18, 1, 1);
        morphs[29] = dom.createMorphAt(element18, 3, 3);
        morphs[30] = dom.createMorphAt(element19, 1, 1);
        morphs[31] = dom.createMorphAt(element19, 3, 3);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMessages", ["loc", [null, [2, 6], [2, 19]]]]], [], 0, null, ["loc", [null, [2, 0], [11, 7]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [16, 16], [16, 24]]]]], [], 1, null, ["loc", [null, [16, 6], [26, 17]]]], ["element", "action", ["close"], [], ["loc", [null, [27, 59], [27, 77]]]], ["inline", "t", ["forms.edit-form.close-button-text"], [], ["loc", [null, [27, 78], [27, 119]]]], ["block", "if", [["get", "model.errors.category", ["loc", [null, [32, 8], [32, 29]]]]], [], 2, null, ["loc", [null, [32, 2], [36, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [38, 13], [38, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.category", ["loc", [null, [40, 10], [40, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.category", ["loc", [null, [41, 14], [41, 35]]]], "error", ""], [], ["loc", [null, [41, 10], [41, 47]]]], "label", "Category"], ["loc", [null, [37, 2], [43, 4]]]], ["block", "if", [["get", "model.errors.eventId", ["loc", [null, [47, 8], [47, 28]]]]], [], 3, null, ["loc", [null, [47, 2], [51, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [53, 13], [53, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.eventId", ["loc", [null, [55, 10], [55, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.eventId", ["loc", [null, [56, 14], [56, 34]]]], "error", ""], [], ["loc", [null, [56, 10], [56, 46]]]], "label", "Event id"], ["loc", [null, [52, 2], [58, 4]]]], ["block", "if", [["get", "model.errors.priority", ["loc", [null, [62, 8], [62, 29]]]]], [], 4, null, ["loc", [null, [62, 2], [66, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [68, 13], [68, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.priority", ["loc", [null, [70, 10], [70, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.priority", ["loc", [null, [71, 14], [71, 35]]]], "error", ""], [], ["loc", [null, [71, 10], [71, 47]]]], "label", "Priority"], ["loc", [null, [67, 2], [73, 4]]]], ["block", "if", [["get", "model.errors.severity", ["loc", [null, [77, 8], [77, 29]]]]], [], 5, null, ["loc", [null, [77, 2], [81, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [83, 13], [83, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.severity", ["loc", [null, [85, 10], [85, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.severity", ["loc", [null, [86, 14], [86, 35]]]], "error", ""], [], ["loc", [null, [86, 10], [86, 47]]]], "label", "Severity"], ["loc", [null, [82, 2], [88, 4]]]], ["block", "if", [["get", "model.errors.title", ["loc", [null, [92, 8], [92, 26]]]]], [], 6, null, ["loc", [null, [92, 2], [96, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [98, 13], [98, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.title", ["loc", [null, [100, 10], [100, 21]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.title", ["loc", [null, [101, 14], [101, 32]]]], "error", ""], [], ["loc", [null, [101, 10], [101, 44]]]], "label", "Title"], ["loc", [null, [97, 2], [103, 4]]]], ["block", "if", [["get", "model.errors.timestamp", ["loc", [null, [108, 8], [108, 30]]]]], [], 7, null, ["loc", [null, [108, 2], [110, 9]]]], ["inline", "flexberry-datepicker", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [112, 13], [112, 21]]]]], [], []], "value", ["subexpr", "@mut", [["get", "model.timestamp", ["loc", [null, [113, 10], [113, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.timestamp", ["loc", [null, [114, 14], [114, 36]]]], "error", ""], [], ["loc", [null, [114, 10], [114, 48]]]]], ["loc", [null, [111, 2], [115, 4]]]], ["block", "if", [["get", "model.errors.machineName", ["loc", [null, [119, 8], [119, 32]]]]], [], 8, null, ["loc", [null, [119, 2], [123, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [125, 13], [125, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.machineName", ["loc", [null, [127, 10], [127, 27]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.machineName", ["loc", [null, [128, 14], [128, 38]]]], "error", ""], [], ["loc", [null, [128, 10], [128, 50]]]], "label", "Machine name"], ["loc", [null, [124, 2], [130, 4]]]], ["block", "if", [["get", "model.errors.appDomainName", ["loc", [null, [134, 8], [134, 34]]]]], [], 9, null, ["loc", [null, [134, 2], [138, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [140, 13], [140, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.appDomainName", ["loc", [null, [142, 10], [142, 29]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.appDomainName", ["loc", [null, [143, 14], [143, 40]]]], "error", ""], [], ["loc", [null, [143, 10], [143, 52]]]], "label", "App domain name"], ["loc", [null, [139, 2], [145, 4]]]], ["block", "if", [["get", "model.errors.processId", ["loc", [null, [149, 8], [149, 30]]]]], [], 10, null, ["loc", [null, [149, 2], [153, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [155, 13], [155, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.processId", ["loc", [null, [157, 10], [157, 25]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.processId", ["loc", [null, [158, 14], [158, 36]]]], "error", ""], [], ["loc", [null, [158, 10], [158, 48]]]], "label", "Process id"], ["loc", [null, [154, 2], [160, 4]]]], ["block", "if", [["get", "model.errors.processName", ["loc", [null, [164, 8], [164, 32]]]]], [], 11, null, ["loc", [null, [164, 2], [168, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [170, 13], [170, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.processName", ["loc", [null, [172, 10], [172, 27]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.processName", ["loc", [null, [173, 14], [173, 38]]]], "error", ""], [], ["loc", [null, [173, 10], [173, 50]]]], "label", "Process name"], ["loc", [null, [169, 2], [175, 4]]]], ["block", "if", [["get", "model.errors.threadName", ["loc", [null, [179, 8], [179, 31]]]]], [], 12, null, ["loc", [null, [179, 2], [183, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [185, 13], [185, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.threadName", ["loc", [null, [187, 10], [187, 26]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.threadName", ["loc", [null, [188, 14], [188, 37]]]], "error", ""], [], ["loc", [null, [188, 10], [188, 49]]]], "label", "Thread name"], ["loc", [null, [184, 2], [190, 4]]]], ["block", "if", [["get", "model.errors.win32ThreadId", ["loc", [null, [194, 8], [194, 34]]]]], [], 13, null, ["loc", [null, [194, 2], [198, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [200, 13], [200, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.win32ThreadId", ["loc", [null, [202, 10], [202, 29]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.win32ThreadId", ["loc", [null, [203, 14], [203, 40]]]], "error", ""], [], ["loc", [null, [203, 10], [203, 52]]]], "label", "Win32 thread id"], ["loc", [null, [199, 2], [205, 4]]]], ["block", "if", [["get", "model.errors.message", ["loc", [null, [209, 8], [209, 28]]]]], [], 14, null, ["loc", [null, [209, 2], [213, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [215, 13], [215, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.message", ["loc", [null, [217, 10], [217, 23]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.message", ["loc", [null, [218, 14], [218, 34]]]], "error", ""], [], ["loc", [null, [218, 10], [218, 46]]]], "label", "Message"], ["loc", [null, [214, 2], [220, 4]]]], ["block", "if", [["get", "model.errors.formattedMessage", ["loc", [null, [224, 8], [224, 37]]]]], [], 15, null, ["loc", [null, [224, 2], [228, 9]]]], ["inline", "flexberry-field", [], ["readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [230, 13], [230, 21]]]]], [], []], "required", true, "value", ["subexpr", "@mut", [["get", "model.formattedMessage", ["loc", [null, [232, 10], [232, 32]]]]], [], []], "class", ["subexpr", "if", [["get", "model.errors.formattedMessage", ["loc", [null, [233, 14], [233, 43]]]], "error", ""], [], ["loc", [null, [233, 10], [233, 55]]]], "label", "Formatted message"], ["loc", [null, [229, 2], [235, 4]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5, child6, child7, child8, child9, child10, child11, child12, child13, child14, child15]
    };
  })());
});
define("ember-app/templates/i-i-s-caseberry-logging-objects-application-log-l", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 26,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-l.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.i-i-s-caseberry-logging-objects-application-log-l.caption"], [], ["loc", [null, [1, 4], [1, 75]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", "i-i-s-caseberry-logging-objects-application-log", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "createNewButton", false, "refreshButton", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [10, 12], [10, 27]]]]], [], []], "orderable", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [12, 10], [12, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [13, 17], [13, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [14, 18], [14, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [15, 22], [15, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [16, 20], [16, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [17, 16], [17, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [18, 17], [18, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [19, 23], [19, 52]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [20, 17], [20, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [21, 13], [21, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [22, 13], [22, 32]]]], "componentName", "IISLoggingObjectListView"], ["loc", [null, [3, 2], [24, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/i-i-s-caseberry-logging-objects-application-log-l/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/i-i-s-caseberry-logging-objects-application-log-l/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n        Loading ...\n        ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode(" \n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/loading.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "loading-pane");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "loading-message");
        var el3 = dom.createTextNode("\n    Loading ...\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "spinner");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/login", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/login.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "message", ["subexpr", "@mut", [["get", "errorMessage", ["loc", [null, [7, 12], [7, 24]]]]], [], []]], ["loc", [null, [4, 2], [8, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 2
            },
            "end": {
              "line": 18,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/login.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "ui-message", [], ["type", "info", "message", ["subexpr", "t", ["forms.login.you-logged-as"], ["login", ["get", "login", ["loc", [null, [16, 51], [16, 56]]]]], ["loc", [null, [16, 14], [16, 57]]]]], ["loc", [null, [14, 4], [17, 6]]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 18,
              "column": 2
            },
            "end": {
              "line": 40,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/login.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "field");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3]);
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          morphs[2] = dom.createAttrMorph(element1, 'class');
          morphs[3] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
          morphs[4] = dom.createMorphAt(element1, 3, 3);
          morphs[5] = dom.createMorphAt(element1, 5, 5);
          return morphs;
        },
        statements: [["inline", "flexberry-field", [], ["placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [21, 20], [21, 64]]]], "required", true, "value", ["subexpr", "@mut", [["get", "loginInput", ["loc", [null, [23, 14], [23, 24]]]]], [], []], "class", ["subexpr", "if", [["get", "emptyLogin", ["loc", [null, [24, 18], [24, 28]]]], "error", ""], [], ["loc", [null, [24, 14], [24, 40]]]], "label", ["subexpr", "t", ["forms.login.login"], [], ["loc", [null, [25, 14], [25, 37]]]]], ["loc", [null, [20, 6], [26, 8]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "emptyLogin", ["loc", [null, [27, 42], [27, 52]]]]], [], []], "pointing", "pointing"], ["loc", [null, [27, 6], [27, 74]]]], ["attribute", "class", ["concat", ["field", ["subexpr", "if", [["get", "emptyPassword", ["loc", [null, [30, 26], [30, 39]]]], " error", ""], [], ["loc", [null, [30, 21], [30, 53]]]]]]], ["inline", "t", ["forms.login.password"], [], ["loc", [null, [31, 13], [31, 41]]]], ["inline", "input", [], ["type", "password", "required", true, "value", ["subexpr", "@mut", [["get", "password", ["loc", [null, [35, 14], [35, 22]]]]], [], []], "placeholder", ["subexpr", "t", ["components.flexberry-field.placeholder"], [], ["loc", [null, [36, 20], [36, 64]]]]], ["loc", [null, [32, 6], [37, 8]]]], ["inline", "flexberry-validationmessage", [], ["error", ["subexpr", "@mut", [["get", "emptyPassword", ["loc", [null, [38, 42], [38, 55]]]]], [], []], "pointing", "pointing"], ["loc", [null, [38, 6], [38, 77]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 53,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/login.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("form");
        dom.setAttribute(el1, "role", "form");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "field");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-edit-panel");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui positive button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "type", "submit");
        dom.setAttribute(el4, "class", "ui button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [4]);
        var element3 = dom.childAt(element2, [3, 1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createAttrMorph(element2, 'class');
        morphs[3] = dom.createMorphAt(element2, 1, 1);
        morphs[4] = dom.createElementMorph(element4);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createElementMorph(element5);
        morphs[7] = dom.createMorphAt(element5, 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.login.caption"], [], ["loc", [null, [1, 22], [1, 49]]]], ["block", "if", [["get", "errorMessage", ["loc", [null, [3, 6], [3, 18]]]]], [], 0, null, ["loc", [null, [3, 0], [9, 7]]]], ["attribute", "class", ["concat", ["ui form flexberry-vertical-form ", ["subexpr", "if", [["get", "tryToLogin", ["loc", [null, [11, 50], [11, 60]]]], "loading"], [], ["loc", [null, [11, 45], [11, 72]]]]]]], ["block", "if", [["get", "login", ["loc", [null, [13, 8], [13, 13]]]]], [], 1, 2, ["loc", [null, [13, 2], [40, 9]]]], ["element", "action", [["subexpr", "if", [["get", "login", ["loc", [null, [44, 68], [44, 73]]]], "logout", "login"], [], ["loc", [null, [44, 64], [44, 91]]]]], [], ["loc", [null, [44, 55], [44, 93]]]], ["inline", "t", [["subexpr", "if", [["get", "login", ["loc", [null, [45, 16], [45, 21]]]], "forms.login.logout", "forms.login.caption"], [], ["loc", [null, [45, 12], [45, 65]]]]], [], ["loc", [null, [45, 8], [45, 67]]]], ["element", "action", ["closeLoginForm"], [], ["loc", [null, [47, 46], [47, 73]]]], ["inline", "t", ["forms.login.back"], [], ["loc", [null, [48, 8], [48, 32]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("ember-app/templates/lookup-dialog-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "triple-curlies"
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 37,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/lookup-dialog-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "lookup-list");
        dom.setAttribute(el1, "class", "list-group");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "flexberry-objectlistview", [], ["class", "ui bottom attached", "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [4, 20], [4, 35]]]]], [], []], "content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [5, 12], [5, 17]]]]], [], []], "selectedRecord", ["subexpr", "@mut", [["get", "currentLookupRow", ["loc", [null, [6, 19], [6, 35]]]]], [], []], "componentMode", "lookupform", "componentName", "flexberry-objectlistview-at-lookup", "showEditMenuItemInRow", false, "createNewButton", false, "showCheckBoxInRow", false, "colsConfigButton", false, "filterByAnyMatch", ["subexpr", "action", ["filterByAnyMatch"], [], ["loc", [null, [15, 21], [15, 48]]]], "filterText", ["subexpr", "@mut", [["get", "filter", ["loc", [null, [16, 15], [16, 21]]]]], [], []], "customProperties", ["subexpr", "@mut", [["get", "customPropertiesData", ["loc", [null, [18, 21], [18, 41]]]]], [], []], "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [20, 10], [20, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [21, 17], [21, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [22, 18], [22, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [23, 22], [23, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [24, 20], [24, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [25, 16], [25, 27]]]]], [], []], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [26, 17], [26, 40]]]], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [27, 13], [27, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [28, 13], [28, 32]]]], "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [30, 12], [30, 27]]]]], [], []], "orderable", true, "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [32, 17], [32, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [33, 23], [33, 52]]]], "notUseUserSettings", true], ["loc", [null, [2, 2], [35, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/lookup-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/lookup-dialog.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "outlet", ["modal-content"], [], ["loc", [null, [10, 2], [10, 28]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/lookup-dialog.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "modal-dialog", [], ["title", ["subexpr", "@mut", [["get", "title", ["loc", [null, [2, 8], [2, 13]]]]], [], []], "sizeClass", ["subexpr", "@mut", [["get", "sizeClass", ["loc", [null, [3, 12], [3, 21]]]]], [], []], "close", "removeModalDialog", "created", "createdModalDialog", "useOkButton", false, "useCloseButton", false, "componentName", ["subexpr", "@mut", [["get", "componentName", ["loc", [null, [8, 16], [8, 29]]]]], [], []]], 0, null, ["loc", [null, [1, 0], [11, 17]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/map", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 105,
              "column": 8
            }
          },
          "moduleName": "ember-app/templates/map.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(10);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
          morphs[7] = dom.createMorphAt(fragment, 15, 15, contextualElement);
          morphs[8] = dom.createMorphAt(fragment, 17, 17, contextualElement);
          morphs[9] = dom.createMorphAt(fragment, 19, 19, contextualElement);
          return morphs;
        },
        statements: [["inline", "map-tools/drag", [], ["activate", ["subexpr", "action", ["onMapToolActivate"], ["target", ["get", "mapToolbar", ["loc", [null, [83, 71], [83, 81]]]]], ["loc", [null, [83, 36], [83, 82]]]]], ["loc", [null, [83, 10], [83, 84]]]], ["inline", "map-tools/zoom-in", [], ["activate", ["subexpr", "action", ["onMapToolActivate"], ["target", ["get", "mapToolbar", ["loc", [null, [84, 74], [84, 84]]]]], ["loc", [null, [84, 39], [84, 85]]]]], ["loc", [null, [84, 10], [84, 87]]]], ["inline", "map-tools/zoom-out", [], ["activate", ["subexpr", "action", ["onMapToolActivate"], ["target", ["get", "mapToolbar", ["loc", [null, [85, 75], [85, 85]]]]], ["loc", [null, [85, 40], [85, 86]]]]], ["loc", [null, [85, 10], [85, 88]]]], ["inline", "map-commands/go-to", [], ["availableCRS", ["subexpr", "@mut", [["get", "availableCRS", ["loc", [null, [87, 25], [87, 37]]]]], [], []], "execute", ["subexpr", "action", ["onMapCommandExecute"], ["target", ["get", "mapToolbar", ["loc", [null, [88, 57], [88, 67]]]]], ["loc", [null, [88, 20], [88, 68]]]]], ["loc", [null, [86, 10], [88, 70]]]], ["inline", "map-commands/full-extent", [], ["execute", ["subexpr", "action", ["onMapCommandExecute"], ["target", ["get", "mapToolbar", ["loc", [null, [90, 57], [90, 67]]]]], ["loc", [null, [90, 20], [90, 68]]]], "lat", ["subexpr", "@mut", [["get", "model.lat", ["loc", [null, [91, 16], [91, 25]]]]], [], []], "lng", ["subexpr", "@mut", [["get", "model.lng", ["loc", [null, [92, 16], [92, 25]]]]], [], []], "zoom", ["subexpr", "@mut", [["get", "model.zoom", ["loc", [null, [93, 17], [93, 27]]]]], [], []]], ["loc", [null, [89, 10], [93, 29]]]], ["inline", "map-tools/measure", [], ["activate", ["subexpr", "action", ["onMapToolActivate"], ["target", ["get", "mapToolbar", ["loc", [null, [94, 74], [94, 84]]]]], ["loc", [null, [94, 39], [94, 85]]]]], ["loc", [null, [94, 10], [94, 87]]]], ["inline", "map-tools/draw", [], ["activate", ["subexpr", "action", ["onMapToolActivate"], ["target", ["get", "mapToolbar", ["loc", [null, [95, 71], [95, 81]]]]], ["loc", [null, [95, 36], [95, 82]]]]], ["loc", [null, [95, 10], [95, 84]]]], ["inline", "map-tools/draw-suggestion", [], ["activate", ["subexpr", "action", ["onMapToolActivate"], ["target", ["get", "mapToolbar", ["loc", [null, [96, 82], [96, 92]]]]], ["loc", [null, [96, 47], [96, 93]]]]], ["loc", [null, [96, 10], [96, 95]]]], ["inline", "map-commands/export", [], ["execute", ["subexpr", "action", ["onMapCommandExecute"], ["target", ["get", "mapToolbar", ["loc", [null, [98, 57], [98, 67]]]]], ["loc", [null, [98, 20], [98, 68]]]], "defaultMapCaption", ["subexpr", "@mut", [["get", "model.name", ["loc", [null, [99, 30], [99, 40]]]]], [], []]], ["loc", [null, [97, 10], [100, 12]]]], ["inline", "flexberry-tab-bar", [], ["change", ["subexpr", "action", ["toggleSidebar", ".ui.sidebar.right", ".mappanel"], [], ["loc", [null, [102, 19], [102, 75]]]], "items", ["subexpr", "@mut", [["get", "sidebarItems", ["loc", [null, [103, 18], [103, 30]]]]], [], []]], ["loc", [null, [101, 10], [104, 12]]]]],
        locals: ["mapToolbar"],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 144,
                "column": 8
              },
              "end": {
                "line": 152,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/map.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "flexberry-layers", [], ["leafletContainer", ["subexpr", "@mut", [["get", "groupLayers", ["loc", [null, [148, 29], [148, 40]]]]], [], []], "layers", ["subexpr", "@mut", [["get", "model.hierarchy", ["loc", [null, [149, 19], [149, 34]]]]], [], []], "forMinimap", true], ["loc", [null, [147, 10], [151, 12]]]]],
          locals: ["groupLayers"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 109,
              "column": 6
            },
            "end": {
              "line": 153,
              "column": 6
            }
          },
          "moduleName": "ember-app/templates/map.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(6);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
          morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "flexberry-layers", [], ["leafletMap", ["subexpr", "@mut", [["get", "leafletMap", ["loc", [null, [123, 21], [123, 31]]]]], [], []], "leafletContainer", ["subexpr", "@mut", [["get", "leafletMap", ["loc", [null, [124, 27], [124, 37]]]]], [], []], "layers", ["subexpr", "@mut", [["get", "model.hierarchy", ["loc", [null, [125, 17], [125, 32]]]]], [], []]], ["loc", [null, [122, 8], [126, 10]]]], ["inline", "scale-control", [], ["map", ["subexpr", "@mut", [["get", "leafletMap", ["loc", [null, [128, 14], [128, 24]]]]], [], []], "imperial", false], ["loc", [null, [127, 8], [130, 10]]]], ["inline", "switch-scale-control", [], ["map", ["subexpr", "@mut", [["get", "leafletMap", ["loc", [null, [133, 14], [133, 24]]]]], [], []], "updateWhenIdle", true], ["loc", [null, [131, 8], [135, 10]]]], ["inline", "zoomslider-control", [], ["map", ["subexpr", "@mut", [["get", "leafletMap", ["loc", [null, [138, 14], [138, 24]]]]], [], []], "stepHeight", 2], ["loc", [null, [136, 8], [140, 10]]]], ["inline", "history-control", [], ["map", ["subexpr", "@mut", [["get", "leafletMap", ["loc", [null, [142, 14], [142, 24]]]]], [], []]], ["loc", [null, [141, 8], [143, 10]]]], ["block", "minimap-control", [], ["map", ["subexpr", "@mut", [["get", "leafletMap", ["loc", [null, [145, 16], [145, 26]]]]], [], []]], 0, null, ["loc", [null, [144, 8], [152, 28]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 157,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/map.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "ui header");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui inernally celled grid");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui very wide right sidebar pushable tabbar");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "data-tab", "treeview");
        dom.setAttribute(el4, "class", "ui tab treeview");
        var el5 = dom.createTextNode("\n          ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "data-tab", "search");
        dom.setAttribute(el4, "class", "ui tab search");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "data-tab", "identify");
        dom.setAttribute(el4, "class", "ui tab identify");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "data-tab", "bookmarks");
        dom.setAttribute(el4, "class", "ui tab bookmarks");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "sixteen wide column");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "row mappanel");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var element1 = dom.childAt(element0, [1]);
        var element2 = dom.childAt(element1, [1]);
        var element3 = dom.childAt(element2, [3]);
        var element4 = dom.childAt(element2, [5]);
        var morphs = new Array(10);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[3] = dom.createMorphAt(element3, 1, 1);
        morphs[4] = dom.createMorphAt(element3, 3, 3);
        morphs[5] = dom.createMorphAt(element4, 1, 1);
        morphs[6] = dom.createMorphAt(element4, 3, 3);
        morphs[7] = dom.createMorphAt(dom.childAt(element2, [7]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element1, [3, 1]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(element1, [5]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.map.caption"], [], ["loc", [null, [1, 22], [1, 47]]]], ["attribute", "class", ["concat", ["ui ", ["get", "formState", ["loc", [null, [2, 17], [2, 26]]]], " form flexberry-vertical-form"]]], ["inline", "flexberry-maplayers", [], ["class", "styled", "cswConnections", ["subexpr", "@mut", [["get", "cswConnections", ["loc", [null, [8, 27], [8, 41]]]]], [], []], "leafletMap", ["subexpr", "@mut", [["get", "leafletMap", ["loc", [null, [9, 23], [9, 33]]]]], [], []], "layers", ["subexpr", "get-with-dynamic-actions", [["get", "this", ["loc", [null, [10, 45], [10, 49]]]], "model.hierarchy"], ["hierarchyPropertyName", "layers", "pathKeyword", "layerPath", "dynamicActions", ["subexpr", "array", [["subexpr", "hash", [], ["on", "add", "actionName", "onMapLayerAdd", "actionArguments", ["subexpr", "array", ["{% layerPath %}"], [], ["loc", [null, [17, 34], [17, 59]]]]], ["loc", [null, [14, 16], [18, 17]]]], ["subexpr", "hash", [], ["on", "edit", "actionName", "onMapLayerEdit", "actionArguments", ["subexpr", "array", ["{% layerPath %}"], [], ["loc", [null, [22, 34], [22, 59]]]]], ["loc", [null, [19, 16], [23, 17]]]], ["subexpr", "hash", [], ["on", "remove", "actionName", "onMapLayerRemove", "actionArguments", ["subexpr", "array", ["{% layerPath %}"], [], ["loc", [null, [27, 34], [27, 59]]]]], ["loc", [null, [24, 16], [28, 17]]]], ["subexpr", "hash", [], ["on", "changeVisibility", "actionName", "onMapLayerChangeVisibility", "actionArguments", ["subexpr", "array", ["{% layerPath %}.visibility"], [], ["loc", [null, [32, 34], [32, 70]]]]], ["loc", [null, [29, 16], [33, 17]]]], ["subexpr", "hash", [], ["on", "changeOpacity", "actionName", "onMapLayerChangeOpacity", "actionArguments", ["subexpr", "array", ["{% layerPath %}.settingsAsObject.opacity"], [], ["loc", [null, [37, 34], [37, 84]]]]], ["loc", [null, [34, 16], [38, 17]]]]], [], ["loc", [null, [13, 29], [39, 15]]]]], ["loc", [null, [10, 19], [40, 13]]]], "add", ["subexpr", "action", ["onMapLayerAdd", "model.hierarchy"], [], ["loc", [null, [41, 14], [41, 56]]]]], ["loc", [null, [6, 10], [42, 10]]]], ["inline", "flexberry-search-panel", [], ["querySearch", ["subexpr", "action", ["querySearch"], [], ["loc", [null, [46, 22], [46, 44]]]], "clearSearch", ["subexpr", "action", ["clearSearch"], [], ["loc", [null, [47, 22], [47, 44]]]], "searchInProcess", ["subexpr", "@mut", [["get", "searchInProcess", ["loc", [null, [48, 26], [48, 41]]]]], [], []], "searchSettings", ["subexpr", "flexberry-search-properties-osm-ru", ["http://openstreetmap.ru/api/autocomplete?q={query}"], [], ["loc", [null, [49, 25], [49, 114]]]]], ["loc", [null, [45, 8], [50, 10]]]], ["inline", "layer-result-list", [], ["results", ["subexpr", "@mut", [["get", "searchResults", ["loc", [null, [52, 18], [52, 31]]]]], [], []], "serviceLayer", ["subexpr", "@mut", [["get", "serviceLayer", ["loc", [null, [53, 23], [53, 35]]]]], [], []], "leafletMap", ["subexpr", "@mut", [["get", "leafletMap", ["loc", [null, [54, 21], [54, 31]]]]], [], []]], ["loc", [null, [51, 8], [55, 10]]]], ["inline", "flexberry-identify-panel", [], ["layerMode", ["subexpr", "@mut", [["get", "identifyLayersOption", ["loc", [null, [59, 20], [59, 40]]]]], [], []], "toolMode", ["subexpr", "@mut", [["get", "identifyToolOption", ["loc", [null, [60, 19], [60, 37]]]]], [], []], "clear", ["subexpr", "action", ["clearIdentification"], [], ["loc", [null, [61, 16], [61, 46]]]]], ["loc", [null, [58, 8], [62, 10]]]], ["inline", "layer-result-list", [], ["results", ["subexpr", "@mut", [["get", "identifyResults", ["loc", [null, [64, 18], [64, 33]]]]], [], []], "serviceLayer", ["subexpr", "@mut", [["get", "serviceLayer", ["loc", [null, [65, 23], [65, 35]]]]], [], []], "leafletMap", ["subexpr", "@mut", [["get", "leafletMap", ["loc", [null, [66, 21], [66, 31]]]]], [], []]], ["loc", [null, [63, 8], [67, 10]]]], ["inline", "spatial-bookmark", [], ["leafletMap", ["subexpr", "@mut", [["get", "leafletMap", ["loc", [null, [71, 21], [71, 31]]]]], [], []], "mapid", ["subexpr", "@mut", [["get", "model.id", ["loc", [null, [72, 16], [72, 24]]]]], [], []]], ["loc", [null, [70, 8], [73, 10]]]], ["block", "flexberry-maptoolbar", [], ["identificationFinished", ["subexpr", "action", ["onIdentificationFinished"], [], ["loc", [null, [79, 33], [79, 68]]]], "leafletMap", ["subexpr", "@mut", [["get", "leafletMap", ["loc", [null, [80, 21], [80, 31]]]]], [], []], "layers", ["subexpr", "@mut", [["get", "model.hierarchy", ["loc", [null, [81, 17], [81, 32]]]]], [], []]], 0, null, ["loc", [null, [78, 8], [105, 33]]]], ["block", "flexberry-map", [], ["lat", ["subexpr", "@mut", [["get", "model.lat", ["loc", [null, [110, 12], [110, 21]]]]], [], []], "lng", ["subexpr", "@mut", [["get", "model.lng", ["loc", [null, [111, 12], [111, 21]]]]], [], []], "zoom", ["subexpr", "@mut", [["get", "model.zoom", ["loc", [null, [112, 13], [112, 23]]]]], [], []], "zoomControl", false, "queryFilter", ["subexpr", "@mut", [["get", "queryFilter", ["loc", [null, [114, 20], [114, 31]]]]], [], []], "leafletInit", ["subexpr", "action", ["onMapLeafletInit", "leafletMap"], [], ["loc", [null, [115, 20], [115, 60]]]], "serviceLayerInit", ["subexpr", "action", ["onServiceLayerInit", "serviceLayer"], [], ["loc", [null, [116, 25], [116, 69]]]], "leafletDestroy", ["subexpr", "action", ["onMapLeafletDestroy", "leafletMap"], [], ["loc", [null, [117, 23], [117, 66]]]], "moveend", ["subexpr", "action", ["onMapMoveend", "model.lat", "model.lng"], [], ["loc", [null, [118, 16], [118, 63]]]], "zoomend", ["subexpr", "action", ["onMapZoomend", "model.zoom"], [], ["loc", [null, [119, 16], [119, 52]]]], "class", "pusher"], 1, null, ["loc", [null, [109, 6], [153, 24]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-app/templates/mobile/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 4
            },
            "end": {
              "line": 39,
              "column": 4
            }
          },
          "moduleName": "ember-app/templates/mobile/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "render", ["sitemap", ["get", "sitemap", ["loc", [null, [38, 25], [38, 32]]]]], [], ["loc", [null, [38, 6], [38, 34]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 80,
                "column": 10
              },
              "end": {
                "line": 84,
                "column": 10
              }
            },
            "moduleName": "ember-app/templates/mobile/application.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("option");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element0, 'value');
            morphs[1] = dom.createAttrMorph(element0, 'selected');
            morphs[2] = dom.createMorphAt(element0, 1, 1);
            return morphs;
          },
          statements: [["attribute", "value", ["get", "locale", ["loc", [null, [81, 28], [81, 34]]]]], ["attribute", "selected", ["subexpr", "eq", [["subexpr", "get", [["get", "i18n", ["loc", [null, [81, 56], [81, 60]]]], "locale"], [], ["loc", [null, [81, 51], [81, 70]]]], ["get", "locale", ["loc", [null, [81, 71], [81, 77]]]]], [], ["loc", [null, [81, 46], [81, 79]]]]], ["content", "locale", ["loc", [null, [82, 14], [82, 24]]]]],
          locals: ["locale"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 78,
              "column": 6
            },
            "end": {
              "line": 86,
              "column": 6
            }
          },
          "moduleName": "ember-app/templates/mobile/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("select");
          dom.setAttribute(el1, "class", "ui dropdown");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'onchange');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "onchange", ["subexpr", "action", [["subexpr", "mut", [["subexpr", "get", [["get", "i18n", ["loc", [null, [79, 64], [79, 68]]]], "locale"], [], ["loc", [null, [79, 59], [79, 78]]]]], [], ["loc", [null, [79, 54], [79, 79]]]]], ["value", "target.value"], ["loc", [null, [79, 45], [79, 102]]]]], ["block", "each", [["get", "locales", ["loc", [null, [80, 18], [80, 25]]]]], [], 0, null, ["loc", [null, [80, 10], [84, 19]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 86,
              "column": 6
            },
            "end": {
              "line": 94,
              "column": 6
            }
          },
          "moduleName": "ember-app/templates/mobile/application.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["class", "compact", "items", ["subexpr", "@mut", [["get", "locales", ["loc", [null, [89, 16], [89, 23]]]]], [], []], "value", ["subexpr", "@mut", [["get", "i18n.locale", ["loc", [null, [90, 16], [90, 27]]]]], [], []], "placeholder", ["subexpr", "t", ["forms.application.header.menu.language-dropdown.placeholder"], [], ["loc", [null, [91, 22], [91, 87]]]], "direction", "upward"], ["loc", [null, [87, 8], [93, 10]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 99,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/mobile/application.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "bgw-fix");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "background-logo");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui top attached");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui attached menu");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "ui container flex-container");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createElement("a");
        dom.setAttribute(el6, "class", "launch icon item");
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createComment("");
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "sidebar icon text-menu-1");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "text_menu ");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "text_menu hidden-menu text-menu-2");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n            ");
        dom.appendChild(el6, el7);
        var el7 = dom.createElement("i");
        dom.setAttribute(el7, "class", "sidebar icon hidden-menu text-menu-2 hidden-text");
        var el8 = dom.createElement("span");
        dom.setAttribute(el8, "class", "text_menu hidden-text");
        var el9 = dom.createComment("");
        dom.appendChild(el8, el9);
        dom.appendChild(el7, el8);
        dom.appendChild(el6, el7);
        var el7 = dom.createTextNode("\n          ");
        dom.appendChild(el6, el7);
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("a");
        dom.setAttribute(el3, "class", "item logo");
        dom.setAttribute(el3, "href", "https://github.com/flexberry");
        dom.setAttribute(el3, "target", "_blank");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("img");
        dom.setAttribute(el4, "class", "ui centered image");
        dom.setAttribute(el4, "src", "assets/images/flexberry-logo.png");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "page-header-caption");
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "href", "https://github.com/flexberry");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "page-header-userbar");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "style", "margin:0.5em; background:#FFF linear-gradient(#FFFFFF, #FFF) !important;");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "id", "fio");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        dom.setAttribute(el4, "class", "ui basic button mini custom-button");
        dom.setAttribute(el4, "style", "margin:0.5em; background:#FFF linear-gradient(#FFFFFF, #FFF) !important;");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "id", "example");
        dom.setAttribute(el1, "class", "pusher");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "full height");
        dom.setAttribute(el2, "style", "min-height: 90vh");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-content ui attached segment");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "ui main container");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("div");
        dom.setAttribute(el5, "class", "stackable grid container");
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n          ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "ui vertical footer segment");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui container flex-container");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "ui text menu");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("a");
        dom.setAttribute(el4, "class", "brand item");
        dom.setAttribute(el4, "href", "#");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "right item");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "style", "margin-right: 5px;");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "item lang");
        dom.setAttribute(el4, "style", "margin:0.65em;");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "style", "margin-right: 5px;");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "item lang");
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("label");
        dom.setAttribute(el5, "style", "margin-right: 5px;");
        var el6 = dom.createTextNode("\n        ");
        dom.appendChild(el5, el6);
        var el6 = dom.createComment("");
        dom.appendChild(el5, el6);
        var el6 = dom.createTextNode("\n      ");
        dom.appendChild(el5, el6);
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("    ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0, 1]);
        var element3 = dom.childAt(element2, [1, 1, 1, 1]);
        var element4 = dom.childAt(element3, [3]);
        var element5 = dom.childAt(element2, [3]);
        var element6 = dom.childAt(element2, [7]);
        var element7 = dom.childAt(element6, [1]);
        var element8 = dom.childAt(element6, [5]);
        var element9 = dom.childAt(fragment, [2, 1, 1]);
        var element10 = dom.childAt(element9, [3, 1]);
        var element11 = dom.childAt(fragment, [4, 1, 1]);
        var element12 = dom.childAt(element11, [3]);
        var element13 = dom.childAt(element11, [5]);
        var element14 = dom.childAt(element11, [7]);
        var morphs = new Array(24);
        morphs[0] = dom.createAttrMorph(element3, 'title');
        morphs[1] = dom.createElementMorph(element3);
        morphs[2] = dom.createMorphAt(element3, 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(element4, [0]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element4, [1]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element3, [5, 0]), 0, 0);
        morphs[6] = dom.createAttrMorph(element5, 'title');
        morphs[7] = dom.createMorphAt(dom.childAt(element2, [5, 0]), 0, 0);
        morphs[8] = dom.createAttrMorph(element7, 'class');
        morphs[9] = dom.createElementMorph(element7);
        morphs[10] = dom.createMorphAt(element7, 1, 1);
        morphs[11] = dom.createMorphAt(dom.childAt(element6, [3]), 0, 0);
        morphs[12] = dom.createElementMorph(element8);
        morphs[13] = dom.createMorphAt(element8, 1, 1);
        morphs[14] = dom.createMorphAt(element9, 1, 1);
        morphs[15] = dom.createMorphAt(element10, 1, 1);
        morphs[16] = dom.createMorphAt(element10, 3, 3);
        morphs[17] = dom.createMorphAt(dom.childAt(element11, [1]), 1, 1);
        morphs[18] = dom.createMorphAt(dom.childAt(element12, [1]), 1, 1);
        morphs[19] = dom.createMorphAt(element12, 3, 3);
        morphs[20] = dom.createMorphAt(dom.childAt(element13, [1]), 1, 1);
        morphs[21] = dom.createMorphAt(element13, 3, 3);
        morphs[22] = dom.createMorphAt(dom.childAt(element14, [1]), 1, 1);
        morphs[23] = dom.createMorphAt(element14, 3, 3);
        return morphs;
      },
      statements: [["attribute", "title", ["subexpr", "t", ["forms.application.header.menu.sitemap-button.title"], [], ["loc", [null, [8, 18], [8, 76]]]]], ["element", "action", ["toggleSidebar"], [], ["loc", [null, [6, 13], [6, 39]]]], ["inline", "t", ["forms.application.header.menu.sitemap-button.caption"], [], ["loc", [null, [9, 12], [9, 72]]]], ["inline", "t", ["forms.application.header.menu.show-menu.caption"], [], ["loc", [null, [10, 73], [10, 128]]]], ["inline", "t", ["forms.application.header.menu.hide-menu.caption"], [], ["loc", [null, [10, 183], [10, 238]]]], ["inline", "t", ["forms.application.header.menu.hide-menu.caption"], [], ["loc", [null, [11, 108], [11, 163]]]], ["attribute", "title", ["subexpr", "t", ["forms.application.sitemap.application-name.title"], [], ["loc", [null, [19, 12], [19, 68]]]]], ["inline", "t", ["application-name"], [], ["loc", [null, [22, 76], [22, 100]]]], ["attribute", "class", ["concat", ["ui basic button mini custom-button ", ["subexpr", "unless", [["subexpr", "and", [["get", "login", ["loc", [null, [24, 70], [24, 75]]]], ["subexpr", "and", [["get", "onlineStatus", ["loc", [null, [24, 81], [24, 93]]]], ["subexpr", "not", [["get", "synchronizes", ["loc", [null, [24, 99], [24, 111]]]]], [], ["loc", [null, [24, 94], [24, 112]]]]], [], ["loc", [null, [24, 76], [24, 113]]]]], [], ["loc", [null, [24, 65], [24, 114]]]], "disabled"], [], ["loc", [null, [24, 56], [24, 127]]]], " ", ["subexpr", "if", [["get", "synchronizes", ["loc", [null, [24, 133], [24, 145]]]], "loading"], [], ["loc", [null, [24, 128], [24, 157]]]]]]], ["element", "action", ["syncUp"], [], ["loc", [null, [24, 159], [24, 178]]]], ["inline", "t", ["forms.application.sync-up"], [], ["loc", [null, [25, 8], [25, 41]]]], ["content", "login", ["loc", [null, [27, 21], [27, 30]]]], ["element", "action", [["subexpr", "if", [["get", "login", ["loc", [null, [28, 70], [28, 75]]]], "logout", "goToLoginForm"], [], ["loc", [null, [28, 66], [28, 101]]]]], [], ["loc", [null, [28, 57], [28, 103]]]], ["inline", "t", [["subexpr", "if", [["get", "login", ["loc", [null, [29, 16], [29, 21]]]], "forms.login.logout", "forms.login.caption"], [], ["loc", [null, [29, 12], [29, 65]]]]], [], ["loc", [null, [29, 8], [29, 67]]]], ["block", "ui-sidebar", [], ["class", "inverted vertical main menu", "dimPage", false], 0, null, ["loc", [null, [37, 4], [39, 19]]]], ["content", "outlet", ["loc", [null, [42, 10], [42, 20]]]], ["inline", "outlet", ["modal"], [], ["loc", [null, [43, 10], [43, 28]]]], ["inline", "t", ["forms.application.footer.application-name"], [], ["loc", [null, [53, 6], [53, 55]]]], ["inline", "t", ["forms.application.header.menu.user-settings-service-checkbox.caption"], [], ["loc", [null, [57, 8], [57, 84]]]], ["inline", "flexberry-checkbox", [], ["class", "toggle", "value", ["subexpr", "@mut", [["get", "userSettingsService.isUserSettingsServiceEnabled", ["loc", [null, [61, 14], [61, 62]]]]], [], []]], ["loc", [null, [59, 6], [62, 8]]]], ["inline", "if", [["get", "onlineStatus", ["loc", [null, [66, 13], [66, 25]]]], "Online", "Offline"], [], ["loc", [null, [66, 8], [66, 46]]]], ["inline", "ui-checkbox", [], ["checked", ["subexpr", "@mut", [["get", "onlineStatus", ["loc", [null, [69, 16], [69, 28]]]]], [], []], "class", "toggle"], ["loc", [null, [68, 6], [71, 8]]]], ["inline", "t", ["forms.application.header.menu.language-dropdown.caption"], [], ["loc", [null, [75, 8], [75, 71]]]], ["block", "if", [["get", "browserIsInternetExplorer", ["loc", [null, [78, 12], [78, 37]]]]], [], 1, 2, ["loc", [null, [78, 6], [94, 13]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define("ember-app/templates/mobile/components/flexberry-file", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 10
                },
                "end": {
                  "line": 28,
                  "column": 10
                }
              },
              "moduleName": "ember-app/templates/mobile/components/flexberry-file.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("img");
              dom.setAttribute(el1, "class", "flexberry-file-image-preview");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createAttrMorph(element0, 'src');
              morphs[1] = dom.createAttrMorph(element0, 'alt');
              return morphs;
            },
            statements: [["attribute", "src", ["get", "_previewImageAsBase64String", ["loc", [null, [26, 20], [26, 47]]]]], ["attribute", "alt", ["subexpr", "t", ["components.flexberry-file.preview-image-alternative-text"], [], ["loc", [null, [27, 18], [27, 82]]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 6
              },
              "end": {
                "line": 31,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/mobile/components/flexberry-file.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "flexberry-file-image-preview-wrapper ui small image");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var element2 = dom.childAt(element1, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(element1, 1, 1);
            morphs[2] = dom.createAttrMorph(element2, 'class');
            return morphs;
          },
          statements: [["element", "action", ["viewLoadedImage"], [], ["loc", [null, [22, 73], [22, 101]]]], ["block", "unless", [["get", "_previewDownloadIsInProgress", ["loc", [null, [23, 20], [23, 48]]]]], [], 0, null, ["loc", [null, [23, 10], [28, 21]]]], ["attribute", "class", ["concat", ["ui ", ["subexpr", "if", [["get", "_previewDownloadIsInProgress", ["loc", [null, [29, 30], [29, 58]]]], "active", ""], [], ["loc", [null, [29, 25], [29, 72]]]], " loader"]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 4
            }
          },
          "moduleName": "ember-app/templates/mobile/components/flexberry-file.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "flexberry-file-menu");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "flexberry-menu", [], ["class", "left pointing", "items", ["subexpr", "@mut", [["get", "_menuItems", ["loc", [null, [15, 16], [15, 26]]]]], [], []], "callItemsOnClickCallbacks", false, "onItemClick", ["subexpr", "action", ["onMenuItemClick"], [], ["loc", [null, [17, 22], [17, 48]]]], "collapseMenuOnItemClick", true], ["loc", [null, [13, 8], [19, 10]]]], ["block", "if", [["get", "showPreview", ["loc", [null, [21, 12], [21, 23]]]]], [], 0, null, ["loc", [null, [21, 6], [31, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 56,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/mobile/components/flexberry-file.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-grid ui grid");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("input");
        dom.setAttribute(el2, "type", "file");
        dom.setAttribute(el2, "name", "files[]");
        dom.setAttribute(el2, "class", "flexberry-file-file-input");
        dom.setAttribute(el2, "style", "display:none");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "row");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("label");
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-download-iframes-container");
        dom.setAttribute(el1, "style", "display: none;");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "flexberry-file-error-modal-dialog ui small basic modal");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "ui icon header");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "flexberry-file-error-modal-dialog-content center aligned ui grid");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "center aligned ui grid");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "actions");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "flexberry-file-error-modal-dialog-ok-button ui approve green inverted button");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("i");
        dom.setAttribute(el5, "class", "checkmark icon");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element3 = dom.childAt(fragment, [0]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element3, [3]);
        var element6 = dom.childAt(element5, [1]);
        var element7 = dom.childAt(fragment, [4]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element4, 'id');
        morphs[1] = dom.createAttrMorph(element6, 'class');
        morphs[2] = dom.createAttrMorph(element6, 'title');
        morphs[3] = dom.createAttrMorph(element6, 'for');
        morphs[4] = dom.createElementMorph(element6);
        morphs[5] = dom.createMorphAt(element6, 1, 1);
        morphs[6] = dom.createMorphAt(element5, 3, 3);
        morphs[7] = dom.createMorphAt(dom.childAt(element7, [1]), 1, 1);
        morphs[8] = dom.createMorphAt(dom.childAt(element7, [3, 1]), 1, 1);
        morphs[9] = dom.createMorphAt(dom.childAt(element7, [5, 1, 1]), 3, 3);
        return morphs;
      },
      statements: [["attribute", "id", ["get", "_fileInputId", ["loc", [null, [2, 41], [2, 53]]]]], ["attribute", "class", ["concat", ["flexberry-file-add-button ui icon ", ["get", "buttonClass", ["loc", [null, [5, 49], [5, 60]]]], " ", ["subexpr", "unless", [["get", "_addButtonIsEnabled", ["loc", [null, [5, 72], [5, 91]]]], "disabled"], [], ["loc", [null, [5, 63], [5, 104]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "_hasFile", ["loc", [null, [5, 114], [5, 122]]]], ["get", "readonly", ["loc", [null, [5, 123], [5, 131]]]]], [], ["loc", [null, [5, 110], [5, 132]]]], "hidden"], [], ["loc", [null, [5, 105], [5, 143]]]], " button"]]], ["attribute", "title", ["subexpr", "t", ["components.flexberry-file.add-button-title"], [], ["loc", [null, [6, 12], [6, 62]]]]], ["attribute", "for", ["get", "_fileInputId", ["loc", [null, [7, 12], [7, 24]]]]], ["element", "action", ["addButtonClick"], ["on", "click", "preventDefault", false], ["loc", [null, [8, 6], [8, 65]]]], ["inline", "t", ["components.flexberry-file.add-button-caption"], [], ["loc", [null, [9, 4], [9, 56]]]], ["block", "if", [["get", "_hasFile", ["loc", [null, [11, 10], [11, 18]]]]], [], 0, null, ["loc", [null, [11, 4], [32, 11]]]], ["content", "_errorModalDialogCaption", ["loc", [null, [40, 4], [40, 32]]]], ["content", "_errorModalDialogContent", ["loc", [null, [44, 6], [44, 34]]]], ["inline", "t", ["components.flexberry-file.error-dialog-ok-button-caption"], [], ["loc", [null, [51, 8], [51, 72]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/mobile/components/flexberry-lookup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/mobile/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "flexberry-dropdown", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 16], [3, 27]]]]], [], []], "class", "search", "value", ["subexpr", "@mut", [["get", "displayValue", ["loc", [null, [5, 10], [5, 22]]]]], [], []], "readonly", ["subexpr", "if", [["get", "readonly", ["loc", [null, [6, 17], [6, 25]]]], "readonly"], [], ["loc", [null, [6, 13], [6, 37]]]], "needChecksOnValue", false, "isSearch", true, "isSearchReadOnly", ["subexpr", "@mut", [["get", "dropdownIsSearch", ["loc", [null, [9, 21], [9, 37]]]]], [], []]], ["loc", [null, [2, 2], [10, 4]]]]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 10
                },
                "end": {
                  "line": 20,
                  "column": 10
                }
              },
              "moduleName": "ember-app/templates/mobile/components/flexberry-lookup.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "yield", ["loc", [null, [19, 12], [19, 21]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 10
                },
                "end": {
                  "line": 22,
                  "column": 10
                }
              },
              "moduleName": "ember-app/templates/mobile/components/flexberry-lookup.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "displayValue", ["loc", [null, [21, 12], [21, 28]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 8
              },
              "end": {
                "line": 23,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/mobile/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [18, 16], [18, 24]]]]], [], 0, 1, ["loc", [null, [18, 10], [22, 17]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 23,
                "column": 8
              },
              "end": {
                "line": 25,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/mobile/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "placeholder", ["loc", [null, [24, 10], [24, 25]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 27,
                "column": 6
              },
              "end": {
                "line": 29,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/mobile/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("i");
            dom.setAttribute(el1, "class", "chevron right icon");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 4
              },
              "end": {
                "line": 35,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/mobile/components/flexberry-lookup.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "remove icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'class');
            morphs[1] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui icon ", ["get", "removeButtonClass", ["loc", [null, [32, 31], [32, 48]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [32, 60], [32, 68]]]], ["get", "isBlocked", ["loc", [null, [32, 69], [32, 78]]]]], [], ["loc", [null, [32, 56], [32, 79]]]], " disabled"], [], ["loc", [null, [32, 51], [32, 93]]]], " button"]]], ["element", "action", ["remove", ["get", "removeData", ["loc", [null, [32, 120], [32, 130]]]]], [], ["loc", [null, [32, 102], [32, 132]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/mobile/components/flexberry-lookup.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "ui action input");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          dom.setAttribute(el3, "class", "lookup-field");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var element2 = dom.childAt(element1, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element2, 'class');
          morphs[1] = dom.createElementMorph(element2);
          morphs[2] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
          morphs[3] = dom.createMorphAt(element2, 3, 3);
          morphs[4] = dom.createMorphAt(element1, 3, 3);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui transparent ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [15, 37], [15, 45]]]], ["get", "isBlocked", ["loc", [null, [15, 46], [15, 55]]]]], [], ["loc", [null, [15, 33], [15, 56]]]], " disabled"], [], ["loc", [null, [15, 28], [15, 70]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "modalIsBeforeToShow", ["loc", [null, [15, 80], [15, 99]]]], ["get", "modalIsStartToShow", ["loc", [null, [15, 100], [15, 118]]]]], [], ["loc", [null, [15, 76], [15, 119]]]], " loading"], [], ["loc", [null, [15, 71], [15, 132]]]], " icon input "]]], ["element", "action", ["choose", ["get", "chooseData", ["loc", [null, [14, 24], [14, 34]]]]], [], ["loc", [null, [14, 6], [14, 36]]]], ["block", "if", [["get", "value", ["loc", [null, [17, 14], [17, 19]]]]], [], 0, 1, ["loc", [null, [17, 8], [25, 15]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [27, 16], [27, 24]]]]], [], 2, null, ["loc", [null, [27, 6], [29, 17]]]], ["block", "unless", [["get", "readonly", ["loc", [null, [31, 14], [31, 22]]]]], [], 3, null, ["loc", [null, [31, 4], [35, 15]]]]],
        locals: [],
        templates: [child0, child1, child2, child3]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/mobile/components/flexberry-lookup.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "dropdown", ["loc", [null, [1, 6], [1, 14]]]]], [], 0, 1, ["loc", [null, [1, 0], [37, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-app/templates/mobile/components/object-list-view-row", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 8
              },
              "end": {
                "line": 10,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element6 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element6, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["asterisk small red icon ", ["subexpr", "unless", [["get", "record.data.hasDirtyAttributes", ["loc", [null, [8, 55], [8, 85]]]], "transparent"], [], ["loc", [null, [8, 46], [8, 101]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 8
              },
              "end": {
                "line": 18,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["inline", "flexberry-checkbox", [], ["readonly", ["subexpr", "or", [["get", "readonly", ["loc", [null, [14, 27], [14, 35]]]], ["subexpr", "not", [["get", "record.rowConfig.canBeSelected", ["loc", [null, [14, 41], [14, 71]]]]], [], ["loc", [null, [14, 36], [14, 72]]]]], [], ["loc", [null, [14, 23], [14, 73]]]], "onChange", ["subexpr", "action", [["get", "selectRow", ["loc", [null, [15, 31], [15, 40]]]], ["get", "record", ["loc", [null, [15, 41], [15, 47]]]]], [], ["loc", [null, [15, 23], [15, 48]]]]], ["loc", [null, [13, 12], [16, 14]]]]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 19,
                "column": 8
              },
              "end": {
                "line": 25,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cell");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            var el3 = dom.createTextNode("\n              ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("i");
            dom.setAttribute(el3, "class", "minus icon");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element5, 'class');
            morphs[1] = dom.createElementMorph(element5);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["ui ", ["get", "buttonClass", ["loc", [null, [21, 32], [21, 43]]]], " ", ["subexpr", "if", [["subexpr", "or", [["get", "readonly", ["loc", [null, [21, 55], [21, 63]]]], ["subexpr", "not", [["get", "record.rowConfig.canBeDeleted", ["loc", [null, [21, 69], [21, 98]]]]], [], ["loc", [null, [21, 64], [21, 99]]]]], [], ["loc", [null, [21, 51], [21, 100]]]], "disabled"], [], ["loc", [null, [21, 46], [21, 113]]]], " button"]]], ["element", "action", [["get", "deleteRow", ["loc", [null, [21, 131], [21, 140]]]], ["get", "record", ["loc", [null, [21, 141], [21, 147]]]]], [], ["loc", [null, [21, 122], [21, 149]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 4
            },
            "end": {
              "line": 27,
              "column": 4
            }
          },
          "moduleName": "ember-app/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "object-list-view-helper-column-cell");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element7 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element7, 1, 1);
          morphs[1] = dom.createMorphAt(element7, 2, 2);
          morphs[2] = dom.createMorphAt(element7, 3, 3);
          return morphs;
        },
        statements: [["block", "if", [["get", "showAsteriskInRow", ["loc", [null, [6, 14], [6, 31]]]]], [], 0, null, ["loc", [null, [6, 8], [10, 15]]]], ["block", "if", [["get", "showCheckBoxInRow", ["loc", [null, [11, 14], [11, 31]]]]], [], 1, null, ["loc", [null, [11, 8], [18, 15]]]], ["block", "if", [["get", "showDeleteButtonInRow", ["loc", [null, [19, 14], [19, 35]]]]], [], 2, null, ["loc", [null, [19, 8], [25, 15]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 38,
              "column": 6
            },
            "end": {
              "line": 42,
              "column": 6
            }
          },
          "moduleName": "ember-app/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n          ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("i");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var element4 = dom.childAt(element3, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element3, 'class');
          morphs[1] = dom.createElementMorph(element3);
          morphs[2] = dom.createAttrMorph(element4, 'class');
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["ui button icon mini ", ["get", "buttonClass", ["loc", [null, [39, 45], [39, 56]]]]]]], ["element", "action", ["expand"], ["bubbles", false], ["loc", [null, [39, 60], [39, 93]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "_expanded", ["loc", [null, [40, 25], [40, 34]]]], "minus", "plus"], [], ["loc", [null, [40, 20], [40, 51]]]], " icon"]]]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 49,
                "column": 10
              },
              "end": {
                "line": 54,
                "column": 10
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "item");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "edit icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element1 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element1);
            morphs[1] = dom.createMorphAt(dom.childAt(element1, [3]), 0, 0);
            return morphs;
          },
          statements: [["element", "action", [["get", "rowClick", ["loc", [null, [50, 40], [50, 48]]]], ["get", "record", ["loc", [null, [50, 49], [50, 55]]]]], [], ["loc", [null, [50, 30], [50, 58]]]], ["inline", "t", ["components.object-list-view.menu-in-row.edit-menu-item-title"], [], ["loc", [null, [52, 20], [52, 88]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 55,
                "column": 10
              },
              "end": {
                "line": 60,
                "column": 10
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "item");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "trash icon");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
            return morphs;
          },
          statements: [["element", "action", [["get", "deleteRow", ["loc", [null, [56, 40], [56, 49]]]], ["get", "record", ["loc", [null, [56, 50], [56, 56]]]]], [], ["loc", [null, [56, 30], [56, 59]]]], ["inline", "t", ["components.object-list-view.menu-in-row.delete-menu-item-title"], [], ["loc", [null, [58, 20], [58, 90]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 44,
              "column": 2
            },
            "end": {
              "line": 64,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("td");
          dom.setAttribute(el1, "class", "object-list-view-menu");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "basic right pointing ui icon dropdown button");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("i");
          dom.setAttribute(el3, "class", "list layout icon");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "left menu");
          var el4 = dom.createTextNode("\n");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createComment("");
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1, 1, 3]);
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(element2, 1, 1);
          morphs[1] = dom.createMorphAt(element2, 2, 2);
          return morphs;
        },
        statements: [["block", "if", [["get", "showEditMenuItemInRow", ["loc", [null, [49, 16], [49, 37]]]]], [], 0, null, ["loc", [null, [49, 10], [54, 17]]]], ["block", "if", [["get", "showDeleteMenuItemInRow", ["loc", [null, [55, 16], [55, 39]]]]], [], 1, null, ["loc", [null, [55, 10], [60, 17]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 67,
                "column": 2
              },
              "end": {
                "line": 89,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view-row.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [69, 13], [69, 19]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [70, 14], [70, 21]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [71, 15], [71, 23]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [72, 15], [72, 23]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [73, 21], [73, 35]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [74, 23], [74, 39]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [75, 23], [75, 39]]]]], [], []], "showValidationMessages", ["subexpr", "@mut", [["get", "showValidationMessages", ["loc", [null, [76, 29], [76, 51]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [77, 24], [77, 41]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [78, 24], [78, 41]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [79, 28], [79, 49]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [80, 25], [80, 43]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [81, 32], [81, 57]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [82, 18], [82, 29]]]]], [], []], "rowClick", ["subexpr", "@mut", [["get", "rowClick", ["loc", [null, [83, 15], [83, 23]]]]], [], []], "selectRow", ["subexpr", "@mut", [["get", "selectRow", ["loc", [null, [84, 16], [84, 25]]]]], [], []], "deleteRow", ["subexpr", "@mut", [["get", "deleteRow", ["loc", [null, [85, 16], [85, 25]]]]], [], []], "_currentLevel", ["subexpr", "@mut", [["get", "_currentLevel", ["loc", [null, [86, 20], [86, 33]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "_hierarchicalIndent", ["loc", [null, [87, 25], [87, 44]]]]], [], []]], ["loc", [null, [68, 4], [88, 6]]]]],
          locals: ["record"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 66,
              "column": 0
            },
            "end": {
              "line": 90,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/mobile/components/object-list-view-row.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "records", ["loc", [null, [67, 10], [67, 17]]]]], ["key", "key"], 0, null, ["loc", [null, [67, 2], [89, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 91,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/mobile/components/object-list-view-row.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("tr");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "hidden");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n    ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("td");
        var el3 = dom.createTextNode("\n      ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("    ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element8 = dom.childAt(fragment, [0]);
        var element9 = dom.childAt(element8, [1]);
        var element10 = dom.childAt(element8, [3]);
        var morphs = new Array(10);
        morphs[0] = dom.createAttrMorph(element8, 'class');
        morphs[1] = dom.createAttrMorph(element9, 'class');
        morphs[2] = dom.createMorphAt(dom.childAt(element9, [1]), 0, 0);
        morphs[3] = dom.createMorphAt(element9, 3, 3);
        morphs[4] = dom.createAttrMorph(element10, 'style');
        morphs[5] = dom.createElementMorph(element10);
        morphs[6] = dom.createMorphAt(element10, 1, 1);
        morphs[7] = dom.createMorphAt(element10, 3, 3);
        morphs[8] = dom.createMorphAt(element8, 5, 5);
        morphs[9] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["get", "record.rowConfig.customClass", ["loc", [null, [1, 13], [1, 41]]]]]]], ["attribute", "class", ["concat", ["object-list-view-helper-column ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [2, 53], [2, 69]]]], "hidden"], [], ["loc", [null, [2, 44], [2, 80]]]]]]], ["content", "record.key", ["loc", [null, [3, 24], [3, 38]]]], ["block", "if", [["get", "showHelperColumn", ["loc", [null, [4, 10], [4, 26]]]]], [], 0, null, ["loc", [null, [4, 4], [27, 11]]]], ["attribute", "style", ["concat", ["padding-left:", ["get", "hierarchicalIndent", ["loc", [null, [29, 78], [29, 96]]]], "px;"]]], ["element", "action", [["get", "rowClick", ["loc", [null, [29, 17], [29, 25]]]], ["get", "record", ["loc", [null, [29, 26], [29, 32]]]]], ["preventDefault", false], ["loc", [null, [29, 8], [29, 55]]]], ["inline", "component", [["get", "singleColumnCellComponent.componentName", ["loc", [null, [30, 18], [30, 57]]]]], ["model", ["subexpr", "@mut", [["get", "record.data", ["loc", [null, [31, 14], [31, 25]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [32, 16], [32, 23]]]]], [], []], "showValidationMessages", ["subexpr", "@mut", [["get", "showValidationMessages", ["loc", [null, [33, 31], [33, 53]]]]], [], []], "hasEditableValues", ["subexpr", "@mut", [["get", "hasEditableValues", ["loc", [null, [34, 26], [34, 43]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "singleColumnCellComponent.componentProperties", ["loc", [null, [35, 26], [35, 71]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [36, 17], [36, 25]]]]], [], []]], ["loc", [null, [30, 6], [37, 8]]]], ["block", "if", [["get", "hasRecords", ["loc", [null, [38, 12], [38, 22]]]]], [], 1, null, ["loc", [null, [38, 6], [42, 13]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [44, 8], [44, 22]]]]], [], 2, null, ["loc", [null, [44, 2], [64, 9]]]], ["block", "if", [["subexpr", "and", [["get", "_expanded", ["loc", [null, [66, 11], [66, 20]]]], ["get", "inHierarchicalMode", ["loc", [null, [66, 21], [66, 39]]]]], [], ["loc", [null, [66, 6], [66, 40]]]]], [], 3, null, ["loc", [null, [66, 0], [90, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3]
    };
  })());
});
define("ember-app/templates/mobile/components/object-list-view", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 10,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "ui-message", [], ["type", "error", "closeable", true, "visible", true, "title", "Error occurred", "message", ["subexpr", "@mut", [["get", "currentError", ["loc", [null, [8, 14], [8, 26]]]]], [], []]], ["loc", [null, [3, 4], [9, 6]]]]],
          locals: ["currentError"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "errorMessages", ["loc", [null, [2, 10], [2, 23]]]]], [], 0, null, ["loc", [null, [2, 2], [10, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 16
                },
                "end": {
                  "line": 23,
                  "column": 16
                }
              },
              "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "t", [["get", "column.keyLocale", ["loc", [null, [22, 22], [22, 38]]]]], [], ["loc", [null, [22, 18], [22, 40]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 16
                },
                "end": {
                  "line": 25,
                  "column": 16
                }
              },
              "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "column.header", ["loc", [null, [24, 18], [24, 35]]]]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 29,
                    "column": 20
                  },
                  "end": {
                    "line": 33,
                    "column": 20
                  }
                },
                "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                      ▲");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                      ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element7 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element7, 'title');
                morphs[1] = dom.createMorphAt(element7, 1, 1);
                return morphs;
              },
              statements: [["attribute", "title", ["concat", [["subexpr", "t", ["components.object-list-view.sort-ascending"], [], ["loc", [null, [30, 34], [30, 84]]]]]]], ["content", "column.sortNumber", ["loc", [null, [31, 23], [31, 44]]]]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "fragmentReason": false,
                "revision": "Ember@2.4.6",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 33,
                    "column": 20
                  },
                  "end": {
                    "line": 37,
                    "column": 20
                  }
                },
                "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n                      ▼");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n                      ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element6 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createAttrMorph(element6, 'title');
                morphs[1] = dom.createMorphAt(element6, 1, 1);
                return morphs;
              },
              statements: [["attribute", "title", ["concat", [["subexpr", "t", ["components.object-list-view.sort-descending"], [], ["loc", [null, [34, 34], [34, 85]]]]]]], ["content", "column.sortNumber", ["loc", [null, [35, 23], [35, 44]]]]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 27,
                  "column": 16
                },
                "end": {
                  "line": 39,
                  "column": 16
                }
              },
              "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                  ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "style", "float:right;");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("                  ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["block", "if", [["get", "column.sortAscending", ["loc", [null, [29, 26], [29, 46]]]]], [], 0, 1, ["loc", [null, [29, 20], [37, 27]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 17,
                "column": 10
              },
              "end": {
                "line": 42,
                "column": 10
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("th");
            dom.setAttribute(el1, "class", "dt-head-left me class");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            var el3 = dom.createTextNode("\n                ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("span");
            var el4 = dom.createTextNode("\n");
            dom.appendChild(el3, el4);
            var el4 = dom.createComment("");
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("                ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("              ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element8 = dom.childAt(fragment, [1]);
            var element9 = dom.childAt(element8, [1]);
            var morphs = new Array(5);
            morphs[0] = dom.createAttrMorph(element8, 'onclick');
            morphs[1] = dom.createAttrMorph(element9, 'data-olv-header-property-name');
            morphs[2] = dom.createAttrMorph(element9, 'title');
            morphs[3] = dom.createMorphAt(dom.childAt(element9, [1]), 1, 1);
            morphs[4] = dom.createMorphAt(element9, 3, 3);
            return morphs;
          },
          statements: [["attribute", "onclick", ["subexpr", "action", ["headerCellClick", ["get", "column", ["loc", [null, [18, 82], [18, 88]]]]], [], ["loc", [null, [18, 54], [18, 91]]]]], ["attribute", "data-olv-header-property-name", ["get", "column.propName", ["loc", [null, [19, 51], [19, 66]]]]], ["attribute", "title", ["get", "sortTitleCompute", ["loc", [null, [19, 77], [19, 93]]]]], ["block", "if", [["get", "column.keyLocale", ["loc", [null, [21, 22], [21, 38]]]]], [], 0, 1, ["loc", [null, [21, 16], [25, 23]]]], ["block", "if", [["get", "column.sorted", ["loc", [null, [27, 22], [27, 35]]]]], [], 2, null, ["loc", [null, [27, 16], [39, 23]]]]],
          locals: ["column"],
          templates: [child0, child1, child2]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 43,
                "column": 8
              },
              "end": {
                "line": 45,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("th");
            dom.setAttribute(el1, "class", "object-list-view-menu collapsing");
            dom.setAttribute(el1, "data-olv-header-property-name", "OlvRowMenu");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 2
            },
            "end": {
              "line": 48,
              "column": 2
            }
          },
          "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("thead");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tr");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          dom.setAttribute(el3, "data-olv-header-property-name", "OlvRowToolbar");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element10 = dom.childAt(fragment, [1, 1]);
          var element11 = dom.childAt(element10, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element11, 'class');
          morphs[1] = dom.createMorphAt(element10, 3, 3);
          morphs[2] = dom.createMorphAt(element10, 4, 4);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["object-list-view-operations collapsing ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [16, 67], [16, 83]]]], "hidden"], [], ["loc", [null, [16, 58], [16, 94]]]]]]], ["block", "each", [["get", "columns", ["loc", [null, [17, 18], [17, 25]]]]], [], 0, null, ["loc", [null, [17, 10], [42, 19]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [43, 14], [43, 28]]]]], [], 1, null, ["loc", [null, [43, 8], [45, 15]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 52,
                "column": 8
              },
              "end": {
                "line": 56,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("div");
            dom.setAttribute(el2, "class", "object-list-view-helper-column-cell");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createAttrMorph(element4, 'class');
            return morphs;
          },
          statements: [["attribute", "class", ["concat", ["object-list-view-helper-column ", ["subexpr", "unless", [["get", "showHelperColumn", ["loc", [null, [53, 61], [53, 77]]]], "hidden"], [], ["loc", [null, [53, 52], [53, 88]]]]]]]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 61,
                  "column": 14
                },
                "end": {
                  "line": 69,
                  "column": 14
                }
              },
              "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "component", ["flexberry-dropdown"], ["value", ["subexpr", "@mut", [["get", "column.filter.condition", ["loc", [null, [63, 24], [63, 47]]]]], [], []], "items", ["subexpr", "@mut", [["get", "column.filter.conditions", ["loc", [null, [64, 24], [64, 48]]]]], [], []], "class", "compact fluid", "placeholder", "", "needChecksOnValue", false], ["loc", [null, [62, 16], [68, 18]]]]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "fragmentReason": false,
              "revision": "Ember@2.4.6",
              "loc": {
                "source": null,
                "start": {
                  "line": 70,
                  "column": 14
                },
                "end": {
                  "line": 75,
                  "column": 14
                }
              },
              "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("                ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "component", [["get", "column.filter.component.name", ["loc", [null, [71, 28], [71, 56]]]]], ["value", ["subexpr", "@mut", [["get", "column.filter.pattern", ["loc", [null, [72, 24], [72, 45]]]]], [], []], "dynamicProperties", ["subexpr", "@mut", [["get", "column.filter.component.properties", ["loc", [null, [73, 36], [73, 70]]]]], [], []]], ["loc", [null, [71, 16], [74, 18]]]]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 58,
                "column": 10
              },
              "end": {
                "line": 77,
                "column": 10
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "inline fields");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("label");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(":");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(element3, 3, 3);
            morphs[2] = dom.createMorphAt(element3, 4, 4);
            return morphs;
          },
          statements: [["content", "column.header", ["loc", [null, [60, 21], [60, 38]]]], ["block", "if", [["get", "column.filter.conditions", ["loc", [null, [61, 20], [61, 44]]]]], [], 0, null, ["loc", [null, [61, 14], [69, 21]]]], ["block", "if", [["get", "column.filter.component.name", ["loc", [null, [70, 20], [70, 48]]]]], [], 1, null, ["loc", [null, [70, 14], [75, 21]]]]],
          locals: ["column"],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 79,
                "column": 8
              },
              "end": {
                "line": 81,
                "column": 8
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("td");
            dom.setAttribute(el1, "class", "object-list-view-menu");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 50,
              "column": 4
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element5 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element5, 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element5, [3]), 1, 1);
          morphs[2] = dom.createMorphAt(element5, 5, 5);
          return morphs;
        },
        statements: [["block", "if", [["get", "showHelperColumn", ["loc", [null, [52, 14], [52, 30]]]]], [], 0, null, ["loc", [null, [52, 8], [56, 15]]]], ["block", "each", [["get", "columns", ["loc", [null, [58, 18], [58, 25]]]]], [], 1, null, ["loc", [null, [58, 10], [77, 19]]]], ["block", "if", [["get", "showMenuColumn", ["loc", [null, [79, 14], [79, 28]]]]], [], 2, null, ["loc", [null, [79, 8], [81, 15]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 84,
              "column": 4
            },
            "end": {
              "line": 90,
              "column": 4
            }
          },
          "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "style", "text-align:center;");
          var el3 = dom.createTextNode("\n          ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "ui active centered inline loader");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element2, 'colspan');
          morphs[1] = dom.createMorphAt(element2, 3, 3);
          return morphs;
        },
        statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [86, 23], [86, 30]]]]]]], ["inline", "t", ["components.object-list-view.loading-text"], [], ["loc", [null, [87, 63], [87, 111]]]]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 91,
              "column": 4
            },
            "end": {
              "line": 97,
              "column": 4
            }
          },
          "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createTextNode("\n        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "style", "text-align:center;");
          var el3 = dom.createTextNode("\n            ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'colspan');
          morphs[1] = dom.createMorphAt(element1, 1, 1);
          return morphs;
        },
        statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [93, 23], [93, 30]]]]]]], ["content", "placeholder", ["loc", [null, [94, 12], [94, 27]]]]],
        locals: [],
        templates: []
      };
    })();
    var child5 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 98,
                "column": 6
              },
              "end": {
                "line": 122,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "object-list-view-row", [], ["record", ["subexpr", "@mut", [["get", "record", ["loc", [null, [100, 17], [100, 23]]]]], [], []], "columns", ["subexpr", "@mut", [["get", "columns", ["loc", [null, [101, 18], [101, 25]]]]], [], []], "readonly", ["subexpr", "@mut", [["get", "readonly", ["loc", [null, [102, 19], [102, 27]]]]], [], []], "required", ["subexpr", "@mut", [["get", "required", ["loc", [null, [103, 19], [103, 27]]]]], [], []], "showMenuColumn", ["subexpr", "@mut", [["get", "showMenuColumn", ["loc", [null, [104, 25], [104, 39]]]]], [], []], "showHelperColumn", ["subexpr", "@mut", [["get", "showHelperColumn", ["loc", [null, [105, 27], [105, 43]]]]], [], []], "defaultRowConfig", ["subexpr", "@mut", [["get", "defaultRowConfig", ["loc", [null, [106, 27], [106, 43]]]]], [], []], "showValidationMessages", ["subexpr", "@mut", [["get", "showValidationMessagesInRow", ["loc", [null, [107, 33], [107, 60]]]]], [], []], "showDeleteMenuItemInRow", ["subexpr", "@mut", [["get", "showDeleteMenuItemInRow", ["loc", [null, [108, 34], [108, 57]]]]], [], []], "showEditMenuItemInRow", ["subexpr", "@mut", [["get", "showEditMenuItemInRow", ["loc", [null, [109, 32], [109, 53]]]]], [], []], "showAsteriskInRow", ["subexpr", "@mut", [["get", "showAsteriskInRow", ["loc", [null, [110, 28], [110, 45]]]]], [], []], "showCheckBoxInRow", ["subexpr", "@mut", [["get", "showCheckBoxInRow", ["loc", [null, [111, 28], [111, 45]]]]], [], []], "showDeleteButtonInRow", ["subexpr", "@mut", [["get", "showDeleteButtonInRow", ["loc", [null, [112, 32], [112, 53]]]]], [], []], "hierarchicalIndent", ["subexpr", "@mut", [["get", "hierarchicalIndent", ["loc", [null, [113, 29], [113, 47]]]]], [], []], "inHierarchicalMode", ["subexpr", "@mut", [["get", "inHierarchicalMode", ["loc", [null, [114, 29], [114, 47]]]]], [], []], "singleColumnCellComponent", ["subexpr", "@mut", [["get", "singleColumnCellComponent", ["loc", [null, [115, 36], [115, 61]]]]], [], []], "loadRecords", ["subexpr", "@mut", [["get", "loadRecords", ["loc", [null, [116, 22], [116, 33]]]]], [], []], "doRenderData", ["subexpr", "@mut", [["get", "record.doRenderData", ["loc", [null, [117, 23], [117, 42]]]]], [], []], "rowClick", ["subexpr", "action", ["rowClick"], [], ["loc", [null, [118, 19], [118, 38]]]], "selectRow", ["subexpr", "action", ["selectRow"], [], ["loc", [null, [119, 20], [119, 40]]]], "deleteRow", ["subexpr", "action", ["deleteRow"], [], ["loc", [null, [120, 20], [120, 40]]]]], ["loc", [null, [99, 8], [121, 10]]]]],
          locals: ["record"],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 123,
                "column": 6
              },
              "end": {
                "line": 130,
                "column": 6
              }
            },
            "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createTextNode("\n          ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            dom.setAttribute(el2, "style", "text-align:center;");
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "ui active centered inline loader");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n            ");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createAttrMorph(element0, 'colspan');
            morphs[1] = dom.createMorphAt(element0, 3, 3);
            return morphs;
          },
          statements: [["attribute", "colspan", ["concat", [["get", "colspan", ["loc", [null, [125, 25], [125, 32]]]]]]], ["inline", "t", ["components.object-list-view.loading-text"], [], ["loc", [null, [127, 12], [127, 60]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 97,
              "column": 4
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "contentWithKeys", ["loc", [null, [98, 14], [98, 29]]]]], ["key", "key"], 0, null, ["loc", [null, [98, 6], [122, 15]]]], ["block", "if", [["get", "rowByRowLoadingProgress", ["loc", [null, [123, 12], [123, 35]]]]], [], 1, null, ["loc", [null, [123, 6], [130, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type", "multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 134,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/mobile/components/object-list-view.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("table");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("tbody");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element12 = dom.childAt(fragment, [1]);
        var element13 = dom.childAt(element12, [3]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element12, 'class');
        morphs[2] = dom.createMorphAt(element12, 1, 1);
        morphs[3] = dom.createAttrMorph(element13, 'class');
        morphs[4] = dom.createMorphAt(element13, 1, 1);
        morphs[5] = dom.createMorphAt(element13, 2, 2);
        morphs[6] = dom.createMorphAt(element13, 3, 3);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "errorMessages", ["loc", [null, [1, 6], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [11, 7]]]], ["attribute", "class", ["concat", ["object-list-view ui unstackable celled ", ["subexpr", "if", [["get", "readonly", ["loc", [null, [12, 58], [12, 66]]]], "readonly"], [], ["loc", [null, [12, 53], [12, 79]]]], " ", ["get", "tableClass", ["loc", [null, [12, 82], [12, 92]]]], " table"]]], ["block", "if", [["get", "singleColumnHeaderTitle", ["loc", [null, [13, 8], [13, 31]]]]], [], 1, null, ["loc", [null, [13, 2], [48, 9]]]], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "showLoadingTbodyClass", ["loc", [null, [49, 21], [49, 42]]]], "ui loading form", ""], [], ["loc", [null, [49, 16], [49, 65]]]]]]], ["block", "if", [["get", "showFilters", ["loc", [null, [50, 10], [50, 21]]]]], [], 2, null, ["loc", [null, [50, 4], [83, 11]]]], ["block", "if", [["get", "rowsInLoadingState", ["loc", [null, [84, 10], [84, 28]]]]], [], 3, null, ["loc", [null, [84, 4], [90, 11]]]], ["block", "unless", [["get", "content", ["loc", [null, [91, 14], [91, 21]]]]], [], 4, 5, ["loc", [null, [91, 4], [131, 15]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define("ember-app/templates/new-platform-flexberry-services-lock-list", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/new-platform-flexberry-services-lock-list.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "row");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["inline", "t", ["forms.new-platform-flexberry-services-lock-list.caption"], [], ["loc", [null, [1, 4], [1, 67]]]], ["inline", "flexberry-objectlistview", [], ["content", ["subexpr", "@mut", [["get", "model", ["loc", [null, [4, 12], [4, 17]]]]], [], []], "modelName", ["subexpr", "@mut", [["get", "modelName", ["loc", [null, [5, 14], [5, 23]]]]], [], []], "modelProjection", ["subexpr", "@mut", [["get", "modelProjection", ["loc", [null, [6, 20], [6, 35]]]]], [], []], "editFormRoute", ["subexpr", "@mut", [["get", "editFormRoute", ["loc", [null, [7, 18], [7, 31]]]]], [], []], "refreshButton", true, "createNewButton", false, "deleteButton", true, "showCheckBoxInRow", true, "showDeleteButtonInRow", true, "pages", ["subexpr", "@mut", [["get", "pages", ["loc", [null, [13, 10], [13, 15]]]]], [], []], "perPageValue", ["subexpr", "@mut", [["get", "perPageValue", ["loc", [null, [14, 17], [14, 29]]]]], [], []], "perPageValues", ["subexpr", "@mut", [["get", "perPageValues", ["loc", [null, [15, 18], [15, 31]]]]], [], []], "recordsTotalCount", ["subexpr", "@mut", [["get", "recordsTotalCount", ["loc", [null, [16, 22], [16, 39]]]]], [], []], "hasPreviousPage", ["subexpr", "@mut", [["get", "hasPreviousPage", ["loc", [null, [17, 20], [17, 35]]]]], [], []], "hasNextPage", ["subexpr", "@mut", [["get", "hasNextPage", ["loc", [null, [18, 16], [18, 27]]]]], [], []], "gotoPage", ["subexpr", "action", ["gotoPage"], [], ["loc", [null, [19, 13], [19, 32]]]], "nextPage", ["subexpr", "action", ["nextPage"], [], ["loc", [null, [20, 13], [20, 32]]]], "previousPage", ["subexpr", "action", ["previousPage"], [], ["loc", [null, [21, 17], [21, 40]]]], "orderable", true, "sorting", ["subexpr", "@mut", [["get", "computedSorting", ["loc", [null, [23, 12], [23, 27]]]]], [], []], "sortByColumn", ["subexpr", "action", ["sortByColumn"], [], ["loc", [null, [24, 17], [24, 40]]]], "addColumnToSorting", ["subexpr", "action", ["addColumnToSorting"], [], ["loc", [null, [25, 23], [25, 52]]]], "componentName", "LockObjectListView"], ["loc", [null, [3, 2], [27, 4]]]]],
      locals: [],
      templates: []
    };
  })());
});
define("ember-app/templates/sitemap-node-content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "ember-app/templates/sitemap-node-content.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "render", ["sitemap-node", ["get", "child", ["loc", [null, [5, 30], [5, 35]]]]], [], ["loc", [null, [5, 6], [5, 37]]]]],
          locals: ["child"],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/sitemap-node-content.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "menu subMenu hidden-menu");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "model.children", ["loc", [null, [4, 12], [4, 26]]]]], [], 0, null, ["loc", [null, [4, 4], [6, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["multiple-nodes", "wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 7
          }
        },
        "moduleName": "ember-app/templates/sitemap-node-content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'onclick');
        morphs[1] = dom.createMorphAt(element0, 0, 0);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "onclick", ["subexpr", "action", ["subMenuEl"], ["bubbles", false], ["loc", [null, [1, 14], [1, 50]]]]], ["content", "model.caption", ["loc", [null, [1, 51], [1, 68]]]], ["block", "if", [["get", "model.children.length", ["loc", [null, [2, 6], [2, 27]]]]], [], 0, null, ["loc", [null, [2, 0], [8, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("ember-app/templates/sitemap-node", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "fragmentReason": false,
            "revision": "Ember@2.4.6",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "ember-app/templates/sitemap-node.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "partial", ["sitemap-node-content"], [], ["loc", [null, [3, 4], [3, 38]]]]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/sitemap-node.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "model.link", ["loc", [null, [2, 11], [2, 21]]]]], ["class", "item", "title", ["subexpr", "@mut", [["get", "model.title", ["loc", [null, [2, 41], [2, 52]]]]], [], []], "invokeAction", ["subexpr", "action", ["hideSidebar"], [], ["loc", [null, [2, 66], [2, 88]]]]], 0, null, ["loc", [null, [2, 0], [4, 14]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "fragmentReason": false,
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 11,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/sitemap-node.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "item item-menu");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "item-plus");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "item-minus hidden-menu");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [1]);
          var element2 = dom.childAt(element0, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element1, 'onclick');
          morphs[1] = dom.createAttrMorph(element2, 'onclick');
          morphs[2] = dom.createMorphAt(element0, 5, 5);
          return morphs;
        },
        statements: [["attribute", "onclick", ["subexpr", "action", ["subMenuEl"], ["bubbles", false], ["loc", [null, [7, 35], [7, 71]]]]], ["attribute", "onclick", ["subexpr", "action", ["subMenuEl"], ["bubbles", false], ["loc", [null, [8, 48], [8, 84]]]]], ["inline", "partial", ["sitemap-node-content"], [], ["loc", [null, [9, 4], [9, 38]]]]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/sitemap-node.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "model.link", ["loc", [null, [1, 6], [1, 16]]]]], [], 0, 1, ["loc", [null, [1, 0], [11, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("ember-app/templates/sitemap", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "fragmentReason": {
            "name": "missing-wrapper",
            "problems": ["wrong-type"]
          },
          "revision": "Ember@2.4.6",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "ember-app/templates/sitemap.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("	");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "render", ["sitemap-node", ["get", "node", ["loc", [null, [2, 25], [2, 29]]]]], [], ["loc", [null, [2, 1], [2, 31]]]]],
        locals: ["node"],
        templates: []
      };
    })();
    return {
      meta: {
        "fragmentReason": {
          "name": "missing-wrapper",
          "problems": ["wrong-type"]
        },
        "revision": "Ember@2.4.6",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "ember-app/templates/sitemap.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "model.nodes", ["loc", [null, [1, 8], [1, 19]]]]], [], 0, null, ["loc", [null, [1, 0], [3, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('ember-app/transforms/decimal', ['exports', 'ember-flexberry-data/transforms/decimal'], function (exports, _emberFlexberryDataTransformsDecimal) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsDecimal['default'];
    }
  });
});
define('ember-app/transforms/file', ['exports', 'ember-flexberry-data/transforms/file'], function (exports, _emberFlexberryDataTransformsFile) {
  exports['default'] = _emberFlexberryDataTransformsFile['default'];
});
define('ember-app/transforms/flexberry-ember-demo-gender', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'ember-app/enums/flexberry-ember-demo-gender'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _emberAppEnumsFlexberryEmberDemoGender) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _emberAppEnumsFlexberryEmberDemoGender['default'],
    sourceType: 'FlexberryEmberDemo.Gender'
  });
});
define('ember-app/transforms/flexberry-ember-demo-vote-type', ['exports', 'ember-flexberry-data/transforms/flexberry-enum', 'ember-app/enums/flexberry-ember-demo-vote-type'], function (exports, _emberFlexberryDataTransformsFlexberryEnum, _emberAppEnumsFlexberryEmberDemoVoteType) {
  exports['default'] = _emberFlexberryDataTransformsFlexberryEnum['default'].extend({
    'enum': _emberAppEnumsFlexberryEmberDemoVoteType['default'],
    sourceType: 'FlexberryEmberDemo.VoteType'
  });
});
define('ember-app/transforms/flexberry-enum', ['exports', 'ember-flexberry-data/transforms/flexberry-enum'], function (exports, _emberFlexberryDataTransformsFlexberryEnum) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsFlexberryEnum['default'];
    }
  });
});
define('ember-app/transforms/guid', ['exports', 'ember-flexberry-data/transforms/guid'], function (exports, _emberFlexberryDataTransformsGuid) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsGuid['default'];
    }
  });
});
define('ember-app/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant', ['exports', 'ember-flexberry-data/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-execution-variant'], function (exports, _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTExecutionVariant['default'];
    }
  });
});
define('ember-app/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation', ['exports', 'ember-flexberry-data/transforms/i-c-s-soft-s-t-o-r-m-n-e-t-business-audit-objects-t-type-of-audit-operation'], function (exports, _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryDataTransformsICSSoftSTORMNETBusinessAuditObjectsTTypeOfAuditOperation['default'];
    }
  });
});
define('ember-app/utils/deserialize-sorting-param', ['exports', 'ember-flexberry/utils/deserialize-sorting-param'], function (exports, _emberFlexberryUtilsDeserializeSortingParam) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryUtilsDeserializeSortingParam['default'];
    }
  });
});
define('ember-app/utils/get-current-agregator', ['exports', 'ember-flexberry/utils/get-current-agregator'], function (exports, _emberFlexberryUtilsGetCurrentAgregator) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryUtilsGetCurrentAgregator['default'];
    }
  });
});
define('ember-app/utils/i18n/compile-template', ['exports', 'ember-i18n/utils/i18n/compile-template'], function (exports, _emberI18nUtilsI18nCompileTemplate) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nCompileTemplate['default'];
    }
  });
});
define('ember-app/utils/i18n/missing-message', ['exports', 'ember-i18n/utils/i18n/missing-message'], function (exports, _emberI18nUtilsI18nMissingMessage) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nMissingMessage['default'];
    }
  });
});
define('ember-app/utils/need-save-current-agregator', ['exports', 'ember-flexberry/utils/need-save-current-agregator'], function (exports, _emberFlexberryUtilsNeedSaveCurrentAgregator) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryUtilsNeedSaveCurrentAgregator['default'];
    }
  });
});
define('ember-app/utils/serialize-sorting-param', ['exports', 'ember-flexberry/utils/serialize-sorting-param'], function (exports, _emberFlexberryUtilsSerializeSortingParam) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberFlexberryUtilsSerializeSortingParam['default'];
    }
  });
});
define('ember-app/validators/local/datetime', ['exports', 'ember-flexberry/validators/local/datetime'], function (exports, _emberFlexberryValidatorsLocalDatetime) {
  exports['default'] = _emberFlexberryValidatorsLocalDatetime['default'];
});
define('ember-app/views/application', ['exports', 'ember'], function (exports, _ember) {

  /**
   * Overload wrapper tag name for disabling wrapper.
   *
   * The sidebar, as per Semantic-UI's documentation,
   * will need to be directly below the body element.
   */
  exports['default'] = _ember['default'].Component.extend({
    tagName: ''
  });
});
/* jshint ignore:start */



/* jshint ignore:end */

/* jshint ignore:start */

define('ember-app/config/environment', ['ember'], function(Ember) {
  var prefix = 'ember-app';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */

if (!runningTests) {
  require("ember-app/app")["default"].create({"backendUrl":"https://flexberry-ember-demo.azurewebsites.net","backendUrls":{"root":"https://flexberry-ember-demo.azurewebsites.net","api":"https://flexberry-ember-demo.azurewebsites.net/odata"},"useUserSettingsService":true,"offline":{"dbName":"flexberry-ember-demo","offlineEnabled":true,"modeSwitchOnErrorsEnabled":false,"syncDownWhenOnlineEnabled":true,"alwaysLoadedOnLoginObjects":[],"checkIsAliveTimeout":2000},"log":{"enabled":true,"storeErrorMessages":false,"storeWarnMessages":false,"storeLogMessages":false,"storeInfoMessages":false,"storeDebugMessages":false,"storeDeprecationMessages":false,"showPromiseErrors":true},"components":{"flexberryFile":{"uploadUrl":"https://flexberry-ember-demo.azurewebsites.net/api/File","maxUploadFileSize":null,"uploadOnModelPreSave":true,"showUploadButton":true,"showModalDialogOnUploadError":true,"showModalDialogOnDownloadError":true}},"name":"ember-app","version":"0.0.0+56ca60d8"});
}

/* jshint ignore:end */
//# sourceMappingURL=ember-app.map
